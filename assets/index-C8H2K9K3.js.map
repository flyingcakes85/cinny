{"version":3,"file":"index-C8H2K9K3.js","sources":["../../node_modules/@matrix-org/matrix-sdk-crypto-wasm/pkg/matrix_sdk_crypto_wasm_bg.js","../../node_modules/@matrix-org/matrix-sdk-crypto-wasm/index.mjs","../../node_modules/another-json/another-json.js","../../node_modules/matrix-js-sdk/lib/rust-crypto/RoomEncryptor.js","../../node_modules/matrix-js-sdk/lib/rust-crypto/DehydratedDeviceManager.js","../../node_modules/matrix-js-sdk/lib/rust-crypto/OutgoingRequestProcessor.js","../../node_modules/matrix-js-sdk/lib/rust-crypto/KeyClaimManager.js","../../node_modules/matrix-js-sdk/lib/rust-crypto/device-converter.js","../../node_modules/matrix-js-sdk/lib/rust-crypto/CrossSigningIdentity.js","../../node_modules/matrix-js-sdk/lib/rust-crypto/secret-storage.js","../../node_modules/matrix-js-sdk/lib/rust-crypto/verification.js","../../node_modules/matrix-js-sdk/lib/rust-crypto/backup.js","../../node_modules/matrix-js-sdk/lib/rust-crypto/OutgoingRequestsManager.js","../../node_modules/matrix-js-sdk/lib/rust-crypto/PerSessionKeyBackupDownloader.js","../../node_modules/matrix-js-sdk/lib/common-crypto/key-passphrase.js","../../node_modules/matrix-js-sdk/lib/rust-crypto/rust-crypto.js","../../node_modules/matrix-js-sdk/lib/rust-crypto/libolm_migration.js","../../node_modules/matrix-js-sdk/lib/rust-crypto/index.js"],"sourcesContent":["let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction addToExternrefTable0(obj) {\n    const idx = wasm.__externref_table_alloc();\n    wasm.__wbindgen_export_4.set(idx, obj);\n    return idx;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        const idx = addToExternrefTable0(e);\n        wasm.__wbindgen_exn_store(idx);\n    }\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nconst CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(state => {\n    wasm.__wbindgen_export_6.get(state.dtor)(state.a, state.b)\n});\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_6.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state);\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\n\nfunction makeClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        try {\n            return f(state.a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_6.get(state.dtor)(state.a, state.b);\n                state.a = 0;\n                CLOSURE_DTORS.unregister(state);\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches && builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8ArrayMemory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction takeFromExternrefTable0(idx) {\n    const value = wasm.__wbindgen_export_4.get(idx);\n    wasm.__externref_table_dealloc(idx);\n    return value;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n}\n\nfunction passArrayJsValueToWasm0(array, malloc) {\n    const ptr = malloc(array.length * 4, 4) >>> 0;\n    for (let i = 0; i < array.length; i++) {\n        const add = addToExternrefTable0(array[i]);\n        getDataViewMemory0().setUint32(ptr + 4 * i, add, true);\n    }\n    WASM_VECTOR_LEN = array.length;\n    return ptr;\n}\n\nfunction getArrayJsValueFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    const mem = getDataViewMemory0();\n    const result = [];\n    for (let i = ptr; i < ptr + 4 * len; i += 4) {\n        result.push(wasm.__wbindgen_export_4.get(mem.getUint32(i, true)));\n    }\n    wasm.__externref_drop_slice(ptr, len);\n    return result;\n}\n\nlet cachedUint16ArrayMemory0 = null;\n\nfunction getUint16ArrayMemory0() {\n    if (cachedUint16ArrayMemory0 === null || cachedUint16ArrayMemory0.byteLength === 0) {\n        cachedUint16ArrayMemory0 = new Uint16Array(wasm.memory.buffer);\n    }\n    return cachedUint16ArrayMemory0;\n}\n\nfunction getArrayU16FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint16ArrayMemory0().subarray(ptr / 2, ptr / 2 + len);\n}\n/**\n * Get the versions of the Rust libraries we are using.\n * @returns {Versions}\n */\nexport function getVersions() {\n    const ret = wasm.getVersions();\n    return Versions.__wrap(ret);\n}\n\n/**\n * Run some stuff when the Wasm module is instantiated.\n *\n * Right now, it does the following:\n *\n * * Redirect Rust panics to JavaScript console.\n */\nexport function start() {\n    wasm.start();\n}\n\nfunction __wbg_adapter_58(arg0, arg1, arg2) {\n    const ret = wasm.closure29_externref_shim_multivalue_shim(arg0, arg1, arg2);\n    if (ret[1]) {\n        throw takeFromExternrefTable0(ret[0]);\n    }\n}\n\nfunction __wbg_adapter_61(arg0, arg1) {\n    wasm._dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h607bd7dfd48e12ce(arg0, arg1);\n}\n\nfunction __wbg_adapter_64(arg0, arg1, arg2) {\n    wasm.closure734_externref_shim(arg0, arg1, arg2);\n}\n\nfunction __wbg_adapter_67(arg0, arg1) {\n    wasm._dyn_core__ops__function__Fn_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h6591bac8898b164c(arg0, arg1);\n}\n\nfunction __wbg_adapter_70(arg0, arg1, arg2) {\n    wasm.closure410_externref_shim(arg0, arg1, arg2);\n}\n\nfunction __wbg_adapter_788(arg0, arg1, arg2, arg3) {\n    wasm.closure422_externref_shim(arg0, arg1, arg2, arg3);\n}\n\n/**\n * Decryption error codes\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6}\n */\nexport const DecryptionErrorCode = Object.freeze({\n    /**\n     * The room key is not known\n     */\n    MissingRoomKey: 0, \"0\": \"MissingRoomKey\",\n    /**\n     * The room key is known but ratcheted\n     */\n    UnknownMessageIndex: 1, \"1\": \"UnknownMessageIndex\",\n    /**\n     * Decryption failed because of a mismatch between the identity keys of the\n     * device we received the room key from and the identity keys recorded in\n     * the plaintext of the room key to-device message.\n     */\n    MismatchedIdentityKeys: 2, \"2\": \"MismatchedIdentityKeys\",\n    /**\n     * We weren't able to link the message back to any known device.\n     */\n    UnknownSenderDevice: 3, \"3\": \"UnknownSenderDevice\",\n    /**\n     * The sender device is not cross-signed.\n     */\n    UnsignedSenderDevice: 4, \"4\": \"UnsignedSenderDevice\",\n    /**\n     * The sender's identity is unverified, but was previously verified.\n     */\n    SenderIdentityVerificationViolation: 5, \"5\": \"SenderIdentityVerificationViolation\",\n    /**\n     * Other failure.\n     */\n    UnableToDecrypt: 6, \"6\": \"UnableToDecrypt\",\n});\n/**\n * The basic key algorithm names in the specification.\n * @enum {0 | 1 | 3}\n */\nexport const DeviceKeyAlgorithmName = Object.freeze({\n    /**\n     * The Ed25519 signature algorithm.\n     */\n    Ed25519: 0, \"0\": \"Ed25519\",\n    /**\n     * The Curve25519 ECDH algorithm.\n     */\n    Curve25519: 1, \"1\": \"Curve25519\",\n    /**\n     * An unknown device key algorithm.\n     */\n    Unknown: 3, \"3\": \"Unknown\",\n});\n/**\n * An enum over the different key types a device can have.\n *\n * Currently devices have a curve25519 and ed25519 keypair. The keys\n * transport format is a base64 encoded string, any unknown key type\n * will be left as such a string.\n * @enum {0 | 1 | 2}\n */\nexport const DeviceKeyName = Object.freeze({\n    /**\n     * The curve25519 device key.\n     */\n    Curve25519: 0, \"0\": \"Curve25519\",\n    /**\n     * The ed25519 device key.\n     */\n    Ed25519: 1, \"1\": \"Ed25519\",\n    /**\n     * An unknown device key.\n     */\n    Unknown: 2, \"2\": \"Unknown\",\n});\n/**\n * An encryption algorithm to be used to encrypt messages sent to a\n * room.\n * @enum {0 | 1 | 2}\n */\nexport const EncryptionAlgorithm = Object.freeze({\n    /**\n     * Olm version 1 using Curve25519, AES-256, and SHA-256.\n     */\n    OlmV1Curve25519AesSha2: 0, \"0\": \"OlmV1Curve25519AesSha2\",\n    /**\n     * Megolm version 1 using AES-256 and SHA-256.\n     */\n    MegolmV1AesSha2: 1, \"1\": \"MegolmV1AesSha2\",\n    /**\n     * Unsupported algorithm.\n     *\n     * Applications should ignore this value if it is received, and should\n     * never set it.\n     */\n    Unknown: 2, \"2\": \"Unknown\",\n});\n/**\n * Who can see a room's history.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const HistoryVisibility = Object.freeze({\n    /**\n     * Previous events are accessible to newly joined members from\n     * the point they were invited onwards.\n     *\n     * Events stop being accessible when the member's state changes\n     * to something other than *invite* or *join*.\n     */\n    Invited: 0, \"0\": \"Invited\",\n    /**\n     * Previous events are accessible to newly joined members from\n     * the point they joined the room onwards.\n     *\n     * Events stop being accessible when the member's state changes\n     * to something other than *join*.\n     */\n    Joined: 1, \"1\": \"Joined\",\n    /**\n     * Previous events are always accessible to newly joined members.\n     *\n     * All events in the room are accessible, even those sent when\n     * the member was not a part of the room.\n     */\n    Shared: 2, \"2\": \"Shared\",\n    /**\n     * All events while this is the `HistoryVisibility` value may be\n     * shared by any participating homeserver with anyone, regardless\n     * of whether they have ever joined the room.\n     */\n    WorldReadable: 3, \"3\": \"WorldReadable\",\n});\n/**\n * The local trust state of a device.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const LocalTrust = Object.freeze({\n    /**\n     * The device has been verified and is trusted.\n     */\n    Verified: 0, \"0\": \"Verified\",\n    /**\n     * The device been blacklisted from communicating.\n     */\n    BlackListed: 1, \"1\": \"BlackListed\",\n    /**\n     * The trust state of the device is being ignored.\n     */\n    Ignored: 2, \"2\": \"Ignored\",\n    /**\n     * The trust state is unset.\n     */\n    Unset: 3, \"3\": \"Unset\",\n});\n/**\n * Logger level.\n * @enum {0 | 1 | 2 | 3 | 4}\n */\nexport const LoggerLevel = Object.freeze({\n    /**\n     * `TRACE` level.\n     *\n     * Designate very low priority, often extremely verbose,\n     * information.\n     */\n    Trace: 0, \"0\": \"Trace\",\n    /**\n     * `DEBUG` level.\n     *\n     * Designate lower priority information.\n     */\n    Debug: 1, \"1\": \"Debug\",\n    /**\n     * `INFO` level.\n     *\n     * Designate useful information.\n     */\n    Info: 2, \"2\": \"Info\",\n    /**\n     * `WARN` level.\n     *\n     * Designate hazardous situations.\n     */\n    Warn: 3, \"3\": \"Warn\",\n    /**\n     * `ERROR` level.\n     *\n     * Designate very serious errors.\n     */\n    Error: 4, \"4\": \"Error\",\n});\n/**\n * The mode of the QR code login.\n *\n * The QR code login mechanism supports both, the new device, as well as the\n * existing device to display the QR code.\n *\n * The different modes have an explicit one-byte identifier which gets added to\n * the QR code data.\n * @enum {0 | 1}\n */\nexport const QrCodeMode = Object.freeze({\n    /**\n     * The new device is displaying the QR code.\n     */\n    Login: 0, \"0\": \"Login\",\n    /**\n     * The existing device is displaying the QR code.\n     */\n    Reciprocate: 1, \"1\": \"Reciprocate\",\n});\n/**\n * List of `Qr` states\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const QrState = Object.freeze({\n    /**\n     * We have received the other device's details (from the\n     * `m.key.verification.request` or `m.key.verification.ready`) and\n     * established the shared secret, so can\n     * display the QR code.\n     */\n    Created: 0, \"0\": \"Created\",\n    /**\n     * The other side has scanned our QR code and sent an\n     * `m.key.verification.start` message with `method: m.reciprocate.v1` with\n     * matching shared secret.\n     */\n    Scanned: 1, \"1\": \"Scanned\",\n    /**\n     * Our user has confirmed that the other device scanned successfully. We\n     * have sent an `m.key.verification.done`.\n     */\n    Confirmed: 2, \"2\": \"Confirmed\",\n    /**\n     * We have scanned the other side's QR code and are able to send a\n     * `m.key.verification.start` message with `method: m.reciprocate.v1`.\n     *\n     * Call `Qr::reciprocate` to build the start message.\n     *\n     * Note that, despite the name of this state, we have not necessarily\n     * yet sent the `m.reciprocate.v1` message.\n     */\n    Reciprocated: 3, \"3\": \"Reciprocated\",\n    /**\n     * Verification complete: we have received an `m.key.verification.done`\n     * from the other side.\n     */\n    Done: 4, \"4\": \"Done\",\n    /**\n     * Verification cancelled or failed.\n     */\n    Cancelled: 5, \"5\": \"Cancelled\",\n});\n/**\n * Represent the type of a request.\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6}\n */\nexport const RequestType = Object.freeze({\n    /**\n     * Represents a `KeysUploadRequest`.\n     */\n    KeysUpload: 0, \"0\": \"KeysUpload\",\n    /**\n     * Represents a `KeysQueryRequest`.\n     */\n    KeysQuery: 1, \"1\": \"KeysQuery\",\n    /**\n     * Represents a `KeysClaimRequest`.\n     */\n    KeysClaim: 2, \"2\": \"KeysClaim\",\n    /**\n     * Represents a `ToDeviceRequest`.\n     */\n    ToDevice: 3, \"3\": \"ToDevice\",\n    /**\n     * Represents a `SignatureUploadRequest`.\n     */\n    SignatureUpload: 4, \"4\": \"SignatureUpload\",\n    /**\n     * Represents a `RoomMessageRequest`.\n     */\n    RoomMessage: 5, \"5\": \"RoomMessage\",\n    /**\n     * Represents a `KeysBackupRequest`.\n     */\n    KeysBackup: 6, \"6\": \"KeysBackup\",\n});\n/**\n * Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]\n * for more info.\n * @enum {0 | 1 | 2}\n */\nexport const ShieldColor = Object.freeze({\n    /**\n     * Important warning\n     */\n    Red: 0, \"0\": \"Red\",\n    /**\n     * Low warning\n     */\n    Grey: 1, \"1\": \"Grey\",\n    /**\n     * No warning\n     */\n    None: 2, \"2\": \"None\",\n});\n/**\n * A machine-readable representation of the authenticity for a `ShieldState`.\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const ShieldStateCode = Object.freeze({\n    /**\n     * Not enough information available to check the authenticity.\n     */\n    AuthenticityNotGuaranteed: 0, \"0\": \"AuthenticityNotGuaranteed\",\n    /**\n     * The sending device isn't yet known by the Client.\n     */\n    UnknownDevice: 1, \"1\": \"UnknownDevice\",\n    /**\n     * The sending device hasn't been verified by the sender.\n     */\n    UnsignedDevice: 2, \"2\": \"UnsignedDevice\",\n    /**\n     * The sender hasn't been verified by the Client's user.\n     */\n    UnverifiedIdentity: 3, \"3\": \"UnverifiedIdentity\",\n    /**\n     * An unencrypted event in an encrypted room.\n     */\n    SentInClear: 4, \"4\": \"SentInClear\",\n    /**\n     * The sender was previously verified but changed their identity.\n     */\n    VerificationViolation: 5, \"5\": \"VerificationViolation\",\n});\n/**\n * The result of a signature check.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const SignatureState = Object.freeze({\n    /**\n     * The signature is missing.\n     */\n    Missing: 0, \"0\": \"Missing\",\n    /**\n     * The signature is invalid.\n     */\n    Invalid: 1, \"1\": \"Invalid\",\n    /**\n     * The signature is valid but the device or user identity that created the\n     * signature is not trusted.\n     */\n    ValidButNotTrusted: 2, \"2\": \"ValidButNotTrusted\",\n    /**\n     * The signature is valid and the device or user identity that created the\n     * signature is trusted.\n     */\n    ValidAndTrusted: 3, \"3\": \"ValidAndTrusted\",\n});\n/**\n * The trust level required to decrypt an event\n * @enum {0 | 1 | 2}\n */\nexport const TrustRequirement = Object.freeze({\n    /**\n     * Decrypt events from everyone regardless of trust\n     */\n    Untrusted: 0, \"0\": \"Untrusted\",\n    /**\n     * Only decrypt events from cross-signed or legacy devices\n     */\n    CrossSignedOrLegacy: 1, \"1\": \"CrossSignedOrLegacy\",\n    /**\n     * Only decrypt events from cross-signed devices\n     */\n    CrossSigned: 2, \"2\": \"CrossSigned\",\n});\n/**\n * List of available verification methods.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const VerificationMethod = Object.freeze({\n    /**\n     * The `m.sas.v1` verification method.\n     *\n     * SAS means Short Authentication String.\n     */\n    SasV1: 0, \"0\": \"SasV1\",\n    /**\n     * The `m.qr_code.scan.v1` verification method.\n     */\n    QrCodeScanV1: 1, \"1\": \"QrCodeScanV1\",\n    /**\n     * The `m.qr_code.show.v1` verification method.\n     */\n    QrCodeShowV1: 2, \"2\": \"QrCodeShowV1\",\n    /**\n     * The `m.reciprocate.v1` verification method.\n     */\n    ReciprocateV1: 3, \"3\": \"ReciprocateV1\",\n});\n/**\n * List of VerificationRequestState phases\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const VerificationRequestPhase = Object.freeze({\n    /**\n     * The verification request has been newly created by us.\n     */\n    Created: 0, \"0\": \"Created\",\n    /**\n     * The verification request was received from the other party.\n     */\n    Requested: 1, \"1\": \"Requested\",\n    /**\n     * The verification request is ready to start a verification flow.\n     */\n    Ready: 2, \"2\": \"Ready\",\n    /**\n     * The verification request has transitioned into a concrete verification\n     * flow. For example it transitioned into the emoji based SAS\n     * verification.\n     */\n    Transitioned: 3, \"3\": \"Transitioned\",\n    /**\n     * The verification flow that was started with this request has finished.\n     */\n    Done: 4, \"4\": \"Done\",\n    /**\n     * The verification process has been cancelled.\n     */\n    Cancelled: 5, \"5\": \"Cancelled\",\n});\n\nconst __wbindgen_enum_IdbRequestReadyState = [\"pending\", \"done\"];\n\nconst __wbindgen_enum_IdbTransactionMode = [\"readonly\", \"readwrite\", \"versionchange\", \"readwriteflush\", \"cleanup\"];\n\nconst AttachmentFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_attachment_free(ptr >>> 0, 1));\n/**\n * A type to encrypt and to decrypt anything that can fit in an\n * `Uint8Array`, usually big buffer.\n */\nexport class Attachment {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AttachmentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_attachment_free(ptr, 0);\n    }\n    /**\n     * Encrypt the content of the `Uint8Array`.\n     *\n     * It produces an `EncryptedAttachment`, which can be used to\n     * retrieve the media encryption information, or the encrypted\n     * data.\n     * @param {Uint8Array} array\n     * @returns {EncryptedAttachment}\n     */\n    static encrypt(array) {\n        const ptr0 = passArray8ToWasm0(array, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.attachment_encrypt(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return EncryptedAttachment.__wrap(ret[0]);\n    }\n    /**\n     * Decrypt an `EncryptedAttachment`.\n     *\n     * The encrypted attachment can be created manually, or from the\n     * `encrypt` method.\n     *\n     * **Warning**: The encrypted attachment can be used only\n     * **once**! The encrypted data will still be present, but the\n     * media encryption info (which contain secrets) will be\n     * destroyed. It is still possible to get a JSON-encoded backup\n     * by calling `EncryptedAttachment.mediaEncryptionInfo`.\n     * @param {EncryptedAttachment} attachment\n     * @returns {Uint8Array}\n     */\n    static decrypt(attachment) {\n        _assertClass(attachment, EncryptedAttachment);\n        const ret = wasm.attachment_decrypt(attachment.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n}\n\nconst BackupDecryptionKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupdecryptionkey_free(ptr >>> 0, 1));\n/**\n * The private part of the backup key, the one used for recovery.\n */\nexport class BackupDecryptionKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupDecryptionKey.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupDecryptionKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupDecryptionKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupdecryptionkey_free(ptr, 0);\n    }\n    /**\n     * Create a new random [`BackupDecryptionKey`].\n     * @returns {BackupDecryptionKey}\n     */\n    static createRandomKey() {\n        const ret = wasm.backupdecryptionkey_createRandomKey();\n        return BackupDecryptionKey.__wrap(ret);\n    }\n    /**\n     * Try to create a [`BackupDecryptionKey`] from a base 64 encoded string.\n     * @param {string} key\n     * @returns {BackupDecryptionKey}\n     */\n    static fromBase64(key) {\n        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.backupdecryptionkey_fromBase64(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return BackupDecryptionKey.__wrap(ret[0]);\n    }\n    /**\n     * Convert the backup decryption key to a base 64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        const ret = wasm.backupdecryptionkey_toBase64(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the public part of the backup key.\n     * @returns {MegolmV1BackupKey}\n     */\n    get megolmV1PublicKey() {\n        const ret = wasm.backupdecryptionkey_megolmV1PublicKey(this.__wbg_ptr);\n        return MegolmV1BackupKey.__wrap(ret);\n    }\n    /**\n     * Try to decrypt a message that was encrypted using the public part of the\n     * backup key.\n     * @param {string} ephemeral_key\n     * @param {string} mac\n     * @param {string} ciphertext\n     * @returns {string}\n     */\n    decryptV1(ephemeral_key, mac, ciphertext) {\n        let deferred5_0;\n        let deferred5_1;\n        try {\n            const ptr0 = passStringToWasm0(ephemeral_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(mac, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len2 = WASM_VECTOR_LEN;\n            const ret = wasm.backupdecryptionkey_decryptV1(this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            var ptr4 = ret[0];\n            var len4 = ret[1];\n            if (ret[3]) {\n                ptr4 = 0; len4 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred5_0 = ptr4;\n            deferred5_1 = len4;\n            return getStringFromWasm0(ptr4, len4);\n        } finally {\n            wasm.__wbindgen_free(deferred5_0, deferred5_1, 1);\n        }\n    }\n}\n\nconst BackupKeysFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupkeys_free(ptr >>> 0, 1));\n/**\n * Stored versions of the backup keys.\n */\nexport class BackupKeys {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupKeys.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupKeysFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupKeysFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupkeys_free(ptr, 0);\n    }\n    /**\n     * The key used to decrypt backed up room keys\n     * @returns {BackupDecryptionKey | undefined}\n     */\n    get decryptionKey() {\n        const ret = wasm.__wbg_get_backupkeys_decryptionKey(this.__wbg_ptr);\n        return ret === 0 ? undefined : BackupDecryptionKey.__wrap(ret);\n    }\n    /**\n     * The key used to decrypt backed up room keys\n     * @param {BackupDecryptionKey | null} [arg0]\n     */\n    set decryptionKey(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, BackupDecryptionKey);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_backupkeys_decryptionKey(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The version that we are using for backups.\n     * @returns {string | undefined}\n     */\n    get backupVersion() {\n        const ret = wasm.__wbg_get_backupkeys_backupVersion(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The version that we are using for backups.\n     * @param {string | null} [arg0]\n     */\n    set backupVersion(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupkeys_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The key used to decrypt backed up room keys, encoded as base64\n     *\n     * @deprecated Use `BackupKeys.decryptionKey.toBase64()`\n     * @returns {string | undefined}\n     */\n    get decryptionKeyBase64() {\n        const ret = wasm.backupkeys_decryptionKeyBase64(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst BackupSecretsBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupsecretsbundle_free(ptr >>> 0, 1));\n/**\n * The backup-specific parts of a secrets bundle.\n */\nexport class BackupSecretsBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupSecretsBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupSecretsBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupSecretsBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupsecretsbundle_free(ptr, 0);\n    }\n    /**\n     * The backup decryption key, encoded as unpadded base64.\n     * @returns {string}\n     */\n    get key() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_backupsecretsbundle_key(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The backup decryption key, encoded as unpadded base64.\n     * @param {string} arg0\n     */\n    set key(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup version which this backup decryption key is used with.\n     * @returns {string}\n     */\n    get backup_version() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_backupsecretsbundle_backup_version(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The backup version which this backup decryption key is used with.\n     * @param {string} arg0\n     */\n    set backup_version(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst Base64EncodedPkMessageFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_base64encodedpkmessage_free(ptr >>> 0, 1));\n/**\n * The base64-encoded variant of a {@link PkMessage}.\n *\n * This can be useful if the encrypted message should be put into JSON.\n */\nexport class Base64EncodedPkMessage {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Base64EncodedPkMessage.prototype);\n        obj.__wbg_ptr = ptr;\n        Base64EncodedPkMessageFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Base64EncodedPkMessageFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_base64encodedpkmessage_free(ptr, 0);\n    }\n    /**\n     * The base64-encoded ciphertext.\n     * @returns {string}\n     */\n    get ciphertext() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_base64encodedpkmessage_ciphertext(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded ciphertext.\n     * @param {string} arg0\n     */\n    set ciphertext(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The base64-encoded message authentication code (MAC).\n     * @returns {string}\n     */\n    get mac() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_base64encodedpkmessage_mac(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded message authentication code (MAC).\n     * @param {string} arg0\n     */\n    set mac(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The base64-encoded ephemeral public key.\n     * @returns {string}\n     */\n    get ephemeralKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_base64encodedpkmessage_ephemeralKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded ephemeral public key.\n     * @param {string} arg0\n     */\n    set ephemeralKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_base64encodedpkmessage_ephemeralKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Creates a new base64-encoded encrypted message from its parts.\n     * @param {string} ciphertext\n     * @param {string} mac\n     * @param {string} ephemeral_key\n     */\n    constructor(ciphertext, mac, ephemeral_key) {\n        const ptr0 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(mac, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(ephemeral_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ret = wasm.base64encodedpkmessage_new(ptr0, len0, ptr1, len1, ptr2, len2);\n        this.__wbg_ptr = ret >>> 0;\n        Base64EncodedPkMessageFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst BaseMigrationDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_basemigrationdata_free(ptr >>> 0, 1));\n/**\n * The base dataset that is important to migrate to the Rust SDK.\n *\n * Can be imported into the rust store with {@link Migration::migrateBaseData}.\n */\nexport class BaseMigrationData {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BaseMigrationDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_basemigrationdata_free(ptr, 0);\n    }\n    /**\n     * The user id of the account owner.\n     * @returns {UserId | undefined}\n     */\n    get userId() {\n        const ret = wasm.__wbg_get_basemigrationdata_userId(this.__wbg_ptr);\n        return ret === 0 ? undefined : UserId.__wrap(ret);\n    }\n    /**\n     * The user id of the account owner.\n     * @param {UserId | null} [arg0]\n     */\n    set userId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, UserId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_basemigrationdata_userId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The device ID of the account owner.\n     * @returns {DeviceId | undefined}\n     */\n    get deviceId() {\n        const ret = wasm.__wbg_get_basemigrationdata_deviceId(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The device ID of the account owner.\n     * @param {DeviceId | null} [arg0]\n     */\n    set deviceId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, DeviceId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_basemigrationdata_deviceId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The pickle string holding the Olm Account, as returned by\n     * `olm_pickle_account` in libolm.\n     * @returns {string}\n     */\n    get pickledAccount() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_basemigrationdata_pickledAccount(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Olm Account, as returned by\n     * `olm_pickle_account` in libolm.\n     * @param {string} arg0\n     */\n    set pickledAccount(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup version that is currently active.\n     * @returns {string | undefined}\n     */\n    get backupVersion() {\n        const ret = wasm.__wbg_get_basemigrationdata_backupVersion(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The backup version that is currently active.\n     * @param {string | null} [arg0]\n     */\n    set backupVersion(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup recovery key, as a base64-encoded string.\n     * @returns {string | undefined}\n     */\n    get backupRecoveryKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_backupRecoveryKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The backup recovery key, as a base64-encoded string.\n     * @param {string | null} [arg0]\n     */\n    set backupRecoveryKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupRecoveryKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, master cross-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningMasterKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningMasterKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, master cross-signing key.\n     * @param {string | null} [arg0]\n     */\n    set privateCrossSigningMasterKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningMasterKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, self-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningSelfSigningKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningSelfSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, self-signing key.\n     * @param {string | null} [arg0]\n     */\n    set privateCrossSigningSelfSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningSelfSigningKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, user-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningUserSigningKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningUserSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, user-signing key.\n     * @param {string | null} [arg0]\n     */\n    set privateCrossSigningUserSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningUserSigningKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Create a new `BaseMigrationData` with default values.\n     */\n    constructor() {\n        const ret = wasm.basemigrationdata_new();\n        this.__wbg_ptr = ret >>> 0;\n        BaseMigrationDataFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst CancelInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_cancelinfo_free(ptr >>> 0, 1));\n/**\n * Information about the cancellation of a verification request or\n * verification flow.\n */\nexport class CancelInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CancelInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        CancelInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CancelInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cancelinfo_free(ptr, 0);\n    }\n    /**\n     * Get the human readable reason of the cancellation.\n     * @returns {string}\n     */\n    reason() {\n        const ret = wasm.cancelinfo_reason(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the `code` (e.g. `m.user`) that was used to cancel the\n     * verification.\n     * @returns {string}\n     */\n    cancelCode() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.cancelinfo_cancelCode(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Was the verification cancelled by us?\n     * @returns {boolean}\n     */\n    cancelledbyUs() {\n        const ret = wasm.cancelinfo_cancelledbyUs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst CheckCodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_checkcode_free(ptr >>> 0, 1));\n/**\n * A check code that can be used to confirm that two [`EstablishedEcies`]\n * objects share the same secret. This is supposed to be shared out-of-band to\n * protect against active Man-in-the-middle (MITM) attacks.\n *\n * Since the initiator device can always tell whether a MITM attack is in\n * progress after channel establishment, this code technically carries only a\n * single bit of information, representing whether the initiator has determined\n * that the channel is \"secure\" or \"not secure\".\n *\n * However, given this will need to be interactively confirmed by the user,\n * there is risk that the user would confirm the dialogue without paying\n * attention to its content. By expanding this single bit into a deterministic\n * two-digit check code, the user is forced to pay more attention by having to\n * enter it instead of just clicking through a dialogue.\n */\nexport class CheckCode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CheckCode.prototype);\n        obj.__wbg_ptr = ptr;\n        CheckCodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CheckCodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_checkcode_free(ptr, 0);\n    }\n    /**\n     * Convert the check code to an array of two bytes.\n     *\n     * The bytes can be converted to a more user-friendly representation. The\n     * [`CheckCode::to_digit`] converts the bytes to a two-digit number.\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        const ret = wasm.checkcode_as_bytes(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Convert the check code to two base-10 numbers.\n     *\n     * The number should be displayed with a leading 0 in case the first digit\n     * is a 0.\n     * @returns {number}\n     */\n    to_digit() {\n        const ret = wasm.checkcode_to_digit(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst CollectStrategyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_collectstrategy_free(ptr >>> 0, 1));\n/**\n * Strategy to collect the devices that should receive room keys for the\n * current discussion.\n */\nexport class CollectStrategy {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CollectStrategy.prototype);\n        obj.__wbg_ptr = ptr;\n        CollectStrategyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CollectStrategyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_collectstrategy_free(ptr, 0);\n    }\n    /**\n     * Tests for equality between two [`CollectStrategy`]s.\n     * @param {CollectStrategy} other\n     * @returns {boolean}\n     */\n    eq(other) {\n        _assertClass(other, CollectStrategy);\n        const ret = wasm.collectstrategy_eq(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Device based sharing strategy.\n     *\n     * @deprecated: use one of {@link allDevices}, {@link\n     * errorOnUnverifiedUserProblem} or {@link onlyTrustedDevices}.\n     * @param {boolean} only_allow_trusted_devices\n     * @param {boolean} error_on_verified_user_problem\n     * @returns {CollectStrategy}\n     */\n    static deviceBasedStrategy(only_allow_trusted_devices, error_on_verified_user_problem) {\n        const ret = wasm.collectstrategy_deviceBasedStrategy(only_allow_trusted_devices, error_on_verified_user_problem);\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Share with all (unblacklisted) devices.\n     * @returns {CollectStrategy}\n     */\n    static allDevices() {\n        const ret = wasm.collectstrategy_allDevices();\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Share with all devices, except that errors for *verified* users cause\n     * sharing to fail with an error.\n     *\n     * In this strategy, if a verified user has an unsigned device, or\n     * a verified user has replaced their identity, key\n     * sharing will fail with an error.\n     *\n     * Otherwise, keys are shared with unsigned devices as normal.\n     *\n     * Once the problematic devices are blacklisted or whitelisted the\n     * caller can try sharing a second time.\n     * @returns {CollectStrategy}\n     */\n    static errorOnUnverifiedUserProblem() {\n        const ret = wasm.collectstrategy_errorOnUnverifiedUserProblem();\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Share based on identity. Only distribute to devices signed by their\n     * owner. If a user has no published identity he will not receive\n     * any room keys.\n     * @returns {CollectStrategy}\n     */\n    static identityBasedStrategy() {\n        const ret = wasm.collectstrategy_identityBasedStrategy();\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Only share keys with devices that we \"trust\". A device is trusted if any\n     * of the following is true:\n     *     - It was manually marked as trusted.\n     *     - It was marked as verified via interactive verification.\n     *     - It is signed by its owner identity, and this identity has been\n     *       trusted via interactive verification.\n     *     - It is the current own device of the user.\n     * @returns {CollectStrategy}\n     */\n    static onlyTrustedDevices() {\n        const ret = wasm.collectstrategy_onlyTrustedDevices();\n        return CollectStrategy.__wrap(ret);\n    }\n}\n\nconst CrossSigningBootstrapRequestsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningbootstraprequests_free(ptr >>> 0, 1));\n/**\n * A set of requests to be executed when bootstrapping cross-signing using\n * {@link OlmMachine.bootstrapCrossSigning}.\n */\nexport class CrossSigningBootstrapRequests {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningBootstrapRequests.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningBootstrapRequestsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningBootstrapRequestsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningbootstraprequests_free(ptr, 0);\n    }\n    /**\n     * An optional request to upload a device key.\n     *\n     * This will either be `undefined`, or an \"outgoing request\" as returned by\n     * {@link OlmMachine.outgoingRequests}.\n     *\n     * If it is defined, the request should be sent first, and the result sent\n     * back with {@link OlmMachine.markRequestAsSent}.\n     * @returns {any}\n     */\n    get uploadKeysRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadKeysRequest(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Request to upload the cross-signing keys.\n     *\n     * Should be sent second.\n     * @returns {UploadSigningKeysRequest}\n     */\n    get uploadSigningKeysRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadSigningKeysRequest(this.__wbg_ptr);\n        return UploadSigningKeysRequest.__wrap(ret);\n    }\n    /**\n     * Request to upload key signatures, including those for the cross-signing\n     * keys, and maybe some for the optional uploaded key too.\n     *\n     * Should be sent last.\n     * @returns {SignatureUploadRequest}\n     */\n    get uploadSignaturesRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadSignaturesRequest(this.__wbg_ptr);\n        return SignatureUploadRequest.__wrap(ret);\n    }\n}\n\nconst CrossSigningKeyExportFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningkeyexport_free(ptr >>> 0, 1));\n/**\n * A struct containing private cross signing keys that can be backed\n * up or uploaded to the secret store.\n */\nexport class CrossSigningKeyExport {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningKeyExport.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningKeyExportFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningKeyExportFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningkeyexport_free(ptr, 0);\n    }\n    /**\n     * The seed of the master key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get masterKey() {\n        const ret = wasm.crosssigningkeyexport_masterKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The seed of the self signing key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get self_signing_key() {\n        const ret = wasm.crosssigningkeyexport_self_signing_key(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The seed of the user signing key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get userSigningKey() {\n        const ret = wasm.crosssigningkeyexport_userSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst CrossSigningStatusFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningstatus_free(ptr >>> 0, 1));\n/**\n * Struct representing the state of our private cross signing keys,\n * it shows which private cross signing keys we have locally stored.\n */\nexport class CrossSigningStatus {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningStatus.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningStatusFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningStatusFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningstatus_free(ptr, 0);\n    }\n    /**\n     * Do we have the master key?\n     * @returns {boolean}\n     */\n    get hasMaster() {\n        const ret = wasm.crosssigningstatus_hasMaster(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Do we have the self signing key? This one is necessary to sign\n     * our own devices.\n     * @returns {boolean}\n     */\n    get hasSelfSigning() {\n        const ret = wasm.crosssigningstatus_hasSelfSigning(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Do we have the user signing key? This one is necessary to sign\n     * other users.\n     * @returns {boolean}\n     */\n    get hasUserSigning() {\n        const ret = wasm.crosssigningstatus_hasUserSigning(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst Curve25519PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_curve25519publickey_free(ptr >>> 0, 1));\n/**\n * A Curve25519 public key.\n */\nexport class Curve25519PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Curve25519PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Curve25519PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Curve25519PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_curve25519publickey_free(ptr, 0);\n    }\n    /**\n     * Create a new [`Curve25519PublicKey`] from a base64 encoded string.\n     * @param {string} key\n     */\n    constructor(key) {\n        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.curve25519publickey_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        Curve25519PublicKeyFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * The number of bytes a Curve25519 public key has.\n     * @returns {number}\n     */\n    get length() {\n        const ret = wasm.curve25519publickey_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Serialize an Curve25519 public key to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.curve25519publickey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst Curve25519SecretKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_curve25519secretkey_free(ptr >>> 0, 1));\n/**\n * A Curve25519 secret key.\n */\nexport class Curve25519SecretKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Curve25519SecretKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Curve25519SecretKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Curve25519SecretKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_curve25519secretkey_free(ptr, 0);\n    }\n    /**\n     * Generates a new random Curve25519 secret key.\n     * @returns {Curve25519SecretKey}\n     */\n    static new() {\n        const ret = wasm.curve25519secretkey_new();\n        return Curve25519SecretKey.__wrap(ret);\n    }\n    /**\n     * Creates a `Curve25519SecretKey` from a base64-encoded representation of\n     * the key.\n     * @param {string} string\n     * @returns {Curve25519SecretKey}\n     */\n    static fromBase64(string) {\n        const ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.curve25519secretkey_fromBase64(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return Curve25519SecretKey.__wrap(ret[0]);\n    }\n    /**\n     * Encodes the secret key into a base64 string.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.curve25519secretkey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Converts the secret key into a raw byte vector.\n     * @returns {Uint8Array}\n     */\n    toUint8Array() {\n        const ret = wasm.curve25519secretkey_toUint8Array(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Creates a `Curve25519SecretKey` from a raw byte slice.\n     * @param {Uint8Array} slice\n     * @returns {Curve25519SecretKey}\n     */\n    static fromUint8Array(slice) {\n        const ptr0 = passArray8ToWasm0(slice, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.curve25519secretkey_fromUint8Array(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return Curve25519SecretKey.__wrap(ret[0]);\n    }\n}\n\nconst DecryptedRoomEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptedroomevent_free(ptr >>> 0, 1));\n/**\n * A decrypted room event.\n */\nexport class DecryptedRoomEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DecryptedRoomEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        DecryptedRoomEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptedRoomEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptedroomevent_free(ptr, 0);\n    }\n    /**\n     * The JSON-encoded decrypted event.\n     * @returns {string}\n     */\n    get event() {\n        const ret = wasm.__wbg_get_decryptedroomevent_event(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The user ID of the event sender, note this is untrusted data\n     * unless the `verification_state` is as well trusted.\n     * @returns {UserId | undefined}\n     */\n    get sender() {\n        const ret = wasm.decryptedroomevent_sender(this.__wbg_ptr);\n        return ret === 0 ? undefined : UserId.__wrap(ret);\n    }\n    /**\n     * The device ID of the device that sent us the event, note this\n     * is untrusted data unless `verification_state` is as well\n     * trusted.\n     * @returns {DeviceId | undefined}\n     */\n    get senderDevice() {\n        const ret = wasm.decryptedroomevent_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device that created the megolm\n     * decryption key originally.\n     * @returns {string | undefined}\n     */\n    get senderCurve25519Key() {\n        const ret = wasm.decryptedroomevent_senderCurve25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The signing Ed25519 key that have created the megolm key that\n     * was used to decrypt this session.\n     * @returns {string | undefined}\n     */\n    get senderClaimedEd25519Key() {\n        const ret = wasm.decryptedroomevent_senderClaimedEd25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Returns an empty array\n     *\n     * Previously, this returned the chain of Curve25519 keys through which\n     * this session was forwarded, via `m.forwarded_room_key` events.\n     * However, that is not cryptographically reliable, and clients should not\n     * be using it.\n     *\n     * @see https://github.com/matrix-org/matrix-spec/issues/1089\n     * @returns {Array<any>}\n     */\n    get forwardingCurve25519KeyChain() {\n        const ret = wasm.decryptedroomevent_forwardingCurve25519KeyChain(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The verification state of the device that sent us the event.\n     * Note this is the state of the device at the time of\n     * decryption. It may change in the future if a device gets\n     * verified or deleted.\n     * @param {boolean} strict\n     * @returns {ShieldState | undefined}\n     */\n    shieldState(strict) {\n        const ret = wasm.decryptedroomevent_shieldState(this.__wbg_ptr, strict);\n        return ret === 0 ? undefined : ShieldState.__wrap(ret);\n    }\n}\n\nconst DecryptionSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptionsettings_free(ptr >>> 0, 1));\n/**\n * Settings for decrypting messages\n */\nexport class DecryptionSettings {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptionSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptionsettings_free(ptr, 0);\n    }\n    /**\n     * The trust level required to decrypt the event\n     * @returns {TrustRequirement}\n     */\n    get sender_device_trust_requirement() {\n        const ret = wasm.__wbg_get_decryptionsettings_sender_device_trust_requirement(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The trust level required to decrypt the event\n     * @param {TrustRequirement} arg0\n     */\n    set sender_device_trust_requirement(arg0) {\n        wasm.__wbg_set_decryptionsettings_sender_device_trust_requirement(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Create a new `DecryptionSettings` with the given trust requirement.\n     * @param {TrustRequirement} sender_device_trust_requirement\n     */\n    constructor(sender_device_trust_requirement) {\n        const ret = wasm.decryptionsettings_new(sender_device_trust_requirement);\n        this.__wbg_ptr = ret >>> 0;\n        DecryptionSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst DehydratedDeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevice_free(ptr >>> 0, 1));\n/**\n * A dehydrated device that can be uploaded to the server\n */\nexport class DehydratedDevice {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDevice.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevice_free(ptr, 0);\n    }\n    /**\n     * Create the request to upload the dehydrated device\n     * @param {string} initial_device_display_name\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @returns {Promise<PutDehydratedDeviceRequest>}\n     */\n    keysForUpload(initial_device_display_name, dehydrated_device_key) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        const ret = wasm.dehydrateddevice_keysForUpload(this.__wbg_ptr, initial_device_display_name, dehydrated_device_key.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DehydratedDeviceKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevicekey_free(ptr >>> 0, 1));\n/**\n * Dehydrated device key\n */\nexport class DehydratedDeviceKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDeviceKey.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDeviceKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDeviceKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevicekey_free(ptr, 0);\n    }\n    /**\n     * Generates a new random dehydrated device key.\n     * @returns {DehydratedDeviceKey}\n     */\n    static createRandomKey() {\n        const ret = wasm.dehydrateddevicekey_createRandomKey();\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return DehydratedDeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Generates a dehydrated device key from a given array.\n     * @param {Uint8Array} array\n     * @returns {DehydratedDeviceKey}\n     */\n    static createKeyFromArray(array) {\n        const ret = wasm.dehydrateddevicekey_createKeyFromArray(array);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return DehydratedDeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Convert the dehydrated device key to a base64-encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        const ret = wasm.dehydrateddevicekey_toBase64(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DehydratedDevicesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevices_free(ptr >>> 0, 1));\n/**\n * Struct collecting methods to create and rehydrate dehydrated devices.\n */\nexport class DehydratedDevices {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDevices.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDevicesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDevicesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevices_free(ptr, 0);\n    }\n    /**\n     * Create a new {@link DehydratedDevice} which can be uploaded to the\n     * server.\n     * @returns {Promise<DehydratedDevice>}\n     */\n    create() {\n        const ret = wasm.dehydrateddevices_create(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Rehydrate a dehydrated device.\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @param {DeviceId} device_id\n     * @param {string} device_data\n     * @returns {Promise<RehydratedDevice>}\n     */\n    rehydrate(dehydrated_device_key, device_id, device_data) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        _assertClass(device_id, DeviceId);\n        const ptr0 = passStringToWasm0(device_data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.dehydrateddevices_rehydrate(this.__wbg_ptr, dehydrated_device_key.__wbg_ptr, device_id.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get the cached dehydrated device key if any.\n     *\n     * `None` if the key was not previously cached (via\n     * {@link DehydratedDevices.saveDehydratedDeviceKey}).\n     * @returns {Promise<DehydratedDeviceKey | undefined>}\n     */\n    getDehydratedDeviceKey() {\n        const ret = wasm.dehydrateddevices_getDehydratedDeviceKey(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Store the dehydrated device key in the crypto store.\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @returns {Promise<void>}\n     */\n    saveDehydratedDeviceKey(dehydrated_device_key) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        const ret = wasm.dehydrateddevices_saveDehydratedDeviceKey(this.__wbg_ptr, dehydrated_device_key.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Clear the dehydrated device key saved in the crypto store.\n     * @returns {Promise<void>}\n     */\n    deleteDehydratedDeviceKey() {\n        const ret = wasm.dehydrateddevices_deleteDehydratedDeviceKey(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_device_free(ptr >>> 0, 1));\n/**\n * A device represents a E2EE capable client of an user.\n */\nexport class Device {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Device.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_device_free(ptr, 0);\n    }\n    /**\n     * Request an interactive verification with this device.\n     *\n     * Returns a 2-element array `[VerificationRequest, ToDeviceRequest]`.\n     * @param {any[] | null} [methods]\n     * @returns {Array<any>}\n     */\n    requestVerification(methods) {\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.device_requestVerification(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Encrypt a to-device message to be sent to this device, using Olm\n     * encryption.\n     *\n     * Prior to calling this method you must ensure that an Olm session is\n     * available for the target device. This can be done by calling\n     * {@link OlmMachine.getMissingSessions}.\n     *\n     * The caller is responsible for sending the encrypted\n     * event to the target device. If multiple messages are\n     * encrypted for the same device using this method they should be sent in\n     * the same order as they are encrypted.\n     *\n     * # Returns\n     *\n     * Returns a promise for a JSON string containing the `content` of an\n     * encrypted event, which be used to create the payload for a\n     * `/sendToDevice` API.\n     * @param {string} event_type\n     * @param {any} content\n     * @returns {Promise<string>}\n     */\n    encryptToDeviceEvent(event_type, content) {\n        const ptr0 = passStringToWasm0(event_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.device_encryptToDeviceEvent(this.__wbg_ptr, ptr0, len0, content);\n        return ret;\n    }\n    /**\n     * Is this device considered to be verified.\n     *\n     * This method returns true if either the `is_locally_trusted`\n     * method returns `true` or if the `is_cross_signing_trusted`\n     * method returns `true`.\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.device_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this device considered to be verified using cross signing.\n     * @returns {boolean}\n     */\n    isCrossSigningTrusted() {\n        const ret = wasm.device_isCrossSigningTrusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this device cross-signed by its owner?\n     * @returns {boolean}\n     */\n    isCrossSignedByOwner() {\n        const ret = wasm.device_isCrossSignedByOwner(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Set the local trust state of the device to the given state.\n     *\n     * This won’t affect any cross signing trust state, this only\n     * sets a flag marking to have the given trust state.\n     *\n     * `trust_state` represents the new trust state that should be\n     * set for the device.\n     * @param {LocalTrust} local_state\n     * @returns {Promise<any>}\n     */\n    setLocalTrust(local_state) {\n        const ret = wasm.device_setLocalTrust(this.__wbg_ptr, local_state);\n        return ret;\n    }\n    /**\n     * The user ID of the device owner.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.device_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The unique ID of the device.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.device_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the human readable name of the device.\n     * @returns {string | undefined}\n     */\n    get displayName() {\n        const ret = wasm.device_displayName(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the key of the given key algorithm belonging to this device.\n     * @param {DeviceKeyAlgorithmName} algorithm\n     * @returns {DeviceKey | undefined}\n     */\n    getKey(algorithm) {\n        const ret = wasm.device_getKey(this.__wbg_ptr, algorithm);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return ret[0] === 0 ? undefined : DeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Get the Curve25519 key of the given device.\n     * @returns {Curve25519PublicKey | undefined}\n     */\n    get curve25519Key() {\n        const ret = wasm.device_curve25519Key(this.__wbg_ptr);\n        return ret === 0 ? undefined : Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the Ed25519 key of the given device.\n     * @returns {Ed25519PublicKey | undefined}\n     */\n    get ed25519Key() {\n        const ret = wasm.device_ed25519Key(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get a map containing all the device keys.\n     * @returns {Map<any, any>}\n     */\n    get keys() {\n        const ret = wasm.device_keys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the list of algorithms this device supports.\n     *\n     * Returns `Array<EncryptionAlgorithm>`.\n     * @returns {Array<any>}\n     */\n    get algorithms() {\n        const ret = wasm.device_algorithms(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get a map containing all the device signatures.\n     * @returns {Signatures}\n     */\n    get signatures() {\n        const ret = wasm.device_signatures(this.__wbg_ptr);\n        return Signatures.__wrap(ret);\n    }\n    /**\n     * Get the trust state of the device.\n     * @returns {LocalTrust}\n     */\n    get localTrustState() {\n        const ret = wasm.device_localTrustState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Is the device locally marked as trusted?\n     * @returns {boolean}\n     */\n    isLocallyTrusted() {\n        const ret = wasm.device_isLocallyTrusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the device locally marked as blacklisted?\n     *\n     * Blacklisted devices won’t receive any group sessions.\n     * @returns {boolean}\n     */\n    isBlacklisted() {\n        const ret = wasm.device_isBlacklisted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the device deleted?\n     * @returns {boolean}\n     */\n    isDeleted() {\n        const ret = wasm.device_isDeleted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Timestamp representing the first time this device has been seen (in\n     * milliseconds).\n     * @returns {bigint}\n     */\n    firstTimeSeen() {\n        const ret = wasm.device_firstTimeSeen(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * Mark this device as verified.\n     * Works only if the device is owned by the current user.\n     *\n     * Returns a signature upload request that needs to be sent out.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.device_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Whether or not the device is a dehydrated device.\n     * @returns {boolean}\n     */\n    get isDehydrated() {\n        const ret = wasm.device_isDehydrated(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst DeviceIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_deviceid_free(ptr >>> 0, 1));\n/**\n * A Matrix key ID.\n *\n * Device identifiers in Matrix are completely opaque character\n * sequences. This type is provided simply for its semantic value.\n */\nexport class DeviceId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceId.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_deviceid_free(ptr, 0);\n    }\n    /**\n     * Create a new `DeviceId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.deviceid_new(ptr0, len0);\n        this.__wbg_ptr = ret >>> 0;\n        DeviceIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Return the device ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.deviceid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekey_free(ptr >>> 0, 1));\n/**\n * An enum over the different key types a device can have.\n *\n * Currently devices have a curve25519 and ed25519 keypair. The keys\n * transport format is a base64 encoded string, any unknown key type\n * will be left as such a string.\n */\nexport class DeviceKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKey.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekey_free(ptr, 0);\n    }\n    /**\n     * Get the name of the device key.\n     * @returns {DeviceKeyName}\n     */\n    get name() {\n        const ret = wasm.devicekey_name(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the value associated to the `Curve25519` device key name.\n     * @returns {Curve25519PublicKey | undefined}\n     */\n    get curve25519() {\n        const ret = wasm.devicekey_curve25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the value associated to the `Ed25519` device key name.\n     * @returns {Ed25519PublicKey | undefined}\n     */\n    get ed25519() {\n        const ret = wasm.devicekey_ed25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the value associated to the `Unknown` device key name.\n     * @returns {string | undefined}\n     */\n    get unknown() {\n        const ret = wasm.devicekey_unknown(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Convert the `DeviceKey` into a base64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyAlgorithmFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekeyalgorithm_free(ptr >>> 0, 1));\n/**\n * The basic key algorithms in the specification.\n */\nexport class DeviceKeyAlgorithm {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKeyAlgorithm.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyAlgorithmFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyAlgorithmFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekeyalgorithm_free(ptr, 0);\n    }\n    /**\n     * Read the device key algorithm's name. If the name is\n     * `Unknown`, one may be interested by the `to_string` method to\n     * read the original name.\n     * @returns {DeviceKeyAlgorithmName}\n     */\n    get name() {\n        const ret = wasm.devicekeyalgorithm_name(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Return the device key algorithm as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekeyalgorithm_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekeyid_free(ptr >>> 0, 1));\n/**\n * A Matrix device key ID.\n *\n * A key algorithm and a device ID, combined with a ‘:’.\n */\nexport class DeviceKeyId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKeyId.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekeyid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `DeviceKeyId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.devicekeyid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        DeviceKeyIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns key algorithm of the device key ID.\n     * @returns {DeviceKeyAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.devicekeyid_algorithm(this.__wbg_ptr);\n        return DeviceKeyAlgorithm.__wrap(ret);\n    }\n    /**\n     * Returns device ID of the device key ID.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.devicekeyid_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Return the device key ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekeyid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceListsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicelists_free(ptr >>> 0, 1));\n/**\n * Information on E2E device updates.\n */\nexport class DeviceLists {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceListsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicelists_free(ptr, 0);\n    }\n    /**\n     * Create an empty `DeviceLists`.\n     *\n     * `changed` and `left` must be an array of `UserId`.\n     *\n     * Items inside `changed` and `left` will be invalidated by this method. Be\n     * careful not to use the `UserId`s after this method has been called.\n     * @param {UserId[] | null} [changed]\n     * @param {UserId[] | null} [left]\n     */\n    constructor(changed, left) {\n        var ptr0 = isLikeNone(changed) ? 0 : passArrayJsValueToWasm0(changed, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(left) ? 0 : passArrayJsValueToWasm0(left, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.devicelists_new(ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        DeviceListsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns true if there are no device list updates.\n     * @returns {boolean}\n     */\n    isEmpty() {\n        const ret = wasm.devicelists_isEmpty(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * List of users who have updated their device identity keys or\n     * who now share an encrypted room with the client since the\n     * previous sync\n     * @returns {UserId[]}\n     */\n    get changed() {\n        const ret = wasm.devicelists_changed(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n    /**\n     * List of users who no longer share encrypted rooms since the\n     * previous sync response.\n     * @returns {UserId[]}\n     */\n    get left() {\n        const ret = wasm.devicelists_left(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n}\n\nconst EciesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ecies_free(ptr >>> 0, 1));\n/**\n * An unestablished ECIES session.\n */\nexport class Ecies {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EciesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ecies_free(ptr, 0);\n    }\n    /**\n     * Create a new, random, unestablished ECIES session.\n     *\n     * This method will use the\n     * [`MATRIX_QR_CODE_LOGIN`](https://github.com/matrix-org/matrix-spec-proposals/pull/4108)\n     * info for domain separation when creating the session.\n     */\n    constructor() {\n        const ret = wasm.ecies_new();\n        this.__wbg_ptr = ret >>> 0;\n        EciesFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get our [`Curve25519PublicKey`].\n     *\n     * This public key needs to be sent to the other side to be able to\n     * establish an ECIES channel.\n     * @returns {Curve25519PublicKey}\n     */\n    public_key() {\n        const ret = wasm.ecies_public_key(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Create a [`EstablishedEcies`] from an initial message encrypted by the\n     * other side.\n     * @param {string} initial_message\n     * @returns {InboundCreationResult}\n     */\n    establish_inbound_channel(initial_message) {\n        const ptr0 = passStringToWasm0(initial_message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ecies_establish_inbound_channel(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return InboundCreationResult.__wrap(ret[0]);\n    }\n    /**\n     * Create an [`EstablishedEcies`] session using the other side's Curve25519\n     * public key and an initial plaintext.\n     *\n     * After the channel has been established, we can encrypt messages to send\n     * to the other side. The other side uses the initial message to\n     * establishes the same channel on its side.\n     * @param {Curve25519PublicKey} public_key\n     * @param {string} initial_message\n     * @returns {OutboundCreationResult}\n     */\n    establish_outbound_channel(public_key, initial_message) {\n        _assertClass(public_key, Curve25519PublicKey);\n        const ptr0 = passStringToWasm0(initial_message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ecies_establish_outbound_channel(this.__wbg_ptr, public_key.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return OutboundCreationResult.__wrap(ret[0]);\n    }\n}\n\nconst Ed25519PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ed25519publickey_free(ptr >>> 0, 1));\n/**\n * An Ed25519 public key, used to verify digital signatures.\n */\nexport class Ed25519PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Ed25519PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Ed25519PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Ed25519PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519publickey_free(ptr, 0);\n    }\n    /**\n     * The number of bytes an Ed25519 public key has.\n     * @returns {number}\n     */\n    get length() {\n        const ret = wasm.ed25519publickey_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Serialize an Ed25519 public key to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.ed25519publickey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst Ed25519SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ed25519signature_free(ptr >>> 0, 1));\n/**\n * An Ed25519 digital signature, can be used to verify the\n * authenticity of a message.\n */\nexport class Ed25519Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Ed25519Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        Ed25519SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Ed25519SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519signature_free(ptr, 0);\n    }\n    /**\n     * Try to create an Ed25519 signature from an unpadded base64\n     * representation.\n     * @param {string} signature\n     */\n    constructor(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ed25519signature_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        Ed25519SignatureFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Serialize a Ed25519 signature to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.ed25519signature_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst EmojiFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_emoji_free(ptr >>> 0, 1));\n/**\n * An emoji that is used for interactive verification using a short\n * auth string.\n *\n * This will contain a single emoji and description from the list of\n * emojis from [the specification].\n *\n * [the specification]: https://spec.matrix.org/unstable/client-server-api/#sas-method-emoji\n */\nexport class Emoji {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Emoji.prototype);\n        obj.__wbg_ptr = ptr;\n        EmojiFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EmojiFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_emoji_free(ptr, 0);\n    }\n    /**\n     * The emoji symbol that represents a part of the short auth\n     * string, for example: 🐶\n     * @returns {string}\n     */\n    get symbol() {\n        const ret = wasm.emoji_symbol(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The description of the emoji, for example ‘Dog’.\n     * @returns {string}\n     */\n    get description() {\n        const ret = wasm.emoji_description(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst EncryptedAttachmentFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptedattachment_free(ptr >>> 0, 1));\n/**\n * An encrypted attachment, usually created from `Attachment.encrypt`.\n */\nexport class EncryptedAttachment {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EncryptedAttachment.prototype);\n        obj.__wbg_ptr = ptr;\n        EncryptedAttachmentFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptedAttachmentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptedattachment_free(ptr, 0);\n    }\n    /**\n     * Create a new encrypted attachment manually.\n     *\n     * It needs encrypted data, stored in an `Uint8Array`, and a\n     * [media encryption\n     * information](https://docs.rs/matrix-sdk-crypto/latest/matrix_sdk_crypto/struct.MediaEncryptionInfo.html),\n     * as a JSON-encoded string.\n     *\n     * The media encryption information aren't stored as a string:\n     * they are parsed, validated and fully deserialized.\n     *\n     * See [the specification to learn\n     * more](https://spec.matrix.org/unstable/client-server-api/#extensions-to-mroommessage-msgtypes).\n     * @param {Uint8Array} encrypted_data\n     * @param {string} media_encryption_info\n     */\n    constructor(encrypted_data, media_encryption_info) {\n        const ptr0 = passArray8ToWasm0(encrypted_data, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(media_encryption_info, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.encryptedattachment_new(ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        EncryptedAttachmentFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * The actual encrypted data.\n     *\n     * **Warning**: It returns a **copy** of the entire encrypted\n     * data; be nice with your memory.\n     * @returns {Uint8Array}\n     */\n    get encryptedData() {\n        const ret = wasm.encryptedattachment_encryptedData(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Return the media encryption info as a JSON-encoded string. The\n     * structure is fully valid.\n     *\n     * If the media encryption info have been consumed already, it\n     * will return `null`.\n     * @returns {string | undefined}\n     */\n    get mediaEncryptionInfo() {\n        const ret = wasm.encryptedattachment_mediaEncryptionInfo(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Check whether the media encryption info has been consumed by\n     * `Attachment.decrypt` already.\n     * @returns {boolean}\n     */\n    get hasMediaEncryptionInfoBeenConsumed() {\n        const ret = wasm.encryptedattachment_hasMediaEncryptionInfoBeenConsumed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst EncryptionInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptioninfo_free(ptr >>> 0, 1));\n/**\n * Struct containing information on how an event was decrypted.\n */\nexport class EncryptionInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EncryptionInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        EncryptionInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptionInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptioninfo_free(ptr, 0);\n    }\n    /**\n     * The user ID of the event sender. Note this is untrusted data\n     * unless `verification_state` is also trusted.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.encryptioninfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The device ID of the device that sent us the event. Note this\n     * is untrusted data unless `verification_state` is also\n     * trusted.\n     * @returns {DeviceId | undefined}\n     */\n    get senderDevice() {\n        const ret = wasm.encryptioninfo_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device that created the megolm\n     * decryption key originally.\n     * @returns {string | undefined}\n     */\n    get senderCurve25519Key() {\n        const ret = wasm.encryptioninfo_senderCurve25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The signing Ed25519 key that created the megolm key that\n     * was used to decrypt this session.\n     * @returns {string | undefined}\n     */\n    get senderClaimedEd25519Key() {\n        const ret = wasm.encryptioninfo_senderClaimedEd25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The verification state of the device that sent us the event.\n     * Note this is the state of the device at the time of\n     * decryption. It may change in the future if a device gets\n     * verified or deleted.\n     *\n     * # Arguments\n     *\n     * * `strict` - whether to enable \"strict mode\" verification. In non-strict\n     *   mode, unverified users are given no shield, and keys that have been\n     *   forwarded or restored from an insecure backup are given a grey shield\n     *   (both get a red shield in strict mode).\n     * @param {boolean} strict\n     * @returns {ShieldState}\n     */\n    shieldState(strict) {\n        const ret = wasm.encryptioninfo_shieldState(this.__wbg_ptr, strict);\n        return ShieldState.__wrap(ret);\n    }\n}\n\nconst EncryptionSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptionsettings_free(ptr >>> 0, 1));\n/**\n * Settings for an encrypted room.\n *\n * This determines the algorithm and rotation periods of a group\n * session.\n */\nexport class EncryptionSettings {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptionSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptionsettings_free(ptr, 0);\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.__wbg_get_encryptionsettings_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     * @param {EncryptionAlgorithm} arg0\n     */\n    set algorithm(arg0) {\n        wasm.__wbg_set_encryptionsettings_algorithm(this.__wbg_ptr, arg0);\n    }\n    /**\n     * How long the session should be used before changing it,\n     * expressed in microseconds.\n     * @returns {bigint}\n     */\n    get rotationPeriod() {\n        const ret = wasm.__wbg_get_encryptionsettings_rotationPeriod(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * How long the session should be used before changing it,\n     * expressed in microseconds.\n     * @param {bigint} arg0\n     */\n    set rotationPeriod(arg0) {\n        wasm.__wbg_set_encryptionsettings_rotationPeriod(this.__wbg_ptr, arg0);\n    }\n    /**\n     * How many messages should be sent before changing the session.\n     * @returns {bigint}\n     */\n    get rotationPeriodMessages() {\n        const ret = wasm.__wbg_get_encryptionsettings_rotationPeriodMessages(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * How many messages should be sent before changing the session.\n     * @param {bigint} arg0\n     */\n    set rotationPeriodMessages(arg0) {\n        wasm.__wbg_set_encryptionsettings_rotationPeriodMessages(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The history visibility of the room when the session was\n     * created.\n     * @returns {HistoryVisibility}\n     */\n    get historyVisibility() {\n        const ret = wasm.__wbg_get_encryptionsettings_historyVisibility(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The history visibility of the room when the session was\n     * created.\n     * @param {HistoryVisibility} arg0\n     */\n    set historyVisibility(arg0) {\n        wasm.__wbg_set_encryptionsettings_historyVisibility(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Should untrusted devices receive the room key, or should they be\n     * excluded from the conversation.\n     * @returns {CollectStrategy}\n     */\n    get sharingStrategy() {\n        const ret = wasm.__wbg_get_encryptionsettings_sharingStrategy(this.__wbg_ptr);\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Should untrusted devices receive the room key, or should they be\n     * excluded from the conversation.\n     * @param {CollectStrategy} arg0\n     */\n    set sharingStrategy(arg0) {\n        _assertClass(arg0, CollectStrategy);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_encryptionsettings_sharingStrategy(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * Create a new `EncryptionSettings` with default values.\n     */\n    constructor() {\n        const ret = wasm.encryptionsettings_new();\n        this.__wbg_ptr = ret >>> 0;\n        EncryptionSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst EstablishedEciesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_establishedecies_free(ptr >>> 0, 1));\n/**\n * An established ECIES session.\n *\n * This session can be used to encrypt and decrypt messages between the two\n * sides of the channel.\n */\nexport class EstablishedEcies {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EstablishedEcies.prototype);\n        obj.__wbg_ptr = ptr;\n        EstablishedEciesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EstablishedEciesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_establishedecies_free(ptr, 0);\n    }\n    /**\n     * Get our [`Curve25519PublicKey`].\n     *\n     * This public key needs to be sent to the other side so that it can\n     * complete the ECIES channel establishment.\n     * @returns {Curve25519PublicKey}\n     */\n    public_key() {\n        const ret = wasm.establishedecies_public_key(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Encrypt the given plaintext using this [`EstablishedEcies`] session.\n     * @param {string} message\n     * @returns {string}\n     */\n    encrypt(message) {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ret = wasm.establishedecies_encrypt(this.__wbg_ptr, ptr0, len0);\n            deferred2_0 = ret[0];\n            deferred2_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Decrypt the given message using this [`EstablishedEcies`] session.\n     * @param {string} message\n     * @returns {string}\n     */\n    decrypt(message) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ret = wasm.establishedecies_decrypt(this.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Get the [`CheckCode`] which uniquely identifies this\n     * [`EstablishedEcies`] session.\n     *\n     * This check code can be used to verify and confirm that both sides of the\n     * session are indeed using the same shared secret.\n     * @returns {CheckCode}\n     */\n    check_code() {\n        const ret = wasm.establishedecies_check_code(this.__wbg_ptr);\n        return CheckCode.__wrap(ret);\n    }\n}\n\nconst EventIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_eventid_free(ptr >>> 0, 1));\n/**\n * A Matrix [event ID].\n *\n * An `EventId` is generated randomly or converted from a string\n * slice, and can be converted back into a string as needed.\n *\n * [event ID]: https://spec.matrix.org/v1.2/appendices/#room-ids-and-event-ids\n */\nexport class EventId {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EventIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_eventid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `EventId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.eventid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        EventIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the event's localpart.\n     * @returns {string}\n     */\n    get localpart() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.eventid_localpart(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the server name of the event ID.\n     * @returns {ServerName | undefined}\n     */\n    get serverName() {\n        const ret = wasm.eventid_serverName(this.__wbg_ptr);\n        return ret === 0 ? undefined : ServerName.__wrap(ret);\n    }\n    /**\n     * Return the event ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.eventid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst IdentityKeysFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_identitykeys_free(ptr >>> 0, 1));\n/**\n * Struct holding the two public identity keys of an account.\n */\nexport class IdentityKeys {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(IdentityKeys.prototype);\n        obj.__wbg_ptr = ptr;\n        IdentityKeysFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        IdentityKeysFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_identitykeys_free(ptr, 0);\n    }\n    /**\n     * The Ed25519 public key, used for signing.\n     * @returns {Ed25519PublicKey}\n     */\n    get ed25519() {\n        const ret = wasm.__wbg_get_identitykeys_ed25519(this.__wbg_ptr);\n        return Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The Ed25519 public key, used for signing.\n     * @param {Ed25519PublicKey} arg0\n     */\n    set ed25519(arg0) {\n        _assertClass(arg0, Ed25519PublicKey);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_identitykeys_ed25519(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The Curve25519 public key, used for establish shared secrets.\n     * @returns {Curve25519PublicKey}\n     */\n    get curve25519() {\n        const ret = wasm.__wbg_get_identitykeys_curve25519(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The Curve25519 public key, used for establish shared secrets.\n     * @param {Curve25519PublicKey} arg0\n     */\n    set curve25519(arg0) {\n        _assertClass(arg0, Curve25519PublicKey);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_identitykeys_curve25519(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst InboundCreationResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_inboundcreationresult_free(ptr >>> 0, 1));\n/**\n * The result of an inbound ECIES channel establishment.\n */\nexport class InboundCreationResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InboundCreationResult.prototype);\n        obj.__wbg_ptr = ptr;\n        InboundCreationResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InboundCreationResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_inboundcreationresult_free(ptr, 0);\n    }\n    /**\n     * The established ECIES channel.\n     * @returns {EstablishedEcies}\n     */\n    get channel() {\n        const ret = wasm.__wbg_get_inboundcreationresult_channel(this.__wbg_ptr);\n        return EstablishedEcies.__wrap(ret);\n    }\n    /**\n     * The established ECIES channel.\n     * @param {EstablishedEcies} arg0\n     */\n    set channel(arg0) {\n        _assertClass(arg0, EstablishedEcies);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_inboundcreationresult_channel(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The plaintext of the initial message.\n     * @returns {string}\n     */\n    get message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_inboundcreationresult_message(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The plaintext of the initial message.\n     * @param {string} arg0\n     */\n    set message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst InboundGroupSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_inboundgroupsession_free(ptr >>> 0, 1));\n/**\n * Inbound group session.\n *\n * Inbound group sessions are used to exchange room messages between a group of\n * participants. Inbound group sessions are used to decrypt the room messages.\n */\nexport class InboundGroupSession {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InboundGroupSession.prototype);\n        obj.__wbg_ptr = ptr;\n        InboundGroupSessionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InboundGroupSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_inboundgroupsession_free(ptr, 0);\n    }\n    /**\n     * The room where this session is used in.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.inboundgroupsession_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the sender of this session, as a\n     * [Curve25519PublicKey].\n     * @returns {Curve25519PublicKey}\n     */\n    get senderKey() {\n        const ret = wasm.inboundgroupsession_senderKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Returns the unique identifier for this session.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.inboundgroupsession_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Has the session been imported from a file or server-side backup? As\n     * opposed to being directly received as an `m.room_key` event.\n     * @returns {boolean}\n     */\n    hasBeenImported() {\n        const ret = wasm.inboundgroupsession_hasBeenImported(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst KeysBackupRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysbackuprequest_free(ptr >>> 0, 1));\n/**\n * A request that will back up a batch of room keys to the server\n * ([specification]).\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3room_keyskeys\n */\nexport class KeysBackupRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysBackupRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysBackupRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysBackupRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysbackuprequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `rooms`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysbackuprequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The backup version that these room keys should be part of.\n     * @returns {string}\n     */\n    get version() {\n        const ret = wasm.__wbg_get_keysbackuprequest_version(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysBackupRequest`.\n     * @param {string} id\n     * @param {string} body\n     * @param {string} version\n     */\n    constructor(id, body, version) {\n        const ret = wasm.keysbackuprequest_new(id, body, version);\n        this.__wbg_ptr = ret >>> 0;\n        KeysBackupRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysbackuprequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysClaimRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysclaimrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/claim` API endpoint\n * ([specification]).\n *\n * Claims one-time keys that can be used to establish 1-to-1 E2EE\n * sessions.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysclaim\n */\nexport class KeysClaimRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysClaimRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysClaimRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysClaimRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysclaimrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysclaimrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `timeout`,\n     * `one_time_keys`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysclaimrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysClaimRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysclaimrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysClaimRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysclaimrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysQueryRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysqueryrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/query` API endpoint\n * ([specification]).\n *\n * Returns the current devices and identity keys for the given users.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysquery\n */\nexport class KeysQueryRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysQueryRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysQueryRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysQueryRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysqueryrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysqueryrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `timeout`,\n     * `device_keys`, `token`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysqueryrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysQueryRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysqueryrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysQueryRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysqueryrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysUploadRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysuploadrequest_free(ptr >>> 0, 1));\n/**\n * Outgoing Requests *\n * Data for a request to the `/keys/upload` API endpoint\n * ([specification]).\n *\n * Publishes end-to-end encryption keys for the device.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysupload\n */\nexport class KeysUploadRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysUploadRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysUploadRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysUploadRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysuploadrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysuploadrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `device_keys`,\n     * `one_time_keys`, `fallback_keys`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysuploadrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysUploadRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysuploadrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysUploadRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysuploadrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MaybeSignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_maybesignature_free(ptr >>> 0, 1));\n/**\n * Represents a signature that is either valid _or_ that could not be\n * decoded.\n */\nexport class MaybeSignature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MaybeSignature.prototype);\n        obj.__wbg_ptr = ptr;\n        MaybeSignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MaybeSignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_maybesignature_free(ptr, 0);\n    }\n    /**\n     * Check whether the signature has been successfully decoded.\n     * @returns {boolean}\n     */\n    isValid() {\n        const ret = wasm.maybesignature_isValid(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Check whether the signature could not be successfully decoded.\n     * @returns {boolean}\n     */\n    isInvalid() {\n        const ret = wasm.maybesignature_isInvalid(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * The signature, if successfully decoded.\n     * @returns {Signature | undefined}\n     */\n    get signature() {\n        const ret = wasm.maybesignature_signature(this.__wbg_ptr);\n        return ret === 0 ? undefined : Signature.__wrap(ret);\n    }\n    /**\n     * The base64 encoded string that is claimed to contain a\n     * signature but could not be decoded, if any.\n     * @returns {string | undefined}\n     */\n    get invalidSignatureSource() {\n        const ret = wasm.maybesignature_invalidSignatureSource(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst MegolmDecryptionErrorFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_megolmdecryptionerror_free(ptr >>> 0, 1));\n/**\n * Js Decryption error with code.\n */\nexport class MegolmDecryptionError {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MegolmDecryptionError.prototype);\n        obj.__wbg_ptr = ptr;\n        MegolmDecryptionErrorFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MegolmDecryptionErrorFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_megolmdecryptionerror_free(ptr, 0);\n    }\n    /**\n     * Description code for the error. See `DecryptionErrorCode`\n     * @returns {DecryptionErrorCode}\n     */\n    get code() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_code(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * detailed description\n     * @returns {string}\n     */\n    get description() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_description(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Withheld code if any. Only for `UnknownMessageIndex` error code\n     * @returns {string | undefined}\n     */\n    get maybe_withheld() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_maybe_withheld(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MegolmV1BackupKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_megolmv1backupkey_free(ptr >>> 0, 1));\n/**\n * The public part of the backup key.\n */\nexport class MegolmV1BackupKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MegolmV1BackupKey.prototype);\n        obj.__wbg_ptr = ptr;\n        MegolmV1BackupKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MegolmV1BackupKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_megolmv1backupkey_free(ptr, 0);\n    }\n    /**\n     * The actual base64 encoded public key.\n     * @returns {string}\n     */\n    get publicKeyBase64() {\n        const ret = wasm.megolmv1backupkey_publicKeyBase64(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the full name of the backup algorithm this backup key supports.\n     * @returns {string}\n     */\n    get algorithm() {\n        const ret = wasm.megolmv1backupkey_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MigrationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_migration_free(ptr >>> 0, 1));\n/**\n * Migration routines\n *\n * The public methods are exposed as static methods on this class, for\n * namespacing and to enable easier mocking in unit tests.\n */\nexport class Migration {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MigrationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_migration_free(ptr, 0);\n    }\n    /**\n     * Import the base dataset from a libolm-based setup to a vodozemac-based\n     * setup stored in IndexedDB.\n     *\n     * Populates the user credentials, Olm account, backup data, etc. This is\n     * the first step in the migration process. Once this base data is\n     * imported, further data can be imported with {@link\n     * migrateOlmSessions}, {@link migrateMegolmSessions}, and TODO room\n     * settings.\n     *\n     * # Arguments\n     *\n     * * `data` - The data to be migrated\n     * * `pickle_key` - The libolm pickle key that was used to pickle the olm\n     *   account objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * @param {BaseMigrationData} data\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static migrateBaseData(data, pickle_key, store_handle) {\n        _assertClass(data, BaseMigrationData);\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateBaseData(data.__wbg_ptr, pickle_key, store_handle.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Migrate Olm sessions of a libolm-based setup to a vodozemac-based setup\n     * stored in an indexedDB crypto store.\n     *\n     * Before this method can be used, {@link migrateBaseData} must be used to\n     * import the base data into the crypto store.\n     *\n     * This method should be called a number of times, with separate batches of\n     * `sessions`. If a progress display is given, it can be updated after\n     * each batch is successfully imported.\n     *\n     * # Arguments\n     *\n     * * `sessions` - An `Array` of {@link PickledSession}s to import. Items\n     *   inside `sessions` will be invalidated by this method.\n     * * `pickle_key` - The libolm pickle key that was used to pickle the olm\n     *   session objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * @param {PickledSession[]} sessions\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static migrateOlmSessions(sessions, pickle_key, store_handle) {\n        const ptr0 = passArrayJsValueToWasm0(sessions, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateOlmSessions(ptr0, len0, pickle_key, store_handle.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Migrate Megolm sessions of a libolm-based setup to a vodozemac-based\n     * setup stored in an indexedDB crypto store.\n     *\n     * Before this method can be used, {@link migrateBaseData} must be used to\n     * import the base data into the crypto store.\n     *\n     * This method should be called a number of times, with separate batches of\n     * `sessions`. If a progress display is given, it can be updated after\n     * each batch is successfully imported.\n     *\n     * # Arguments\n     *\n     * * `sessions` - An `Array` of {@link PickledInboundGroupSession}s to\n     *   import. Items inside `sessions` will be invalidated by this method.\n     * * `pickle_key` - The libolm pickle key that was used to pickle the\n     *   megolm session objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * @param {PickledInboundGroupSession[]} sessions\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static migrateMegolmSessions(sessions, pickle_key, store_handle) {\n        const ptr0 = passArrayJsValueToWasm0(sessions, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateMegolmSessions(ptr0, len0, pickle_key, store_handle.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst OlmMachineFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_olmmachine_free(ptr >>> 0, 1));\n/**\n * State machine implementation of the Olm/Megolm encryption protocol\n * used for Matrix end to end encryption.\n */\nexport class OlmMachine {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OlmMachine.prototype);\n        obj.__wbg_ptr = ptr;\n        OlmMachineFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OlmMachineFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_olmmachine_free(ptr, 0);\n    }\n    /**\n     * Constructor will always fail. To create a new `OlmMachine`, please use\n     * the `initialize` method.\n     *\n     * Why this pattern? `initialize` returns a `Promise`. Returning a\n     */\n    constructor() {\n        const ret = wasm.olmmachine_new();\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        OlmMachineFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Create a new `OlmMachine`.\n     *\n     * The created machine will keep the encryption keys either in a IndexedDB\n     * based store, or in a memory store and once the objects is dropped,\n     * the keys will be lost.\n     *\n     * # Arguments\n     *\n     * * `user_id` - represents the unique ID of the user that owns this\n     * machine.\n     *\n     * * `device_id` - represents the unique ID of the device\n     * that owns this machine.\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database. If this isn't provided, a memory-only store will be\n     *   used. *Note* the memory-only store will lose your E2EE keys when the\n     *   `OlmMachine` gets dropped.\n     *\n     * * `store_passphrase` - The passphrase that should be used to encrypt the\n     *   IndexedDB-based store.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {string | null} [store_name]\n     * @param {string | null} [store_passphrase]\n     * @returns {Promise<any>}\n     */\n    static initialize(user_id, device_id, store_name, store_passphrase) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        var ptr0 = isLikeNone(store_name) ? 0 : passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(store_passphrase) ? 0 : passStringToWasm0(store_passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_initialize(user_id.__wbg_ptr, device_id.__wbg_ptr, ptr0, len0, ptr1, len1);\n        return ret;\n    }\n    /**\n     * Create a new `OlmMachine` backed by an existing store.\n     *\n     * # Arguments\n     *\n     * * `user_id` - represents the unique ID of the user that owns this\n     * machine.\n     *\n     * * `device_id` - represents the unique ID of the device\n     * that owns this machine.\n     *\n     * * `store_handle` - the connection to the crypto store to be used for\n     *   this machine.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static initFromStore(user_id, device_id, store_handle) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.olmmachine_initFromStore(user_id.__wbg_ptr, device_id.__wbg_ptr, store_handle.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The unique user ID that owns this `OlmMachine` instance.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.olmmachine_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The unique device ID that identifies this `OlmMachine`.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.olmmachine_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * The time, in milliseconds since the unix epoch, at which the `Account`\n     * backing this `OlmMachine` was created.\n     *\n     * An `Account` is created when an `OlmMachine` is first instantiated\n     * against a given `Store`, at which point it creates identity keys etc.\n     * This method returns the timestamp, according to the local clock, at\n     * which that happened.\n     * @returns {number}\n     */\n    get deviceCreationTimeMs() {\n        const ret = wasm.olmmachine_deviceCreationTimeMs(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the public parts of our Olm identity keys.\n     * @returns {IdentityKeys}\n     */\n    get identityKeys() {\n        const ret = wasm.olmmachine_identityKeys(this.__wbg_ptr);\n        return IdentityKeys.__wrap(ret);\n    }\n    /**\n     * Get the display name of our own device.\n     * @returns {Promise<any>}\n     */\n    get displayName() {\n        const ret = wasm.olmmachine_displayName(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Whether automatic transmission of room key requests is enabled.\n     *\n     * Room key requests allow the device to request room keys that it might\n     * have missed in the original share using `m.room_key_request`\n     * events.\n     * @returns {boolean}\n     */\n    get roomKeyRequestsEnabled() {\n        const ret = wasm.olmmachine_roomKeyRequestsEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Enable or disable automatic transmission of room key requests.\n     * @param {boolean} enabled\n     */\n    set roomKeyRequestsEnabled(enabled) {\n        wasm.olmmachine_set_roomKeyRequestsEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n     * Whether room key forwarding is enabled.\n     *\n     * If room key forwarding is enabled, we will automatically reply to\n     * incoming `m.room_key_request` messages from verified devices by\n     * forwarding the requested key (if we have it).\n     * @returns {boolean}\n     */\n    get roomKeyForwardingEnabled() {\n        const ret = wasm.olmmachine_roomKeyForwardingEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Enable or disable room key forwarding.\n     * @param {boolean} enabled\n     */\n    set roomKeyForwardingEnabled(enabled) {\n        wasm.olmmachine_set_roomKeyForwardingEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n     * Get the list of users whose devices we are currently tracking.\n     *\n     * A user can be marked for tracking using the\n     * [`update_tracked_users`](#method.update_tracked_users) method.\n     *\n     * Returns a `Set<UserId>`.\n     * @returns {Promise<any>}\n     */\n    trackedUsers() {\n        const ret = wasm.olmmachine_trackedUsers(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Update the list of tracked users.\n     *\n     * The OlmMachine maintains a list of users whose devices we are keeping\n     * track of: these are known as \"tracked users\". These must be users\n     * that we share a room with, so that the server sends us updates for\n     * their device lists.\n     *\n     * # Arguments\n     *\n     * * `users` - An array of user ids that should be added to the list of\n     *   tracked users\n     *\n     * Any users that hadn't been seen before will be flagged for a key query\n     * immediately, and whenever `receive_sync_changes` receives a\n     * \"changed\" notification for that user in the future.\n     *\n     * Users that were already in the list are unaffected.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {UserId[]} users\n     * @returns {Promise<any>}\n     */\n    updateTrackedUsers(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_updateTrackedUsers(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Mark all tracked users as dirty.\n     *\n     * All users *whose device lists we are tracking* are flagged as needing a\n     * key query. Users whose devices we are not tracking are ignored.\n     * @returns {Promise<void>}\n     */\n    markAllTrackedUsersAsDirty() {\n        const ret = wasm.olmmachine_markAllTrackedUsersAsDirty(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Handle to-device events and one-time key counts from a sync\n     * response.\n     *\n     * This will decrypt and handle to-device events returning the\n     * decrypted versions of them.\n     *\n     * To decrypt an event from the room timeline call\n     * `decrypt_room_event`.\n     *\n     * # Arguments\n     *\n     * * `to_device_events`: the JSON-encoded to-device evens from the `/sync`\n     *   response\n     * * `changed_devices`: the mapping of changed and left devices, from the\n     *   `/sync` response\n     * * `one_time_keys_counts`: The number of one-time keys on the server,\n     *   from the `/sync` response. A `Map` from string (encryption algorithm)\n     *   to number (number of keys).\n     * * `unused_fallback_keys`: Optionally, a `Set` of unused fallback keys on\n     *   the server, from the `/sync` response. If this is set, it is used to\n     *   determine if new fallback keys should be uploaded.\n     *\n     * # Returns\n     *\n     * A list of JSON strings, containing the decrypted to-device events.\n     * @param {string} to_device_events\n     * @param {DeviceLists} changed_devices\n     * @param {Map<any, any>} one_time_keys_counts\n     * @param {Set<any> | null} [unused_fallback_keys]\n     * @returns {Promise<any>}\n     */\n    receiveSyncChanges(to_device_events, changed_devices, one_time_keys_counts, unused_fallback_keys) {\n        const ptr0 = passStringToWasm0(to_device_events, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(changed_devices, DeviceLists);\n        const ret = wasm.olmmachine_receiveSyncChanges(this.__wbg_ptr, ptr0, len0, changed_devices.__wbg_ptr, one_time_keys_counts, isLikeNone(unused_fallback_keys) ? 0 : addToExternrefTable0(unused_fallback_keys));\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get the outgoing requests that need to be sent out.\n     *\n     * This returns a list of values, each of which can be any of:\n     *   * {@link KeysUploadRequest},\n     *   * {@link KeysQueryRequest},\n     *   * {@link KeysClaimRequest},\n     *   * {@link ToDeviceRequest},\n     *   * {@link SignatureUploadRequest},\n     *   * {@link RoomMessageRequest}, or\n     *   * {@link KeysBackupRequest}.\n     *\n     * Those requests need to be sent out to the server and the\n     * responses need to be passed back to the state machine\n     * using {@link OlmMachine.markRequestAsSent}.\n     * @returns {Promise<any>}\n     */\n    outgoingRequests() {\n        const ret = wasm.olmmachine_outgoingRequests(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Mark the request with the given request ID as sent (see\n     * `outgoing_requests`).\n     *\n     * Arguments are:\n     *\n     * * `request_id` represents the unique ID of the request that was sent\n     *   out. This is needed to couple the response with the now sent out\n     *   request.\n     * * `response_type` represents the type of the request that was sent out.\n     * * `response` represents the response that was received from the server\n     *   after the outgoing request was sent out.\n     * @param {string} request_id\n     * @param {RequestType} request_type\n     * @param {string} response\n     * @returns {Promise<any>}\n     */\n    markRequestAsSent(request_id, request_type, response) {\n        const ptr0 = passStringToWasm0(request_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(response, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_markRequestAsSent(this.__wbg_ptr, ptr0, len0, request_type, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Encrypt a room message for the given room.\n     *\n     * **Note**: A room key needs to be shared with the group of users that are\n     * members in the given room. If this is not done this method will panic.\n     *\n     * The usual flow to encrypt an event using this state machine is as\n     * follows:\n     *\n     * 1. Get the one-time key claim request to establish 1:1 Olm sessions for\n     *    the room members of the room we wish to participate in. This is done\n     *    using the [`get_missing_sessions()`](Self::get_missing_sessions)\n     *    method. This method call should be locked per call.\n     *\n     * 2. Share a room key with all the room members using the\n     *    [`share_room_key()`](Self::share_room_key). This method call should\n     *    be locked per room.\n     *\n     * 3. Encrypt the event using this method.\n     *\n     * 4. Send the encrypted event to the server.\n     *\n     * After the room key is shared steps 1 and 2 will become noops, unless\n     * there's some changes in the room membership or in the list of devices a\n     * member has.\n     *\n     *\n     * `room_id` is the ID of the room for which the message should\n     * be encrypted. `event_type` is the type of the event. `content`\n     * is the plaintext content of the message that should be\n     * encrypted.\n     *\n     * # Panics\n     *\n     * Panics if a group session for the given room wasn't shared\n     * beforehand.\n     * @param {RoomId} room_id\n     * @param {string} event_type\n     * @param {string} content\n     * @returns {Promise<any>}\n     */\n    encryptRoomEvent(room_id, event_type, content) {\n        _assertClass(room_id, RoomId);\n        const ptr0 = passStringToWasm0(event_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_encryptRoomEvent(this.__wbg_ptr, room_id.__wbg_ptr, ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Decrypt an event from a room timeline.\n     *\n     * # Arguments\n     *\n     * * `event`, the event that should be decrypted.\n     * * `room_id`, the ID of the room where the event was sent to.\n     *\n     * # Returns\n     *\n     * A `Promise` which resolves to a {@link DecryptedRoomEvent} instance, or\n     * rejects with a {@link MegolmDecryptionError} instance.\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @param {DecryptionSettings} decryption_settings\n     * @returns {Promise<any>}\n     */\n    decryptRoomEvent(event, room_id, decryption_settings) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        _assertClass(decryption_settings, DecryptionSettings);\n        const ret = wasm.olmmachine_decryptRoomEvent(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr, decryption_settings.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get encryption info for a decrypted timeline event.\n     *\n     * This recalculates the `EncryptionInfo` data that is returned by\n     * `decryptRoomEvent`, based on the current\n     * verification status of the sender, etc.\n     *\n     * Returns an error for an unencrypted event.\n     *\n     * # Arguments\n     *\n     * * `event` - The event to get information for.\n     * * `room_id` - The ID of the room where the event was sent to.\n     *\n     * # Returns\n     *\n     * {@link EncryptionInfo}\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    getRoomEventEncryptionInfo(event, room_id) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_getRoomEventEncryptionInfo(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get the status of the private cross signing keys.\n     *\n     * This can be used to check which private cross signing keys we\n     * have stored locally.\n     * @returns {Promise<any>}\n     */\n    crossSigningStatus() {\n        const ret = wasm.olmmachine_crossSigningStatus(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Export all the secrets we have in the store into a {@link\n     * SecretsBundle}.\n     *\n     * This method will export all the private cross-signing keys and, if\n     * available, the private part of a backup key and its accompanying\n     * version.\n     *\n     * The method will fail if we don't have all three private cross-signing\n     * keys available.\n     *\n     * **Warning**: Only export this and share it with a trusted recipient,\n     * i.e. if an existing device is sharing this with a new device.\n     * @returns {Promise<SecretsBundle>}\n     */\n    exportSecretsBundle() {\n        const ret = wasm.olmmachine_exportSecretsBundle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Import and persists secrets from a {@link SecretsBundle}.\n     *\n     * This method will import all the private cross-signing keys and, if\n     * available, the private part of a backup key and its accompanying\n     * version into the store.\n     *\n     * **Warning**: Only import this from a trusted source, i.e. if an existing\n     * device is sharing this with a new device. The imported cross-signing\n     * keys will create a {@link OwnUserIdentity} and mark it as verified.\n     *\n     * The backup key will be persisted in the store and can be enabled using\n     * the BackupMachine.\n     *\n     * The provided `SecretsBundle` is freed by this method; be careful not to\n     * use it once this method has been called.\n     * @param {SecretsBundle} bundle\n     * @returns {Promise<void>}\n     */\n    importSecretsBundle(bundle) {\n        _assertClass(bundle, SecretsBundle);\n        var ptr0 = bundle.__destroy_into_raw();\n        const ret = wasm.olmmachine_importSecretsBundle(this.__wbg_ptr, ptr0);\n        return ret;\n    }\n    /**\n     * Export all the private cross signing keys we have.\n     *\n     * The export will contain the seeds for the ed25519 keys as\n     * unpadded base64 encoded strings.\n     *\n     * Returns `null` if we don’t have any private cross signing keys;\n     * otherwise returns a `CrossSigningKeyExport`.\n     * @returns {Promise<any>}\n     */\n    exportCrossSigningKeys() {\n        const ret = wasm.olmmachine_exportCrossSigningKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Import our private cross signing keys.\n     *\n     * The keys should be provided as unpadded-base64-encoded strings.\n     *\n     * Returns a `CrossSigningStatus`.\n     * @param {string | null} [master_key]\n     * @param {string | null} [self_signing_key]\n     * @param {string | null} [user_signing_key]\n     * @returns {Promise<any>}\n     */\n    importCrossSigningKeys(master_key, self_signing_key, user_signing_key) {\n        var ptr0 = isLikeNone(master_key) ? 0 : passStringToWasm0(master_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(self_signing_key) ? 0 : passStringToWasm0(self_signing_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(user_signing_key) ? 0 : passStringToWasm0(user_signing_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importCrossSigningKeys(this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n        return ret;\n    }\n    /**\n     * Create a new cross signing identity and get the upload request\n     * to push the new public keys to the server.\n     *\n     * Warning: This will delete any existing cross signing keys that\n     * might exist on the server and thus will reset the trust\n     * between all the devices.\n     *\n     * Uploading these keys will require user interactive auth.\n     *\n     * # Arguments\n     *\n     * * `reset`, whether the method should create a new identity or use the\n     *   existing one during the request. If set to true, the request will\n     *   attempt to upload a new identity. If set to false, the request will\n     *   attempt to upload the existing identity. Since the uploading process\n     *   requires user interactive authentication, which involves sending out\n     *   the same request multiple times, setting this argument to false\n     *   enables you to reuse the same request.\n     *\n     * Returns a {@link CrossSigningBootstrapRequests}.\n     * @param {boolean} reset\n     * @returns {Promise<any>}\n     */\n    bootstrapCrossSigning(reset) {\n        const ret = wasm.olmmachine_bootstrapCrossSigning(this.__wbg_ptr, reset);\n        return ret;\n    }\n    /**\n     * Get the cross signing user identity of a user.\n     *\n     * Returns a promise for an {@link OwnUserIdentity}, a\n     * {@link OtherUserIdentity}, or `undefined`.\n     * @param {UserId} user_id\n     * @returns {Promise<any>}\n     */\n    getIdentity(user_id) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getIdentity(this.__wbg_ptr, user_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Sign the given message using our device key and if available\n     * cross-signing master key.\n     * @param {string} message\n     * @returns {Promise<any>}\n     */\n    sign(message) {\n        const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_sign(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Invalidate the currently active outbound group session for the\n     * given room.\n     *\n     * Returns true if a session was invalidated, false if there was\n     * no session to invalidate.\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    invalidateGroupSession(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_invalidateGroupSession(this.__wbg_ptr, room_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get to-device requests to share a room key with users in a room.\n     *\n     * `room_id` is the room ID. `users` is an array of `UserId`\n     * objects. `encryption_settings` are an `EncryptionSettings`\n     * object.\n     *\n     * Note: Care should be taken that only one such request at a\n     * time is in flight for the same room, e.g. using a lock.\n     *\n     * Returns an array of `ToDeviceRequest`s.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {RoomId} room_id\n     * @param {UserId[]} users\n     * @param {EncryptionSettings} encryption_settings\n     * @returns {Promise<any>}\n     */\n    shareRoomKey(room_id, users, encryption_settings) {\n        _assertClass(room_id, RoomId);\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(encryption_settings, EncryptionSettings);\n        const ret = wasm.olmmachine_shareRoomKey(this.__wbg_ptr, room_id.__wbg_ptr, ptr0, len0, encryption_settings.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Generate an \"out-of-band\" key query request for the given set of users.\n     *\n     * This can be useful if we need the results from `getIdentity` or\n     * `getUserDevices` to be as up-to-date as possible.\n     *\n     * Returns a `KeysQueryRequest` object. The response of the request should\n     * be passed to the `OlmMachine` with the `mark_request_as_sent`.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {UserId[]} users\n     * @returns {KeysQueryRequest}\n     */\n    queryKeysForUsers(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_queryKeysForUsers(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return KeysQueryRequest.__wrap(ret[0]);\n    }\n    /**\n     * Get the a key claiming request for the user/device pairs that\n     * we are missing Olm sessions for.\n     *\n     * Returns `null` if no key claiming request needs to be sent\n     * out, otherwise it returns a `KeysClaimRequest` object.\n     *\n     * Sessions need to be established between devices so group\n     * sessions for a room can be shared with them.\n     *\n     * This should be called every time a group session needs to be\n     * shared as well as between sync calls. After a sync some\n     * devices may request room keys without us having a valid Olm\n     * session with them, making it impossible to server the room key\n     * request, thus it’s necessary to check for missing sessions\n     * between sync as well.\n     *\n     * Note: Care should be taken that only one such request at a\n     * time is in flight, e.g. using a lock.\n     *\n     * The response of a successful key claiming requests needs to be\n     * passed to the `OlmMachine` with the `mark_request_as_sent`.\n     *\n     * `users` represents the list of users that we should check if\n     * we lack a session with one of their devices. This can be an\n     * empty iterator when calling this method between sync requests.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {UserId[]} users\n     * @returns {Promise<any>}\n     */\n    getMissingSessions(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getMissingSessions(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get a map holding all the devices of a user.\n     *\n     * ### Parameters\n     *\n     * * `user_id` - The unique ID of the user that the device belongs to.\n     *\n     * * `timeout_secs` - The amount of time we should wait for a `/keys/query`\n     *   response before returning if the user's device list has been marked as\n     *   stale. **Note**, this assumes that the requests from {@link\n     *   OlmMachine.outgoingRequests} are being processed and sent out.\n     *\n     *   If unset, we will return immediately even if the device list is stale.\n     *\n     * ### Returns\n     *\n     * A {@link UserDevices} object.\n     * @param {UserId} user_id\n     * @param {number | null} [timeout_secs]\n     * @returns {Promise<any>}\n     */\n    getUserDevices(user_id, timeout_secs) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getUserDevices(this.__wbg_ptr, user_id.__wbg_ptr, !isLikeNone(timeout_secs), isLikeNone(timeout_secs) ? 0 : timeout_secs);\n        return ret;\n    }\n    /**\n     * Get a specific device of a user.\n     *\n     * ### Parameters\n     *\n     * * `user_id` - The unique ID of the user that the device belongs to.\n     *\n     * * `device_id` - The unique ID of the device.\n     *\n     * * `timeout_secs` - The amount of time we should wait for a `/keys/query`\n     *   response before returning if the user's device list has been marked as\n     *   stale. **Note**, this assumes that the requests from {@link\n     *   OlmMachine.outgoingRequests} are being processed and sent out.\n     *\n     *   If unset, we will return immediately even if the device list is stale.\n     *\n     * ### Returns\n     *\n     * If the device is known, a {@link Device}. Otherwise, `undefined`.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {number | null} [timeout_secs]\n     * @returns {Promise<any>}\n     */\n    getDevice(user_id, device_id, timeout_secs) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        const ret = wasm.olmmachine_getDevice(this.__wbg_ptr, user_id.__wbg_ptr, device_id.__wbg_ptr, !isLikeNone(timeout_secs), isLikeNone(timeout_secs) ? 0 : timeout_secs);\n        return ret;\n    }\n    /**\n     * Get a verification object for the given user ID with the given\n     * flow ID (a to-device request ID if the verification has been\n     * requested by a to-device request, or a room event ID if the\n     * verification has been requested by a room event).\n     *\n     * It returns a “`Verification` object”, which is either a `Sas`\n     * or `Qr` object.\n     * @param {UserId} user_id\n     * @param {string} flow_id\n     * @returns {any}\n     */\n    getVerification(user_id, flow_id) {\n        _assertClass(user_id, UserId);\n        const ptr0 = passStringToWasm0(flow_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getVerification(this.__wbg_ptr, user_id.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get a verification request object with the given flow ID.\n     * @param {UserId} user_id\n     * @param {string} flow_id\n     * @returns {VerificationRequest | undefined}\n     */\n    getVerificationRequest(user_id, flow_id) {\n        _assertClass(user_id, UserId);\n        const ptr0 = passStringToWasm0(flow_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getVerificationRequest(this.__wbg_ptr, user_id.__wbg_ptr, ptr0, len0);\n        return ret === 0 ? undefined : VerificationRequest.__wrap(ret);\n    }\n    /**\n     * Get all the verification requests of a given user.\n     * @param {UserId} user_id\n     * @returns {Array<any>}\n     */\n    getVerificationRequests(user_id) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getVerificationRequests(this.__wbg_ptr, user_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Receive a verification event.\n     *\n     * This method can be used to pass verification events that are happening\n     * in rooms to the `OlmMachine`. The event should be in the decrypted form.\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    receiveVerificationEvent(event, room_id) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_receiveVerificationEvent(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Export the keys that match the given predicate.\n     *\n     * `predicate` is a closure that will be called for every known\n     * `InboundGroupSession`, which represents a room key. If the closure\n     * returns `true`, the `InboundGroupSession` will be included in the\n     * export; otherwise it won't.\n     *\n     * Returns a Promise containing a Result containing a String which is a\n     * JSON-encoded array of ExportedRoomKey objects.\n     * @param {Function} predicate\n     * @returns {Promise<any>}\n     */\n    exportRoomKeys(predicate) {\n        const ret = wasm.olmmachine_exportRoomKeys(this.__wbg_ptr, predicate);\n        return ret;\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * Mostly, a deprecated alias for `importExportedRoomKeys`, though the\n     * return type is different.\n     *\n     * Returns a String containing a JSON-encoded object, holding three\n     * properties:\n     *  * `total_count` (the total number of keys found in the export data).\n     *  * `imported_count` (the number of keys that were imported).\n     *  * `keys` (the keys that were imported; a map from room id to a map of\n     *    the sender key to a list of session ids).\n     *\n     * @deprecated Use `importExportedRoomKeys` or `importBackedUpRoomKeys`.\n     * @param {string} exported_room_keys\n     * @param {Function} progress_listener\n     * @returns {Promise<any>}\n     */\n    importRoomKeys(exported_room_keys, progress_listener) {\n        const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importRoomKeys(this.__wbg_ptr, ptr0, len0, progress_listener);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * `exported_keys` is a JSON-encoded list of previously exported keys that\n     * should be imported into our store. If we already have a better\n     * version of a key, the key will _not_ be imported.\n     *\n     * `progress_listener` is a closure that takes 2 `BigInt` arguments:\n     * `progress` and `total`, and returns nothing.\n     *\n     * Returns a {@link RoomKeyImportResult}.\n     * @param {string} exported_room_keys\n     * @param {Function} progress_listener\n     * @returns {Promise<any>}\n     */\n    importExportedRoomKeys(exported_room_keys, progress_listener) {\n        const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importExportedRoomKeys(this.__wbg_ptr, ptr0, len0, progress_listener);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * # Arguments\n     *\n     * * `backed_up_room_keys`: keys that were retrieved from backup and that\n     *   should be added to our store (provided they are better than our\n     *   current versions of those keys). Specifically, it should be a Map from\n     *   {@link RoomId}, to a Map from session ID to a (decrypted) session data\n     *   structure.\n     *\n     * * `progress_listener`: an optional callback that takes 3 arguments:\n     *   `progress` (the number of keys that have successfully been imported),\n     *   `total` (the total number of keys), and `failures` (the number of keys\n     *   that failed to import), and returns nothing.\n     *\n     * # Returns\n     *\n     * A {@link RoomKeyImportResult}.\n     * @param {Map<any, any>} backed_up_room_keys\n     * @param {Function | null | undefined} progress_listener\n     * @param {string} backup_version\n     * @returns {Promise<any>}\n     */\n    importBackedUpRoomKeys(backed_up_room_keys, progress_listener, backup_version) {\n        const ptr0 = passStringToWasm0(backup_version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importBackedUpRoomKeys(this.__wbg_ptr, backed_up_room_keys, isLikeNone(progress_listener) ? 0 : addToExternrefTable0(progress_listener), ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Store the backup decryption key in the crypto store.\n     *\n     * This is useful if the client wants to support gossiping of the backup\n     * key.\n     *\n     * Returns `Promise<void>`.\n     * @param {BackupDecryptionKey} decryption_key\n     * @param {string} version\n     * @returns {Promise<any>}\n     */\n    saveBackupDecryptionKey(decryption_key, version) {\n        _assertClass(decryption_key, BackupDecryptionKey);\n        const ptr0 = passStringToWasm0(version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_saveBackupDecryptionKey(this.__wbg_ptr, decryption_key.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get the backup keys we have saved in our store.\n     * Returns a `Promise` for {@link BackupKeys}.\n     * @returns {Promise<any>}\n     */\n    getBackupKeys() {\n        const ret = wasm.olmmachine_getBackupKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Check if the given backup has been verified by us or by another of our\n     * devices that we trust.\n     *\n     * The `backup_info` should be a Javascript object with the following\n     * format:\n     *\n     * ```json\n     * {\n     *     \"algorithm\": \"m.megolm_backup.v1.curve25519-aes-sha2\",\n     *     \"auth_data\": {\n     *         \"public_key\":\"XjhWTCjW7l59pbfx9tlCBQolfnIQWARoKOzjTOPSlWM\",\n     *         \"signatures\": {}\n     *     }\n     * }\n     * ```\n     *\n     * Returns a {@link SignatureVerification} object.\n     * @param {any} backup_info\n     * @returns {Promise<any>}\n     */\n    verifyBackup(backup_info) {\n        const ret = wasm.olmmachine_verifyBackup(this.__wbg_ptr, backup_info);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Activate the given backup key to be used with the given backup version.\n     *\n     * **Warning**: The caller needs to make sure that the given `BackupKey` is\n     * trusted, otherwise we might be encrypting room keys that a malicious\n     * party could decrypt.\n     *\n     * The {@link verifyBackup} method can be used to do so.\n     *\n     * Returns `Promise<void>`.\n     * @param {string} public_key_base_64\n     * @param {string} version\n     * @returns {Promise<any>}\n     */\n    enableBackupV1(public_key_base_64, version) {\n        const ptr0 = passStringToWasm0(public_key_base_64, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_enableBackupV1(this.__wbg_ptr, ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Are we able to encrypt room keys.\n     *\n     * This returns true if we have an active `BackupKey` and backup version\n     * registered with the state machine.\n     *\n     * Returns `Promise<bool>`.\n     * @returns {Promise<any>}\n     */\n    isBackupEnabled() {\n        const ret = wasm.olmmachine_isBackupEnabled(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Disable and reset our backup state.\n     *\n     * This will remove any pending backup request, remove the backup key and\n     * reset the backup state of each room key we have.\n     *\n     * Returns `Promise<void>`.\n     * @returns {Promise<any>}\n     */\n    disableBackup() {\n        const ret = wasm.olmmachine_disableBackup(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Encrypt a batch of room keys and return a request that needs to be sent\n     * out to backup the room keys.\n     *\n     * Returns an optional {@link KeysBackupRequest}.\n     * @returns {Promise<any>}\n     */\n    backupRoomKeys() {\n        const ret = wasm.olmmachine_backupRoomKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the number of backed up room keys and the total number of room keys.\n     * Returns a {@link RoomKeyCounts}.\n     * @returns {Promise<any>}\n     */\n    roomKeyCounts() {\n        const ret = wasm.olmmachine_roomKeyCounts(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Encrypt the list of exported room keys using the given passphrase.\n     *\n     * `exported_room_keys` is a list of sessions that should be encrypted\n     * (it's generally returned by `export_room_keys`). `passphrase` is the\n     * passphrase that will be used to encrypt the exported room keys. And\n     * `rounds` is the number of rounds that should be used for the key\n     * derivation when the passphrase gets turned into an AES key. More rounds\n     * are increasingly computationnally intensive and as such help against\n     * brute-force attacks. Should be at least `10_000`, while values in the\n     * `100_000` ranges should be preferred.\n     * @param {string} exported_room_keys\n     * @param {string} passphrase\n     * @param {number} rounds\n     * @returns {string}\n     */\n    static encryptExportedRoomKeys(exported_room_keys, passphrase, rounds) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ret = wasm.olmmachine_encryptExportedRoomKeys(ptr0, len0, ptr1, len1, rounds);\n            var ptr3 = ret[0];\n            var len3 = ret[1];\n            if (ret[3]) {\n                ptr3 = 0; len3 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n    /**\n     * Try to decrypt a reader into a list of exported room keys.\n     *\n     * `encrypted_exported_room_keys` is the result from\n     * `encrypt_exported_room_keys`. `passphrase` is the passphrase that was\n     * used when calling `encrypt_exported_room_keys`.\n     * @param {string} encrypted_exported_room_keys\n     * @param {string} passphrase\n     * @returns {string}\n     */\n    static decryptExportedRoomKeys(encrypted_exported_room_keys, passphrase) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const ptr0 = passStringToWasm0(encrypted_exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ret = wasm.olmmachine_decryptExportedRoomKeys(ptr0, len0, ptr1, len1);\n            var ptr3 = ret[0];\n            var len3 = ret[1];\n            if (ret[3]) {\n                ptr3 = 0; len3 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a room key.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of {@link RoomKeyInfo}) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerRoomKeyUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerRoomKeyUpdatedCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever we receive a\n     * notification that some room keys have been withheld.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of {@link RoomKeyWithheldInfo}) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerRoomKeysWithheldCallback(callback) {\n        const ret = wasm.olmmachine_registerRoomKeysWithheldCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a user identity.\n     *\n     * `callback` should be a function that takes a single argument (a {@link\n     * UserId}) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerUserIdentityUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerUserIdentityUpdatedCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a device.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of user IDs as strings) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerDevicesUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerDevicesUpdatedCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever a secret\n     * (`m.secret.send`) is received.\n     *\n     * The only secret this will currently broadcast is the\n     * `m.megolm_backup.v1` (the cross signing secrets are handled internally).\n     *\n     * To request a secret from other devices, a client sends an\n     * `m.secret.request` device event with `action` set to `request` and\n     * `name` set to the identifier of the secret. A device that wishes to\n     * share the secret will reply with an `m.secret.send` event, encrypted\n     * using olm.\n     *\n     * The secrets are guaranteed to have been received over a 1-to-1 encrypted\n     * to_device message from a one of the user's own verified devices.\n     *\n     * See https://matrix-org.github.io/matrix-rust-sdk/matrix_sdk_crypto/store/struct.Store.html#method.secrets_stream for more information.\n     *\n     * `callback` should be a function that takes 2 arguments: the secret name\n     * (string) and value (string).\n     *\n     * **Note**: if the secret is valid and handled on the javascript side, the\n     * secret inbox should be cleared by calling\n     * `delete_secrets_from_inbox`.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerReceiveSecretCallback(callback) {\n        const ret = wasm.olmmachine_registerReceiveSecretCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Get all the secrets with the given secret_name we have currently\n     * stored.\n     * The only secret this will currently return is the\n     * `m.megolm_backup.v1` secret.\n     *\n     * Usually you would just register a callback with\n     * [`register_receive_secret_callback`], but if the client is shut down\n     * before handling them, this method can be used to retrieve them.\n     * This method should therefore be called at client startup to retrieve any\n     * secrets received during the previous session.\n     *\n     * The secrets are guaranteed to have been received over a 1-to-1 encrypted\n     * to_device message from one of the user's own verified devices.\n     *\n     * Returns a `Promise` for a `Set` of `String` corresponding to the secret\n     * values.\n     *\n     * If the secret is valid and handled, the secret inbox should be cleared\n     * by calling `delete_secrets_from_inbox`.\n     * @param {string} secret_name\n     * @returns {Promise<Promise<any>>}\n     */\n    getSecretsFromInbox(secret_name) {\n        const ptr0 = passStringToWasm0(secret_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getSecretsFromInbox(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Delete all secrets with the given secret name from the inbox.\n     *\n     * Should be called after handling the secrets with\n     * `get_secrets_from_inbox`.\n     *\n     * # Arguments\n     *\n     * * `secret_name` - The name of the secret to delete.\n     * @param {string} secret_name\n     * @returns {Promise<Promise<any>>}\n     */\n    deleteSecretsFromInbox(secret_name) {\n        const ptr0 = passStringToWasm0(secret_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_deleteSecretsFromInbox(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Request missing local secrets from our other trusted devices.\n     *\n     * \"Local secrets\" refers to secrets which can be shared between trusted\n     * devices, such as private cross-signing keys, and the megolm backup\n     * decryption key.\n     *\n     * This method will cause the sdk to generated outgoing secret requests\n     * (`m.secret.request`) to get the missing secrets. These requests will\n     * then be returned by a future call to {@link\n     * OlmMachine#outgoingRequests}.\n     *\n     * # Returns\n     *\n     * A `Promise` for a `bool` result, which will be true if  secrets were\n     * missing, and a request was generated.\n     * @returns {Promise<Promise<any>>}\n     */\n    requestMissingSecretsIfNeeded() {\n        const ret = wasm.olmmachine_requestMissingSecretsIfNeeded(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the stored room settings, such as the encryption algorithm or\n     * whether to encrypt only for trusted devices.\n     *\n     * These settings can be modified via {@link setRoomSettings}.\n     *\n     * # Returns\n     *\n     * `Promise<RoomSettings|undefined>`\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    getRoomSettings(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_getRoomSettings(this.__wbg_ptr, room_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Store encryption settings for the given room.\n     *\n     * This method checks if the new settings are \"safe\" -- ie, that they do\n     * not represent a downgrade in encryption security from any previous\n     * settings. Attempts to downgrade security will result in an error.\n     *\n     * If the settings are valid, they will be persisted to the crypto store.\n     * These settings are not used directly by this library, but the saved\n     * settings can be retrieved via {@link getRoomSettings}.\n     * @param {RoomId} room_id\n     * @param {RoomSettings} room_settings\n     * @returns {Promise<void>}\n     */\n    setRoomSettings(room_id, room_settings) {\n        _assertClass(room_id, RoomId);\n        _assertClass(room_settings, RoomSettings);\n        const ret = wasm.olmmachine_setRoomSettings(this.__wbg_ptr, room_id.__wbg_ptr, room_settings.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Manage dehydrated devices\n     * @returns {DehydratedDevices}\n     */\n    dehydratedDevices() {\n        const ret = wasm.olmmachine_dehydratedDevices(this.__wbg_ptr);\n        return DehydratedDevices.__wrap(ret);\n    }\n    /**\n     * Shut down the `OlmMachine`.\n     *\n     * The `OlmMachine` cannot be used after this method has been called.\n     *\n     * All associated resources will be closed too, like IndexedDB\n     * connections.\n     */\n    close() {\n        const ptr = this.__destroy_into_raw();\n        wasm.olmmachine_close(ptr);\n    }\n}\n\nconst OtherUserIdentityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_otheruseridentity_free(ptr >>> 0, 1));\n/**\n * Struct representing a cross signing identity of a user.\n *\n * This is the user identity of a user that isn't our own. Other users will\n * only contain a master key and a self signing key, meaning that only device\n * signatures can be checked with this identity.\n *\n * This struct wraps a read-only version of the struct and allows verifications\n * to be requested to verify our own device with the user identity.\n */\nexport class OtherUserIdentity {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OtherUserIdentity.prototype);\n        obj.__wbg_ptr = ptr;\n        OtherUserIdentityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OtherUserIdentityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_otheruseridentity_free(ptr, 0);\n    }\n    /**\n     * Is this user identity verified?\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.otheruseridentity_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Manually verify this user.\n     *\n     * This method will attempt to sign the user identity using our private\n     * cross signing key.\n     *\n     * This method fails if we don't have the private part of our user-signing\n     * key.\n     *\n     * Returns a request that needs to be sent out for the user to be marked as\n     * verified.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.otheruseridentity_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a `VerificationRequest` object after the verification\n     * request content has been sent out.\n     * @param {RoomId} room_id\n     * @param {EventId} request_event_id\n     * @param {any[] | null} [methods]\n     * @returns {VerificationRequest}\n     */\n    requestVerification(room_id, request_event_id, methods) {\n        _assertClass(room_id, RoomId);\n        _assertClass(request_event_id, EventId);\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.otheruseridentity_requestVerification(this.__wbg_ptr, room_id.__wbg_ptr, request_event_id.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return VerificationRequest.__wrap(ret[0]);\n    }\n    /**\n     * Send a verification request to the given user.\n     *\n     * The returned content needs to be sent out into a DM room with the given\n     * user.\n     *\n     * After the content has been sent out a VerificationRequest can be started\n     * with the `request_verification` method.\n     * @param {any[] | null} [methods]\n     * @returns {string}\n     */\n    verificationRequestContent(methods) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            const ret = wasm.otheruseridentity_verificationRequestContent(this.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Get the master key of the identity.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.otheruseridentity_masterKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the self-signing key of the identity.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.otheruseridentity_selfSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Pin the current identity (public part of the master signing key).\n     * @returns {Promise<any>}\n     */\n    pinCurrentMasterKey() {\n        const ret = wasm.otheruseridentity_pinCurrentMasterKey(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Has the identity changed in a way that requires approval from the user?\n     *\n     * A user identity needs approval if it changed after the crypto machine\n     * has already observed (\"pinned\") a different identity for that user,\n     * unless it is an explicitly verified identity (using for example\n     * interactive verification).\n     *\n     * This situation can be resolved by:\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Updating the pin to the new identity with {@link pinCurrentMasterKey}.\n     * @returns {boolean}\n     */\n    identityNeedsUserApproval() {\n        const ret = wasm.otheruseridentity_identityNeedsUserApproval(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * True if we verified this identity (with any own identity, at any\n     * point).\n     *\n     * To set this latch back to false, call {@link withdrawVerification}.\n     * @returns {boolean}\n     */\n    wasPreviouslyVerified() {\n        const ret = wasm.otheruseridentity_wasPreviouslyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Remove the requirement for this identity to be verified.\n     *\n     * If an identity was previously verified and is not anymore it will be\n     * reported to the user. In order to remove this notice users have to\n     * verify again or to withdraw the verification requirement.\n     * @returns {Promise<any>}\n     */\n    withdrawVerification() {\n        const ret = wasm.otheruseridentity_withdrawVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Was this identity verified since initial observation and is not anymore?\n     *\n     * Such a violation should be reported to the local user by the\n     * application, and resolved by\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Withdrawing the verification requirement with {@link\n     *   withdrawVerification}.\n     * @returns {boolean}\n     */\n    hasVerificationViolation() {\n        const ret = wasm.otheruseridentity_hasVerificationViolation(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst OutboundCreationResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_outboundcreationresult_free(ptr >>> 0, 1));\n/**\n * The result of an outbound ECIES channel establishment.\n */\nexport class OutboundCreationResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OutboundCreationResult.prototype);\n        obj.__wbg_ptr = ptr;\n        OutboundCreationResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OutboundCreationResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_outboundcreationresult_free(ptr, 0);\n    }\n    /**\n     * The established ECIES channel.\n     * @returns {EstablishedEcies}\n     */\n    get channel() {\n        const ret = wasm.__wbg_get_inboundcreationresult_channel(this.__wbg_ptr);\n        return EstablishedEcies.__wrap(ret);\n    }\n    /**\n     * The established ECIES channel.\n     * @param {EstablishedEcies} arg0\n     */\n    set channel(arg0) {\n        _assertClass(arg0, EstablishedEcies);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_inboundcreationresult_channel(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The initial encrypted message.\n     * @returns {string}\n     */\n    get initial_message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_outboundcreationresult_initial_message(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The initial encrypted message.\n     * @param {string} arg0\n     */\n    set initial_message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst OwnUserIdentityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ownuseridentity_free(ptr >>> 0, 1));\n/**\n * Struct representing a cross signing identity of a user.\n *\n * This is the user identity of a user that is our own.\n */\nexport class OwnUserIdentity {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OwnUserIdentity.prototype);\n        obj.__wbg_ptr = ptr;\n        OwnUserIdentityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OwnUserIdentityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ownuseridentity_free(ptr, 0);\n    }\n    /**\n     * Is this user identity verified?\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.ownuseridentity_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Mark our user identity as verified.\n     *\n     * This will mark the identity locally as verified and sign it with our own\n     * device.\n     *\n     * Returns a signature upload request that needs to be sent out.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.ownuseridentity_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Send a verification request to our other devices.\n     * @param {any[] | null} [methods]\n     * @returns {Promise<any>}\n     */\n    requestVerification(methods) {\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ownuseridentity_requestVerification(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Does our user identity trust our own device, i.e. have we signed our own\n     * device keys with our self-signing key?\n     * @returns {Promise<any>}\n     */\n    trustsOurOwnDevice() {\n        const ret = wasm.ownuseridentity_trustsOurOwnDevice(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the master key of the identity.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_masterKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the self-signing key of the identity.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_selfSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the user-signing key of the identity. This is only present for our\n     * own user identity.\n     * @returns {string}\n     */\n    get userSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_userSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * True if we verified our own identity at some point in the past.\n     *\n     * To reset this latch back to `false`, call {@link withdrawVerification}.\n     * @returns {boolean}\n     */\n    wasPreviouslyVerified() {\n        const ret = wasm.ownuseridentity_wasPreviouslyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Remove the requirement for this identity to be verified.\n     *\n     * If an identity was previously verified and is not any longer, it will be\n     * reported to the user. In order to remove this notice users have to\n     * verify again or to withdraw the verification requirement.\n     * @returns {Promise<any>}\n     */\n    withdrawVerification() {\n        const ret = wasm.ownuseridentity_withdrawVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Was this identity verified since initial observation and is not anymore?\n     *\n     * Such a violation should be reported to the local user by the\n     * application, and resolved by\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Withdrawing the verification requirement with {@link\n     *   withdrawVerification}.\n     * @returns {boolean}\n     */\n    hasVerificationViolation() {\n        const ret = wasm.ownuseridentity_hasVerificationViolation(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst PickledInboundGroupSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pickledinboundgroupsession_free(ptr >>> 0, 1));\n/**\n * A pickled version of an `InboundGroupSession`.\n *\n * Holds all the information that needs to be stored in a database to restore\n * an InboundGroupSession.\n */\nexport class PickledInboundGroupSession {\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof PickledInboundGroupSession)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PickledInboundGroupSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pickledinboundgroupsession_free(ptr, 0);\n    }\n    /**\n     * The pickle string holding the Megolm Session, as returned by\n     * `olm_pickle_inbound_group_session` in libolm.\n     * @returns {string}\n     */\n    get pickle() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledinboundgroupsession_pickle(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Megolm Session, as returned by\n     * `olm_pickle_inbound_group_session` in libolm.\n     * @param {string} arg0\n     */\n    set pickle(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The public curve25519 key of the account that sent us the session.\n     * @returns {string}\n     */\n    get senderKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledinboundgroupsession_senderKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The public curve25519 key of the account that sent us the session.\n     * @param {string} arg0\n     */\n    set senderKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The public ed25519 key of the account that is believed to have initiated\n     * the session, if known.\n     *\n     * If the session was received directly from the creator via an\n     * Olm-encrypted `m.room_key` event, this value is taken from the `keys`\n     * property of the plaintext payload of that event (see\n     * [`m.olm.v1.curve25519-aes-sha2`]).\n     *\n     * If the session was forwarded to us using an [`m.forwarded_room_key`],\n     * this value is a copy of the `sender_claimed_ed25519_key` from the\n     * content of the event.\n     *\n     * [`m.olm.v1.curve25519-aes-sha2`]: https://spec.matrix.org/v1.9/client-server-api/#molmv1curve25519-aes-sha2\n     * [`m.forwarded_room_key`]: https://spec.matrix.org/v1.9/client-server-api/#mforwarded_room_key\n     * @returns {string | undefined}\n     */\n    get senderSigningKey() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_senderSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The public ed25519 key of the account that is believed to have initiated\n     * the session, if known.\n     *\n     * If the session was received directly from the creator via an\n     * Olm-encrypted `m.room_key` event, this value is taken from the `keys`\n     * property of the plaintext payload of that event (see\n     * [`m.olm.v1.curve25519-aes-sha2`]).\n     *\n     * If the session was forwarded to us using an [`m.forwarded_room_key`],\n     * this value is a copy of the `sender_claimed_ed25519_key` from the\n     * content of the event.\n     *\n     * [`m.olm.v1.curve25519-aes-sha2`]: https://spec.matrix.org/v1.9/client-server-api/#molmv1curve25519-aes-sha2\n     * [`m.forwarded_room_key`]: https://spec.matrix.org/v1.9/client-server-api/#mforwarded_room_key\n     * @param {string | null} [arg0]\n     */\n    set senderSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupRecoveryKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The id of the room that the session is used in.\n     *\n     * Nullable so that a `PickledInboundGroupSession` can be constructed\n     * incrementally. Must be populated!\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * The id of the room that the session is used in.\n     *\n     * Nullable so that a `PickledInboundGroupSession` can be constructed\n     * incrementally. Must be populated!\n     * @param {RoomId | null} [arg0]\n     */\n    set roomId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, RoomId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_pickledinboundgroupsession_roomId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * Flag remembering if the session was directly sent to us by the sender\n     * or if it was imported.\n     * @returns {boolean}\n     */\n    get imported() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_imported(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Flag remembering if the session was directly sent to us by the sender\n     * or if it was imported.\n     * @param {boolean} arg0\n     */\n    set imported(arg0) {\n        wasm.__wbg_set_pickledinboundgroupsession_imported(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Flag remembering if the session has been backed up.\n     * @returns {boolean}\n     */\n    get backedUp() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_backedUp(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Flag remembering if the session has been backed up.\n     * @param {boolean} arg0\n     */\n    set backedUp(arg0) {\n        wasm.__wbg_set_pickledinboundgroupsession_backedUp(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Construct a new `PickledInboundGroupSession`, with default values.\n     */\n    constructor() {\n        const ret = wasm.pickledinboundgroupsession_new();\n        this.__wbg_ptr = ret >>> 0;\n        PickledInboundGroupSessionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst PickledSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pickledsession_free(ptr >>> 0, 1));\n/**\n * A pickled version of a `Session`.\n *\n * Holds all the information that needs to be stored in a database to restore\n * an Olm Session. Can be imported into the rust store with {@link\n * Migration::migrateOlmSessions}.\n */\nexport class PickledSession {\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof PickledSession)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PickledSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pickledsession_free(ptr, 0);\n    }\n    /**\n     * The pickle string holding the Olm Session, as returned by\n     * `olm_pickle_session` in libolm.\n     * @returns {string}\n     */\n    get pickle() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledsession_pickle(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Olm Session, as returned by\n     * `olm_pickle_session` in libolm.\n     * @param {string} arg0\n     */\n    set pickle(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The base64-encoded public curve25519 key of the other user that we share\n     * this session with.\n     * @returns {string}\n     */\n    get senderKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledsession_senderKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded public curve25519 key of the other user that we share\n     * this session with.\n     * @param {string} arg0\n     */\n    set senderKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Was the session created using a fallback key?\n     * @returns {boolean}\n     */\n    get createdUsingFallbackKey() {\n        const ret = wasm.__wbg_get_pickledsession_createdUsingFallbackKey(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Was the session created using a fallback key?\n     * @param {boolean} arg0\n     */\n    set createdUsingFallbackKey(arg0) {\n        wasm.__wbg_set_pickledsession_createdUsingFallbackKey(this.__wbg_ptr, arg0);\n    }\n    /**\n     * When the session was created.\n     * @returns {Date}\n     */\n    get creationTime() {\n        const ret = wasm.__wbg_get_pickledsession_creationTime(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * When the session was created.\n     * @param {Date} arg0\n     */\n    set creationTime(arg0) {\n        wasm.__wbg_set_pickledsession_creationTime(this.__wbg_ptr, arg0);\n    }\n    /**\n     * When the session was last used.\n     * @returns {Date}\n     */\n    get lastUseTime() {\n        const ret = wasm.__wbg_get_pickledsession_lastUseTime(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * When the session was last used.\n     * @param {Date} arg0\n     */\n    set lastUseTime(arg0) {\n        wasm.__wbg_set_pickledsession_lastUseTime(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Construct a new `PickledSession`, with default values.\n     */\n    constructor() {\n        const ret = wasm.pickledsession_new();\n        this.__wbg_ptr = ret >>> 0;\n        PickledSessionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst PkDecryptionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pkdecryption_free(ptr >>> 0, 1));\n/**\n * A class representing a public-key decryption instance.\n *\n * This implements the decryption part of the\n * `m.megolm_backup.v1.curve25519-aes-sha2` algorithm described in the Matrix\n * {@link https://spec.matrix.org/v1.11/client-server-api/#backup-algorithm-mmegolm_backupv1curve25519-aes-sha2 | spec}.\n *\n * @see {@link PkEncryption}\n *\n * More details can be found in the official {@link https://docs.rs/vodozemac/latest/vodozemac/pk_encryption/ | vodozemac documentation}.\n */\nexport class PkDecryption {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PkDecryption.prototype);\n        obj.__wbg_ptr = ptr;\n        PkDecryptionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PkDecryptionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pkdecryption_free(ptr, 0);\n    }\n    /**\n     * Creates a new `PkDecryption` instance with a newly generated key pair.\n     */\n    constructor() {\n        const ret = wasm.pkdecryption_new();\n        this.__wbg_ptr = ret >>> 0;\n        PkDecryptionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Creates a `PkDecryption` instance from a secret key.\n     * @param {Curve25519SecretKey} key\n     * @returns {PkDecryption}\n     */\n    static fromKey(key) {\n        _assertClass(key, Curve25519SecretKey);\n        const ret = wasm.pkdecryption_fromKey(key.__wbg_ptr);\n        return PkDecryption.__wrap(ret);\n    }\n    /**\n     * Returns the secret key associated with this `PkDecryption` instance.\n     * @returns {Curve25519SecretKey}\n     */\n    secretKey() {\n        const ret = wasm.pkdecryption_secretKey(this.__wbg_ptr);\n        return Curve25519SecretKey.__wrap(ret);\n    }\n    /**\n     * Returns the public key associated with this decryption instance.\n     *\n     * This can be used to construct a {@link PkEncryption} object to encrypt a\n     * message for this `PkDecryption` object.\n     * @returns {Curve25519PublicKey}\n     */\n    publicKey() {\n        const ret = wasm.pkdecryption_publicKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Decrypts an encrypted message and returns the plaintext as a UTF-8\n     * string.\n     * @param {PkMessage} message\n     * @returns {string}\n     */\n    decryptString(message) {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            _assertClass(message, PkMessage);\n            const ret = wasm.pkdecryption_decryptString(this.__wbg_ptr, message.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Decrypts an encrypted message and returns the raw `Uint8Array`.\n     * @param {PkMessage} message\n     * @returns {Uint8Array}\n     */\n    decrypt(message) {\n        _assertClass(message, PkMessage);\n        const ret = wasm.pkdecryption_decrypt(this.__wbg_ptr, message.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n}\n\nconst PkEncryptionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pkencryption_free(ptr >>> 0, 1));\n/**\n * A class representing a public-key encryption instance.\n *\n * This implements the encryption part of the\n * `m.megolm_backup.v1.curve25519-aes-sha2` algorithm described in the Matrix\n * {@link https://spec.matrix.org/v1.11/client-server-api/#backup-algorithm-mmegolm_backupv1curve25519-aes-sha2 | spec}.\n *\n * @see {@link PkDecryption}\n *\n * More details can be found in the official {@link https://docs.rs/vodozemac/latest/vodozemac/pk_encryption/ | vodozemac documentation}.\n */\nexport class PkEncryption {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PkEncryption.prototype);\n        obj.__wbg_ptr = ptr;\n        PkEncryptionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PkEncryptionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pkencryption_free(ptr, 0);\n    }\n    /**\n     * Creates a new `PkEncryption` instance from a public key.\n     * @param {Curve25519PublicKey} public_key\n     * @returns {PkEncryption}\n     */\n    static fromKey(public_key) {\n        _assertClass(public_key, Curve25519PublicKey);\n        const ret = wasm.pkencryption_fromKey(public_key.__wbg_ptr);\n        return PkEncryption.__wrap(ret);\n    }\n    /**\n     * Encrypts a byte message and returns an encrypted {@link PkMessage}.\n     * @param {Uint8Array} message\n     * @returns {PkMessage}\n     */\n    encrypt(message) {\n        const ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.pkencryption_encrypt(this.__wbg_ptr, ptr0, len0);\n        return PkMessage.__wrap(ret);\n    }\n    /**\n     * Encrypts a string message and returns an encrypted {@link PkMessage}.\n     * @param {string} message\n     * @returns {PkMessage}\n     */\n    encryptString(message) {\n        const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.pkencryption_encrypt(this.__wbg_ptr, ptr0, len0);\n        return PkMessage.__wrap(ret);\n    }\n}\n\nconst PkMessageFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pkmessage_free(ptr >>> 0, 1));\n/**\n * A class representing an encrypted message using {@link PkEncryption}.\n */\nexport class PkMessage {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PkMessage.prototype);\n        obj.__wbg_ptr = ptr;\n        PkMessageFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PkMessageFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pkmessage_free(ptr, 0);\n    }\n    /**\n     * Returns the raw ciphertext as a `Uint8Array`.\n     * @returns {Uint8Array}\n     */\n    ciphertext() {\n        const ret = wasm.pkmessage_ciphertext(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Returns the raw message authentication code (MAC) as a `Uint8Array`.\n     * @returns {Uint8Array}\n     */\n    mac() {\n        const ret = wasm.pkmessage_mac(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Returns the ephemeral public key used during encryption.\n     * @returns {Curve25519PublicKey}\n     */\n    ephemeralKey() {\n        const ret = wasm.pkmessage_ephemeralKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Constructs a `PkMessage` from its parts: ciphertext, MAC, and ephemeral\n     * key.\n     * @param {Uint8Array} ciphertext\n     * @param {Uint8Array} mac\n     * @param {Curve25519PublicKey} ephemeral_key\n     * @returns {PkMessage}\n     */\n    static fromParts(ciphertext, mac, ephemeral_key) {\n        const ptr0 = passArray8ToWasm0(ciphertext, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(mac, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        _assertClass(ephemeral_key, Curve25519PublicKey);\n        const ret = wasm.pkmessage_fromParts(ptr0, len0, ptr1, len1, ephemeral_key.__wbg_ptr);\n        return PkMessage.__wrap(ret);\n    }\n    /**\n     * Constructs a `PkMessage` from a base64-encoded representation.\n     * @param {Base64EncodedPkMessage} message\n     * @returns {PkMessage}\n     */\n    static fromBase64(message) {\n        _assertClass(message, Base64EncodedPkMessage);\n        const ret = wasm.pkmessage_fromBase64(message.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return PkMessage.__wrap(ret[0]);\n    }\n    /**\n     * Converts the `PkMessage` into a base64-encoded representation.\n     * @returns {Base64EncodedPkMessage}\n     */\n    toBase64() {\n        const ret = wasm.pkmessage_toBase64(this.__wbg_ptr);\n        return Base64EncodedPkMessage.__wrap(ret);\n    }\n}\n\nconst PutDehydratedDeviceRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_putdehydrateddevicerequest_free(ptr >>> 0, 1));\n/**\n * A request that will upload a dehydrated device to the server.\n */\nexport class PutDehydratedDeviceRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PutDehydratedDeviceRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        PutDehydratedDeviceRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PutDehydratedDeviceRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_putdehydrateddevicerequest_free(ptr, 0);\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `rooms`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_putdehydrateddevicerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `PutDehydratedDeviceRequest`\n     * @param {string} body\n     */\n    constructor(body) {\n        const ret = wasm.putdehydrateddevicerequest_new(body);\n        this.__wbg_ptr = ret >>> 0;\n        PutDehydratedDeviceRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst QrFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qr_free(ptr >>> 0, 1));\n/**\n * QR code based verification.\n */\nexport class Qr {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Qr.prototype);\n        obj.__wbg_ptr = ptr;\n        QrFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qr_free(ptr, 0);\n    }\n    /**\n     * Get the current state of this request.\n     *\n     * Returns a `QrState`.\n     * @returns {QrState}\n     */\n    state() {\n        const ret = wasm.qr_state(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Has the QR verification been scanned by the other side.\n     *\n     * When the verification object is in this state it’s required\n     * that the user confirms that the other side has scanned the QR\n     * code.\n     * @returns {boolean}\n     */\n    hasBeenScanned() {\n        const ret = wasm.qr_hasBeenScanned(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the scanning of the QR code been confirmed by us?\n     * @returns {boolean}\n     */\n    hasBeenConfirmed() {\n        const ret = wasm.qr_hasBeenConfirmed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get our own user ID.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.qr_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the user id of the other user that is participating in\n     * this verification flow.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.qr_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the device ID of the other side.\n     * @returns {DeviceId}\n     */\n    get otherDeviceId() {\n        const ret = wasm.qr_otherDeviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Did we initiate the verification request?\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.qr_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get info about the cancellation if the verification flow has\n     * been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    cancelInfo() {\n        const ret = wasm.qr_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * Has the verification flow completed?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.qr_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow been cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.qr_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this a verification that is verifying one of our own devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.qr_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Have we successfully scanned the QR code and are able to send\n     * a reciprocation event?\n     * @returns {boolean}\n     */\n    reciprocated() {\n        const ret = wasm.qr_reciprocated(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the unique ID that identifies this QR verification flow,\n     * be either a to-device request ID or a room event ID.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qr_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the room id if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.qr_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Generate a QR code object that is representing this\n     * verification flow.\n     *\n     * The QrCode can then be rendered as an image or as an unicode\n     * string.\n     *\n     * The `to_bytes` method can be used to instead output the raw\n     * bytes that should be encoded as a QR code.\n     *\n     * Returns a `QrCode`.\n     * @returns {QrCode}\n     */\n    toQrCode() {\n        const ret = wasm.qr_toQrCode(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCode.__wrap(ret[0]);\n    }\n    /**\n     * Generate a the raw bytes that should be encoded as a QR code\n     * is representing this verification flow.\n     *\n     * The `to_qr_code` method can be used to instead output a QrCode\n     * object that can be rendered.\n     * @returns {Uint8ClampedArray}\n     */\n    toBytes() {\n        const ret = wasm.qr_toBytes(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Notify the other side that we have successfully scanned the QR\n     * code and that the QR verification flow can start.\n     *\n     * This will return some OutgoingContent if the object is in the\n     * correct state to start the verification flow, otherwise None.\n     * @returns {any}\n     */\n    reciprocate() {\n        const ret = wasm.qr_reciprocate(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Confirm that the other side has scanned our QR code.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already confirmed.\n     * @returns {any}\n     */\n    confirmScanning() {\n        const ret = wasm.qr_confirmScanning(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification flow.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.qr_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification.\n     *\n     * This cancels the verification with given code (e.g. `m.user`).\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @param {string} code\n     * @returns {any}\n     */\n    cancelWithCode(code) {\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qr_cancelWithCode(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.qr_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n}\n\nconst QrCodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcode_free(ptr >>> 0, 1));\n/**\n * A QR code.\n */\nexport class QrCode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCode.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcode_free(ptr, 0);\n    }\n    /**\n     * Render the QR code into a `Uint8ClampedArray` where 1 represents a\n     * dark pixel and 0 a white pixel.\n     * @returns {Uint8ClampedArray}\n     */\n    renderIntoBuffer() {\n        const ret = wasm.qrcode_renderIntoBuffer(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n}\n\nconst QrCodeDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcodedata_free(ptr >>> 0, 1));\n/**\n * Data for the QR code login mechanism.\n *\n * The {@link QrCodeData} can be serialized and encoded as a QR code or it can\n * be decoded from a QR code.\n */\nexport class QrCodeData {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCodeData.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeDataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcodedata_free(ptr, 0);\n    }\n    /**\n     * Create new {@link QrCodeData} from a given public key, a rendezvous URL\n     * and, optionally, a server name for the homeserver.\n     *\n     * If a server name is given, then the {@link QrCodeData} mode will be\n     * {@link QrCodeMode.Reciprocate}, i.e. the QR code will contain data for\n     * the existing device to display the QR code.\n     *\n     * If no server name is given, the {@link QrCodeData} mode will be\n     * {@link QrCodeMode.Login}, i.e. the QR code will contain data for the\n     * new device to display the QR code.\n     * @param {Curve25519PublicKey} public_key\n     * @param {string} rendezvous_url\n     * @param {string | null} [server_name]\n     */\n    constructor(public_key, rendezvous_url, server_name) {\n        _assertClass(public_key, Curve25519PublicKey);\n        var ptr0 = public_key.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(rendezvous_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(server_name) ? 0 : passStringToWasm0(server_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_new(ptr0, ptr1, len1, ptr2, len2);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        QrCodeDataFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Attempt to decode a slice of bytes into a {@link QrCodeData} object.\n     *\n     * The slice of bytes would generally be returned by a QR code decoder.\n     * @param {Uint8Array} bytes\n     * @returns {QrCodeData}\n     */\n    static fromBytes(bytes) {\n        const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_fromBytes(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeData.__wrap(ret[0]);\n    }\n    /**\n     * Encode the {@link QrCodeData} into a list of bytes.\n     *\n     * The list of bytes can be used by a QR code generator to create an image\n     * containing a QR code.\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        const ret = wasm.qrcodedata_toBytes(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Attempt to decode a base64 encoded string into a {@link QrCodeData}\n     * object.\n     * @param {string} data\n     * @returns {QrCodeData}\n     */\n    static fromBase64(data) {\n        const ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_fromBase64(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeData.__wrap(ret[0]);\n    }\n    /**\n     * Encode the {@link QrCodeData} into a string using base64.\n     *\n     * This format can be used for debugging purposes and the\n     * [`QrcodeData::from_base64()`] method can be used to parse the string\n     * again.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qrcodedata_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the Curve25519 public key embedded in the {@link QrCodeData}.\n     *\n     * This Curve25519 public key should be used to establish an\n     * [ECIES](https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme)\n     * (Elliptic Curve Integrated Encryption Scheme) channel with the other\n     * device.\n     * @returns {Curve25519PublicKey}\n     */\n    get publicKey() {\n        const ret = wasm.qrcodedata_publicKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the URL of the rendezvous server which will be used to exchange\n     * messages between the two devices.\n     * @returns {string}\n     */\n    get rendezvousUrl() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qrcodedata_rendezvousUrl(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the server name of the homeserver which the new device will be\n     * logged in to.\n     *\n     * This will be only available if the existing device has generated the QR\n     * code and the new device is the one scanning the QR code.\n     * @returns {string | undefined}\n     */\n    get serverName() {\n        const ret = wasm.qrcodedata_serverName(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the mode of this {@link QrCodeData} instance.\n     * @returns {QrCodeMode}\n     */\n    get mode() {\n        const ret = wasm.qrcodedata_mode(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst QrCodeScanFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcodescan_free(ptr >>> 0, 1));\n/**\n * A scanned QR code.\n */\nexport class QrCodeScan {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCodeScan.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeScanFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeScanFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcodescan_free(ptr, 0);\n    }\n    /**\n     * Parse the decoded payload of a QR code in byte slice form.\n     *\n     * This method is useful if you would like to do your own custom QR code\n     * decoding.\n     * @param {Uint8ClampedArray} buffer\n     * @returns {QrCodeScan}\n     */\n    static fromBytes(buffer) {\n        const ret = wasm.qrcodescan_fromBytes(buffer);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeScan.__wrap(ret[0]);\n    }\n}\n\nconst RehydratedDeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rehydrateddevice_free(ptr >>> 0, 1));\n/**\n * A rehydrated device\n *\n * This device can receive to-device events to get room keys that were send to\n * it.\n */\nexport class RehydratedDevice {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RehydratedDevice.prototype);\n        obj.__wbg_ptr = ptr;\n        RehydratedDeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RehydratedDeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rehydrateddevice_free(ptr, 0);\n    }\n    /**\n     * Receive the to-device events that sent to the dehydrated device\n     *\n     * The rehydrated device will decrypt the events and pass the room keys\n     * into the `OlmMachine`.\n     *\n     * `to_device_events` is a JSON-encoded result of the `events` array from\n     * `/dehydrated_device/{device_id}/events`.\n     *\n     * Returns an array of `RoomKeyInfo`, indicating the room keys that were\n     * received.\n     * @param {string} to_device_events\n     * @returns {Promise<Array<any>>}\n     */\n    receiveEvents(to_device_events) {\n        const ptr0 = passStringToWasm0(to_device_events, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.rehydrateddevice_receiveEvents(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n}\n\nconst RoomIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomid_free(ptr >>> 0, 1));\n/**\n * A Matrix [room ID].\n *\n * [room ID]: https://spec.matrix.org/v1.2/appendices/#room-ids-and-event-ids\n */\nexport class RoomId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomId.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof RoomId)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `RoomId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.roomid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        RoomIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Return the room ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomKeyCountsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeycounts_free(ptr >>> 0, 1));\n/**\n * Struct holding the number of room keys we have.\n */\nexport class RoomKeyCounts {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyCounts.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyCountsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyCountsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeycounts_free(ptr, 0);\n    }\n    /**\n     * The total number of room keys.\n     * @returns {number}\n     */\n    get total() {\n        const ret = wasm.__wbg_get_roomkeycounts_total(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The total number of room keys.\n     * @param {number} arg0\n     */\n    set total(arg0) {\n        wasm.__wbg_set_roomkeycounts_total(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The number of backed up room keys.\n     * @returns {number}\n     */\n    get backedUp() {\n        const ret = wasm.__wbg_get_roomkeycounts_backedUp(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The number of backed up room keys.\n     * @param {number} arg0\n     */\n    set backedUp(arg0) {\n        wasm.__wbg_set_roomkeycounts_backedUp(this.__wbg_ptr, arg0);\n    }\n}\n\nconst RoomKeyImportResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeyimportresult_free(ptr >>> 0, 1));\n/**\n * The result of a call to {@link OlmMachine.importExportedRoomKeys} or\n * {@link OlmMachine.importBackedUpRoomKeys}.\n */\nexport class RoomKeyImportResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyImportResult.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyImportResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyImportResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeyimportresult_free(ptr, 0);\n    }\n    /**\n     * The number of room keys that were imported.\n     * @returns {number}\n     */\n    get importedCount() {\n        const ret = wasm.__wbg_get_roomkeyimportresult_importedCount(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * The total number of room keys that were found in the export.\n     * @returns {number}\n     */\n    get totalCount() {\n        const ret = wasm.__wbg_get_roomkeyimportresult_totalCount(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * The keys that were imported.\n     *\n     * A Map from room id to a Map of the sender key to a Set of session ids.\n     *\n     * Typescript type: `Map<string, Map<string, Set<string>>`.\n     * @returns {Map<any, any>}\n     */\n    keys() {\n        const ret = wasm.roomkeyimportresult_keys(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RoomKeyInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeyinfo_free(ptr >>> 0, 1));\n/**\n * Information on a room key that has been received or imported.\n */\nexport class RoomKeyInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeyinfo_free(ptr, 0);\n    }\n    /**\n     * The {@link EncryptionAlgorithm} that this key is used for. Will be one\n     * of the `m.megolm.*` algorithms.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.roomkeyinfo_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The room where the key is used.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.roomkeyinfo_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device which initiated the session originally.\n     * @returns {Curve25519PublicKey}\n     */\n    get senderKey() {\n        const ret = wasm.roomkeyinfo_senderKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The ID of the session that the key is for.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeyinfo_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomKeyWithheldInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeywithheldinfo_free(ptr >>> 0, 1));\n/**\n * Information on a received `m.room_key.withheld` event.\n */\nexport class RoomKeyWithheldInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyWithheldInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyWithheldInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyWithheldInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeywithheldinfo_free(ptr, 0);\n    }\n    /**\n     * The User ID of the user that sent us the `m.room_key.withheld` message.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.roomkeywithheldinfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The encryption algorithm of the session that is being withheld.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.roomkeywithheldinfo_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The `code` from the `m.room_key.withheld` message, such as\n     * `m.unverified`.\n     * @returns {string}\n     */\n    get withheldCode() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeywithheldinfo_withheldCode(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The room ID of the session that is being withheld.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.roomkeywithheldinfo_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The session ID of the session that is being withheld.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeywithheldinfo_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomMessageRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roommessagerequest_free(ptr >>> 0, 1));\n/**\n * A customized owned request type for sending out room messages\n * ([specification]).\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3roomsroomidsendeventtypetxnid\n */\nexport class RoomMessageRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomMessageRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomMessageRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomMessageRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roommessagerequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_roommessagerequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the room to send the event to.\n     * @returns {string}\n     */\n    get room_id() {\n        const ret = wasm.__wbg_get_roommessagerequest_room_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the transaction ID for this event.\n     *\n     * Clients should generate an ID unique across requests with the same\n     * access token; it will be used by the server to ensure idempotency of\n     * requests.\n     * @returns {string}\n     */\n    get txn_id() {\n        const ret = wasm.__wbg_get_roommessagerequest_txn_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the type of event to be sent.\n     * @returns {string}\n     */\n    get event_type() {\n        const ret = wasm.__wbg_get_roommessagerequest_event_type(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the message's content.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_roommessagerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `RoomMessageRequest`.\n     * @param {string} id\n     * @param {string} room_id\n     * @param {string} txn_id\n     * @param {string} event_type\n     * @param {string} content\n     */\n    constructor(id, room_id, txn_id, event_type, content) {\n        const ret = wasm.roommessagerequest_new(id, room_id, txn_id, event_type, content);\n        this.__wbg_ptr = ret >>> 0;\n        RoomMessageRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.roommessagerequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RoomSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomsettings_free(ptr >>> 0, 1));\n/**\n * Room encryption settings which are modified by state events or user options\n */\nexport class RoomSettings {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomSettings.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomSettingsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomsettings_free(ptr, 0);\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     *\n     * Should be one of the members of {@link EncryptionAlgorithm}.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.__wbg_get_roomsettings_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     *\n     * Should be one of the members of {@link EncryptionAlgorithm}.\n     * @param {EncryptionAlgorithm} arg0\n     */\n    set algorithm(arg0) {\n        wasm.__wbg_set_roomsettings_algorithm(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Whether untrusted devices should receive room keys. If this is `false`,\n     * they will be excluded from the conversation.\n     * @returns {boolean}\n     */\n    get onlyAllowTrustedDevices() {\n        const ret = wasm.__wbg_get_roomsettings_onlyAllowTrustedDevices(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Whether untrusted devices should receive room keys. If this is `false`,\n     * they will be excluded from the conversation.\n     * @param {boolean} arg0\n     */\n    set onlyAllowTrustedDevices(arg0) {\n        wasm.__wbg_set_roomsettings_onlyAllowTrustedDevices(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The maximum time, in milliseconds, that an encryption session should be\n     * used for, before it is rotated.\n     * @returns {number | undefined}\n     */\n    get sessionRotationPeriodMs() {\n        const ret = wasm.__wbg_get_roomsettings_sessionRotationPeriodMs(this.__wbg_ptr);\n        return ret[0] === 0 ? undefined : ret[1];\n    }\n    /**\n     * The maximum time, in milliseconds, that an encryption session should be\n     * used for, before it is rotated.\n     * @param {number | null} [arg0]\n     */\n    set sessionRotationPeriodMs(arg0) {\n        wasm.__wbg_set_roomsettings_sessionRotationPeriodMs(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);\n    }\n    /**\n     * The maximum number of messages an encryption session should be used for,\n     * before it is rotated.\n     * @returns {number | undefined}\n     */\n    get sessionRotationPeriodMessages() {\n        const ret = wasm.__wbg_get_roomsettings_sessionRotationPeriodMessages(this.__wbg_ptr);\n        return ret[0] === 0 ? undefined : ret[1];\n    }\n    /**\n     * The maximum number of messages an encryption session should be used for,\n     * before it is rotated.\n     * @param {number | null} [arg0]\n     */\n    set sessionRotationPeriodMessages(arg0) {\n        wasm.__wbg_set_roomsettings_sessionRotationPeriodMessages(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);\n    }\n    /**\n     * Create a new `RoomSettings` with default values.\n     */\n    constructor() {\n        const ret = wasm.roomsettings_new();\n        this.__wbg_ptr = ret >>> 0;\n        RoomSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst SasFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_sas_free(ptr >>> 0, 1));\n/**\n * Short Authentication String (SAS) verification.\n */\nexport class Sas {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Sas.prototype);\n        obj.__wbg_ptr = ptr;\n        SasFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SasFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_sas_free(ptr, 0);\n    }\n    /**\n     * Get our own user ID.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.sas_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get our own device ID.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.sas_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the user id of the other side.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.sas_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the device ID of the other side.\n     * @returns {DeviceId}\n     */\n    get otherDeviceId() {\n        const ret = wasm.sas_otherDeviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the unique ID that identifies this SAS verification flow,\n     * be either a to-device request ID or a room event ID.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.sas_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the room ID if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.sas_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Does this verification flow support displaying emoji for the\n     * short authentication string?\n     * @returns {boolean}\n     */\n    supportsEmoji() {\n        const ret = wasm.sas_supportsEmoji(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Did this verification flow start from a verification request?\n     * @returns {boolean}\n     */\n    startedFromRequest() {\n        const ret = wasm.sas_startedFromRequest(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this a verification that is verifying one of our own\n     * devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.sas_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Have we confirmed that the short auth string matches?\n     * @returns {boolean}\n     */\n    haveWeConfirmed() {\n        const ret = wasm.sas_haveWeConfirmed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification been accepted by both parties?\n     * @returns {boolean}\n     */\n    hasBeenAccepted() {\n        const ret = wasm.sas_hasBeenAccepted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get info about the cancellation if the verification flow has\n     * been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    cancelInfo() {\n        const ret = wasm.sas_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * True if we initiated the verification flow (ie, we sent the\n     * `m.key.verification.request`).\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.sas_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Accept the SAS verification.\n     *\n     * This does nothing (and returns `undefined`) if the verification was\n     * already accepted, otherwise it returns an `OutgoingRequest`\n     * that needs to be sent out.\n     * @returns {any}\n     */\n    accept() {\n        const ret = wasm.sas_accept(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Confirm the SAS verification.\n     *\n     * This confirms that the short auth strings match on both sides.\n     *\n     * Does nothing if we’re not in a state where we can confirm the\n     * short auth string.\n     *\n     * Returns a `Promise` for an array of `OutgoingRequest`s.\n     * @returns {Promise<any>}\n     */\n    confirm() {\n        const ret = wasm.sas_confirm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Cancel the verification.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.sas_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification.\n     *\n     * This cancels the verification with given code (e.g. `m.user`).\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @param {string} code\n     * @returns {any}\n     */\n    cancelWithCode(code) {\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.sas_cancelWithCode(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Has the SAS verification flow timed out?\n     * @returns {boolean}\n     */\n    timedOut() {\n        const ret = wasm.sas_timedOut(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Are we in a state where we can show the short auth string?\n     * @returns {boolean}\n     */\n    canBePresented() {\n        const ret = wasm.sas_canBePresented(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the SAS flow done?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.sas_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the SAS flow cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.sas_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the emoji version of the short auth string.\n     *\n     * Returns `undefined` if we can't yet present the short auth string,\n     * otherwise an array of seven `Emoji` objects.\n     * @returns {Emoji[] | undefined}\n     */\n    emoji() {\n        const ret = wasm.sas_emoji(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get the index of the emoji representing the short auth string\n     *\n     * Returns `undefined` if we can’t yet present the short auth\n     * string, otherwise seven `u8` numbers in the range from 0 to 63\n     * inclusive which can be converted to an emoji using [the\n     * relevant specification\n     * entry](https://spec.matrix.org/unstable/client-server-api/#sas-method-emoji).\n     * @returns {Uint8Array | undefined}\n     */\n    emojiIndex() {\n        const ret = wasm.sas_emojiIndex(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the decimal version of the short auth string.\n     *\n     * Returns None if we can’t yet present the short auth string,\n     * otherwise a tuple containing three 4-digit integers that\n     * represent the short auth string.\n     * @returns {Uint16Array | undefined}\n     */\n    decimals() {\n        const ret = wasm.sas_decimals(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayU16FromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 2, 2);\n        }\n        return v1;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request.\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.sas_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n}\n\nconst SecretsBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_secretsbundle_free(ptr >>> 0, 1));\n/**\n * Struct containing the bundle of secrets to fully activate a new device for\n * end-to-end encryption.\n */\nexport class SecretsBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SecretsBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        SecretsBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SecretsBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_secretsbundle_free(ptr, 0);\n    }\n    /**\n     * The seed of the master key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_masterKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The seed of the self signing key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_selfSigningKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The seed of the user signing key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get userSigningKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_userSigningKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The bundle of the backup decryption key and backup version if any.\n     * @returns {BackupSecretsBundle | undefined}\n     */\n    get backupBundle() {\n        const ret = wasm.secretsbundle_backupBundle(this.__wbg_ptr);\n        return ret === 0 ? undefined : BackupSecretsBundle.__wrap(ret);\n    }\n    /**\n     * Serialize the [`SecretsBundle`] to a JSON object.\n     * @returns {any}\n     */\n    to_json() {\n        const ret = wasm.secretsbundle_to_json(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Deserialize the [`SecretsBundle`] from a JSON object.\n     * @param {any} json\n     * @returns {SecretsBundle}\n     */\n    static from_json(json) {\n        const ret = wasm.secretsbundle_from_json(json);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return SecretsBundle.__wrap(ret[0]);\n    }\n}\n\nconst ServerNameFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_servername_free(ptr >>> 0, 1));\n/**\n * A Matrix-spec compliant [server name].\n *\n * It consists of a host and an optional port (separated by a colon if\n * present).\n *\n * [server name]: https://spec.matrix.org/v1.2/appendices/#server-name\n */\nexport class ServerName {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ServerName.prototype);\n        obj.__wbg_ptr = ptr;\n        ServerNameFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ServerNameFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_servername_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `ServerName`.\n     * @param {string} name\n     */\n    constructor(name) {\n        const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.servername_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        ServerNameFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the host of the server name.\n     *\n     * That is: Return the part of the server before `:<port>` or the\n     * full server name if there is no port.\n     * @returns {string}\n     */\n    get host() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.servername_host(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the port of the server name if any.\n     * @returns {number | undefined}\n     */\n    get port() {\n        const ret = wasm.servername_port(this.__wbg_ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n     * Returns true if and only if the server name is an IPv4 or IPv6\n     * address.\n     * @returns {boolean}\n     */\n    isIpLiteral() {\n        const ret = wasm.servername_isIpLiteral(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst ShieldStateFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_shieldstate_free(ptr >>> 0, 1));\n/**\n * Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]\n * for more info.\n */\nexport class ShieldState {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ShieldState.prototype);\n        obj.__wbg_ptr = ptr;\n        ShieldStateFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ShieldStateFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_shieldstate_free(ptr, 0);\n    }\n    /**\n     * The shield color\n     * @returns {ShieldColor}\n     */\n    get color() {\n        const ret = wasm.__wbg_get_shieldstate_color(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The shield color\n     * @param {ShieldColor} arg0\n     */\n    set color(arg0) {\n        wasm.__wbg_set_shieldstate_color(this.__wbg_ptr, arg0);\n    }\n    /**\n     * A machine-readable representation of the authenticity for a\n     * `ShieldState`.\n     * @returns {ShieldStateCode | undefined}\n     */\n    get code() {\n        const ret = wasm.__wbg_get_shieldstate_code(this.__wbg_ptr);\n        return ret === 6 ? undefined : ret;\n    }\n    /**\n     * A machine-readable representation of the authenticity for a\n     * `ShieldState`.\n     * @param {ShieldStateCode | null} [arg0]\n     */\n    set code(arg0) {\n        wasm.__wbg_set_shieldstate_code(this.__wbg_ptr, isLikeNone(arg0) ? 6 : arg0);\n    }\n    /**\n     * Error message that can be displayed as a tooltip\n     * @returns {string | undefined}\n     */\n    get message() {\n        const ret = wasm.shieldstate_message(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signature_free(ptr >>> 0, 1));\n/**\n * Represents a potentially decoded signature (but not a validated\n * one).\n */\nexport class Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr, 0);\n    }\n    /**\n     * Get the Ed25519 signature, if this is one.\n     * @returns {Ed25519Signature | undefined}\n     */\n    get ed25519() {\n        const ret = wasm.signature_ed25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * Convert the signature to a base64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.signature_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst SignatureUploadRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatureuploadrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/signatures/upload` API endpoint\n * ([specification]).\n *\n * Publishes cross-signing signatures for the user.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keyssignaturesupload\n */\nexport class SignatureUploadRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SignatureUploadRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureUploadRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureUploadRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatureuploadrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * Some signature upload will have to an `id` field, some won't.\n     * They have one when they are created automatically during an interactive\n     * verification, otherwise they don't.\n     * @returns {string | undefined}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_signatureuploadrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the payload of the request\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_signatureuploadrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `SignatureUploadRequest`.\n     * @param {string} id\n     * @param {string} signed_keys\n     */\n    constructor(id, signed_keys) {\n        const ret = wasm.signatureuploadrequest_new(id, signed_keys);\n        this.__wbg_ptr = ret >>> 0;\n        SignatureUploadRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.signatureuploadrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst SignatureVerificationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatureverification_free(ptr >>> 0, 1));\n/**\n * The result of a signature verification of a signed JSON object.\n */\nexport class SignatureVerification {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SignatureVerification.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureVerificationFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureVerificationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatureverification_free(ptr, 0);\n    }\n    /**\n     * Give the backup signature state from the current device.\n     * See SignatureState for values\n     * @returns {SignatureState}\n     */\n    get deviceState() {\n        const ret = wasm.signatureverification_deviceState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Give the backup signature state from the current user identity.\n     * See SignatureState for values\n     * @returns {SignatureState}\n     */\n    get userState() {\n        const ret = wasm.signatureverification_userState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Is the result considered to be trusted?\n     *\n     * This tells us if the result has a valid signature from any of the\n     * following:\n     *\n     * * Our own device\n     * * Our own user identity, provided the identity is trusted as well\n     * * Any of our own devices, provided the device is trusted as well\n     * @returns {boolean}\n     */\n    trusted() {\n        const ret = wasm.signatureverification_trusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst SignaturesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatures_free(ptr >>> 0, 1));\n/**\n * A collection of `Signature`.\n */\nexport class Signatures {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signatures.prototype);\n        obj.__wbg_ptr = ptr;\n        SignaturesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignaturesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatures_free(ptr, 0);\n    }\n    /**\n     * Creates a new, empty, signatures collection.\n     */\n    constructor() {\n        const ret = wasm.signatures_new();\n        this.__wbg_ptr = ret >>> 0;\n        SignaturesFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Add the given signature from the given signer and the given key ID to\n     * the collection.\n     * @param {UserId} signer\n     * @param {DeviceKeyId} key_id\n     * @param {Ed25519Signature} signature\n     * @returns {MaybeSignature | undefined}\n     */\n    addSignature(signer, key_id, signature) {\n        _assertClass(signer, UserId);\n        _assertClass(key_id, DeviceKeyId);\n        _assertClass(signature, Ed25519Signature);\n        const ret = wasm.signatures_addSignature(this.__wbg_ptr, signer.__wbg_ptr, key_id.__wbg_ptr, signature.__wbg_ptr);\n        return ret === 0 ? undefined : MaybeSignature.__wrap(ret);\n    }\n    /**\n     * Try to find an Ed25519 signature from the given signer with\n     * the given key ID.\n     * @param {UserId} signer\n     * @param {DeviceKeyId} key_id\n     * @returns {Ed25519Signature | undefined}\n     */\n    getSignature(signer, key_id) {\n        _assertClass(signer, UserId);\n        _assertClass(key_id, DeviceKeyId);\n        const ret = wasm.signatures_getSignature(this.__wbg_ptr, signer.__wbg_ptr, key_id.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * Get the map of signatures that belong to the given user.\n     * @param {UserId} signer\n     * @returns {Map<any, any> | undefined}\n     */\n    get(signer) {\n        _assertClass(signer, UserId);\n        const ret = wasm.signatures_get(this.__wbg_ptr, signer.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Remove all the signatures we currently hold.\n     */\n    clear() {\n        wasm.signatures_clear(this.__wbg_ptr);\n    }\n    /**\n     * Do we hold any signatures or is our collection completely\n     * empty.\n     * @returns {boolean}\n     */\n    isEmpty() {\n        const ret = wasm.signatures_isEmpty(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * How many signatures do we currently hold.\n     * @returns {number}\n     */\n    get count() {\n        const ret = wasm.signatures_count(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Get the json with all signatures\n     * @returns {string}\n     */\n    asJSON() {\n        const ret = wasm.signatures_asJSON(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n}\n\nconst StoreHandleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_storehandle_free(ptr >>> 0, 1));\n/**\n * A struct containing an open connection to a CryptoStore.\n *\n * Opening the CryptoStore can take some time, due to the PBKDF calculation\n * involved, so if multiple operations are being done on the same store, it is\n * more efficient to open it once.\n */\nexport class StoreHandle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(StoreHandle.prototype);\n        obj.__wbg_ptr = ptr;\n        StoreHandleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        StoreHandleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_storehandle_free(ptr, 0);\n    }\n    /**\n     * Open a crypto store.\n     *\n     * The created store will be based on IndexedDB if a `store_name` is\n     * provided; otherwise it will be based on a memory store and once the\n     * objects is dropped, the keys will be lost.\n     *\n     * # Arguments\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database. If this isn't provided, a memory-only store will be\n     *   used. *Note* the memory-only store will lose your E2EE keys when the\n     *   `StoreHandle` gets dropped.\n     *\n     * * `store_passphrase` - The passphrase that should be used to encrypt the\n     *   store, for IndexedDB-based stores\n     * @param {string | null} [store_name]\n     * @param {string | null} [store_passphrase]\n     * @returns {Promise<StoreHandle>}\n     */\n    static open(store_name, store_passphrase) {\n        var ptr0 = isLikeNone(store_name) ? 0 : passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(store_passphrase) ? 0 : passStringToWasm0(store_passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.storehandle_open(ptr0, len0, ptr1, len1);\n        return ret;\n    }\n    /**\n     * Open a crypto store based on IndexedDB, using the given key for\n     * encryption.\n     *\n     * # Arguments\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database.\n     *\n     * * `store_key` - The key that should be used to encrypt the store, for\n     *   IndexedDB-based stores. Must be a 32-byte array.\n     * @param {string} store_name\n     * @param {Uint8Array} store_key\n     * @returns {Promise<StoreHandle>}\n     */\n    static openWithKey(store_name, store_key) {\n        const ptr0 = passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(store_key, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.storehandle_openWithKey(ptr0, len0, ptr1, len1);\n        return ret;\n    }\n}\n\nconst ToDeviceRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_todevicerequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/sendToDevice` API endpoint\n * ([specification]).\n *\n * Send an event to a single device or to a group of devices.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3sendtodeviceeventtypetxnid\n */\nexport class ToDeviceRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ToDeviceRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        ToDeviceRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ToDeviceRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_todevicerequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * For to-device request this would be the same value as `txn_id`. It is\n     * exposed also as `id` so that the js bindings are consistent with the\n     * other request types by using this field to mark as sent.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_todevicerequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the type of event being sent to each devices.\n     * @returns {string}\n     */\n    get event_type() {\n        const ret = wasm.__wbg_get_todevicerequest_event_type(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing a request identifier unique to the access token\n     * used to send the request.\n     * @returns {string}\n     */\n    get txn_id() {\n        const ret = wasm.__wbg_get_todevicerequest_txn_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `messages`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_todevicerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `ToDeviceRequest`.\n     * @param {string} id\n     * @param {string} event_type\n     * @param {string} txn_id\n     * @param {string} body\n     */\n    constructor(id, event_type, txn_id, body) {\n        const ret = wasm.todevicerequest_new(id, event_type, txn_id, body);\n        this.__wbg_ptr = ret >>> 0;\n        ToDeviceRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.todevicerequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst TracingFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_tracing_free(ptr >>> 0, 1));\n/**\n * Type to install and to manipulate the tracing layer.\n */\nexport class Tracing {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TracingFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_tracing_free(ptr, 0);\n    }\n    /**\n     * Check whether the `tracing` feature has been enabled.\n     *\n     * @deprecated: `tracing` is now always enabled.\n     * @returns {boolean}\n     */\n    static isAvailable() {\n        const ret = wasm.tracing_isAvailable();\n        return ret !== 0;\n    }\n    /**\n     * Install the tracing layer.\n     * @param {LoggerLevel} min_level\n     */\n    constructor(min_level) {\n        const ret = wasm.tracing_new(min_level);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        TracingFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Re-define the minimum logger level.\n     * @param {LoggerLevel} min_level\n     */\n    set minLevel(min_level) {\n        const ret = wasm.tracing_set_minLevel(this.__wbg_ptr, min_level);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * Turn the logger on, i.e. it emits logs again if it was turned\n     * off.\n     */\n    turnOn() {\n        const ret = wasm.tracing_turnOn(this.__wbg_ptr);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * Turn the logger off, i.e. it no longer emits logs.\n     */\n    turnOff() {\n        const ret = wasm.tracing_turnOff(this.__wbg_ptr);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n}\n\nconst UploadSigningKeysRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_uploadsigningkeysrequest_free(ptr >>> 0, 1));\n/**\n * Other Requests *\n * Request that will publish a cross signing identity.\n *\n * This uploads the public cross signing key triplet.\n */\nexport class UploadSigningKeysRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UploadSigningKeysRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        UploadSigningKeysRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UploadSigningKeysRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_uploadsigningkeysrequest_free(ptr, 0);\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `master_key`,\n     * `self_signing_key`, `user_signing_key`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_uploadsigningkeysrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `UploadSigningKeysRequest`.\n     * @param {string} body\n     */\n    constructor(body) {\n        const ret = wasm.uploadsigningkeysrequest_new(body);\n        this.__wbg_ptr = ret >>> 0;\n        UploadSigningKeysRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst UserDevicesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_userdevices_free(ptr >>> 0, 1));\n/**\n * A read only view over all devices belonging to a user.\n */\nexport class UserDevices {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UserDevices.prototype);\n        obj.__wbg_ptr = ptr;\n        UserDevicesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UserDevicesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_userdevices_free(ptr, 0);\n    }\n    /**\n     * Get the specific device with the given device ID.\n     * @param {DeviceId} device_id\n     * @returns {Device | undefined}\n     */\n    get(device_id) {\n        _assertClass(device_id, DeviceId);\n        const ret = wasm.userdevices_get(this.__wbg_ptr, device_id.__wbg_ptr);\n        return ret === 0 ? undefined : Device.__wrap(ret);\n    }\n    /**\n     * Returns true if there is at least one devices of this user\n     * that is considered to be verified, false otherwise.\n     *\n     * This won't consider your own device as verified, as your own\n     * device is always implicitly verified.\n     * @returns {boolean}\n     */\n    isAnyVerified() {\n        const ret = wasm.userdevices_isAnyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Array over all the device IDs of the user devices.\n     * @returns {Array<any>}\n     */\n    keys() {\n        const ret = wasm.userdevices_keys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Iterator over all the devices of the user devices.\n     * @returns {Array<any>}\n     */\n    devices() {\n        const ret = wasm.userdevices_devices(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst UserIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_userid_free(ptr >>> 0, 1));\n/**\n * A Matrix [user ID].\n *\n * [user ID]: https://spec.matrix.org/v1.2/appendices/#user-identifiers\n */\nexport class UserId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UserId.prototype);\n        obj.__wbg_ptr = ptr;\n        UserIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof UserId)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UserIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_userid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `UserId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.userid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        UserIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the user's localpart.\n     * @returns {string}\n     */\n    get localpart() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.userid_localpart(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the server name of the user ID.\n     * @returns {ServerName}\n     */\n    get serverName() {\n        const ret = wasm.userid_serverName(this.__wbg_ptr);\n        return ServerName.__wrap(ret);\n    }\n    /**\n     * Whether this user ID is a historical one.\n     *\n     * A historical user ID is one that doesn't conform to the latest\n     * specification of the user ID grammar but is still accepted\n     * because it was previously allowed.\n     * @returns {boolean}\n     */\n    isHistorical() {\n        const ret = wasm.userid_isHistorical(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Return the user ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.userid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Create a clone of this `UserId`.\n     *\n     * This can be useful when passing a `UserId` instance to methods such as\n     * {@link OlmMachine.updateTrackedUsers} which destroy the instance.\n     * @returns {UserId}\n     */\n    clone() {\n        const ret = wasm.userid_clone(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n}\n\nconst VerificationRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_verificationrequest_free(ptr >>> 0, 1));\n/**\n * An object controlling key verification requests.\n *\n * Interactive verification flows usually start with a verification\n * request, this object lets you send and reply to such a\n * verification request.\n *\n * After the initial handshake the verification flow transitions into\n * one of the verification methods.\n */\nexport class VerificationRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerificationRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        VerificationRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VerificationRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verificationrequest_free(ptr, 0);\n    }\n    /**\n     * Create an event content that can be sent as a room event to\n     * request verification from the other side. This should be used\n     * only for verifications of other users and it should be sent to\n     * a room we consider to be a DM with the other user.\n     * @param {UserId} own_user_id\n     * @param {DeviceId} own_device_id\n     * @param {UserId} other_user_id\n     * @param {any[] | null} [methods]\n     * @returns {string}\n     */\n    static request(own_user_id, own_device_id, other_user_id, methods) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            _assertClass(own_user_id, UserId);\n            _assertClass(own_device_id, DeviceId);\n            _assertClass(other_user_id, UserId);\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            const ret = wasm.verificationrequest_request(own_user_id.__wbg_ptr, own_device_id.__wbg_ptr, other_user_id.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Our own user id.\n     * @returns {UserId}\n     */\n    get ownUserId() {\n        const ret = wasm.verificationrequest_ownUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The ID of the other user that is participating in this\n     * verification request.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.verificationrequest_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The ID of the other device that is participating in this\n     * verification.\n     * @returns {DeviceId | undefined}\n     */\n    get otherDeviceId() {\n        const ret = wasm.verificationrequest_otherDeviceId(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the room ID if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.verificationrequest_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Get info about the cancellation if the verification request\n     * has been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    get cancelInfo() {\n        const ret = wasm.verificationrequest_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * Has the verification request been answered by another device?\n     * @returns {boolean}\n     */\n    isPassive() {\n        const ret = wasm.verificationrequest_isPassive(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the verification request ready to start a verification flow?\n     * @returns {boolean}\n     */\n    isReady() {\n        const ret = wasm.verificationrequest_isReady(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow timed out?\n     * @returns {boolean}\n     */\n    timedOut() {\n        const ret = wasm.verificationrequest_timedOut(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * The number of milliseconds remaining before this verification flow times\n     * out.\n     *\n     * Returns zero if the time has already passed.\n     * @returns {number}\n     */\n    timeRemainingMillis() {\n        const ret = wasm.verificationrequest_timeRemainingMillis(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the supported verification methods of the other side.\n     *\n     * Will be present only if the other side requested the\n     * verification or if we’re in the ready state.\n     *\n     * # Returns\n     *\n     * `undefined` if we do not yet know the supported methods; otherwise, an\n     * array of `VerificationMethod`s.\n     * @returns {any[] | undefined}\n     */\n    get theirSupportedMethods() {\n        const ret = wasm.verificationrequest_theirSupportedMethods(this.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get our own supported verification methods that we advertised.\n     *\n     * Will be present only we requested the verification or if we’re\n     * in the ready state.\n     * @returns {any[] | undefined}\n     */\n    get ourSupportedMethods() {\n        const ret = wasm.verificationrequest_ourSupportedMethods(this.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get the unique ID of this verification request.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.verificationrequest_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Is this a verification that is verifying one of our own\n     * devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.verificationrequest_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Did we initiate the verification request?\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.verificationrequest_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow that was started with this request\n     * finished?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.verificationrequest_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the current phase of this request.\n     *\n     * Returns a `VerificationRequestPhase`.\n     * @returns {VerificationRequestPhase}\n     */\n    phase() {\n        const ret = wasm.verificationrequest_phase(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * If this request has transitioned into a concrete verification\n     * flow (and not yet been completed or cancelled), returns a `Verification`\n     * object.\n     *\n     * Returns: a `Sas`, a `Qr`, or `undefined`.\n     * @returns {any}\n     */\n    getVerification() {\n        const ret = wasm.verificationrequest_getVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request.\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.verificationrequest_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n    /**\n     * Has the verification flow that was started with this request\n     * been cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.verificationrequest_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Accept the verification request signaling that our client\n     * supports the given verification methods.\n     *\n     * `methods` represents the methods that we should advertise as\n     * supported by us.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @param {any[]} methods\n     * @returns {any}\n     */\n    acceptWithMethods(methods) {\n        const ptr0 = passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.verificationrequest_acceptWithMethods(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Accept the verification request.\n     *\n     * This method will accept the request and signal that it\n     * supports the `m.sas.v1`, the `m.qr_code.show.v1`, and\n     * `m.reciprocate.v1` method.\n     *\n     * `m.qr_code.show.v1` will only be signaled if the `qrcode`\n     * feature is enabled. This feature is disabled by default. If\n     * it's enabled and QR code scanning should be supported or QR\n     * code showing shouldn't be supported the `accept_with_methods`\n     * method should be used instead.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @returns {any}\n     */\n    accept() {\n        const ret = wasm.verificationrequest_accept(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification request.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.verificationrequest_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Transition from this verification request into a SAS verification flow.\n     *\n     * Returns `Promise<[Sas, RoomMessageRequest|ToDeviceRequest] | undefined>`\n     * @returns {Promise<any>}\n     */\n    startSas() {\n        const ret = wasm.verificationrequest_startSas(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Generate a QR code that can be used by another client to start\n     * a QR code based verification.\n     *\n     * Returns a `Qr` or `undefined`.\n     * @returns {Promise<any>}\n     */\n    generateQrCode() {\n        const ret = wasm.verificationrequest_generateQrCode(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Start a QR code verification by providing a scanned QR code\n     * for this verification flow.\n     * @param {QrCodeScan} data\n     * @returns {Promise<any>}\n     */\n    scanQrCode(data) {\n        _assertClass(data, QrCodeScan);\n        const ret = wasm.verificationrequest_scanQrCode(this.__wbg_ptr, data.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst VersionsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_versions_free(ptr >>> 0, 1));\n/**\n * Object containing the versions of the Rust libraries we are using.\n */\nexport class Versions {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Versions.prototype);\n        obj.__wbg_ptr = ptr;\n        VersionsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VersionsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_versions_free(ptr, 0);\n    }\n    /**\n     * The version of the vodozemac crate.\n     * @returns {string}\n     */\n    get vodozemac() {\n        const ret = wasm.__wbg_get_versions_vodozemac(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The version of the matrix-sdk-crypto crate.\n     * @returns {string}\n     */\n    get matrix_sdk_crypto() {\n        const ret = wasm.__wbg_get_versions_matrix_sdk_crypto(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The Git commit hash of the crate's source tree at build time.\n     * @returns {string}\n     */\n    get git_sha() {\n        const ret = wasm.__wbg_get_versions_git_sha(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The build-time output of the `git describe` command of the source tree\n     * of crate.\n     * @returns {string}\n     */\n    get git_description() {\n        const ret = wasm.__wbg_get_versions_git_description(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nexport function __wbg_String_8f0eb39a4a4c2f66(arg0, arg1) {\n    const ret = String(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_Window_b0044ac7db258535(arg0) {\n    const ret = arg0.Window;\n    return ret;\n};\n\nexport function __wbg_WorkerGlobalScope_b74cefefc62a37da(arg0) {\n    const ret = arg0.WorkerGlobalScope;\n    return ret;\n};\n\nexport function __wbg_add_883d9432f9188ef2(arg0, arg1) {\n    const ret = arg0.add(arg1);\n    return ret;\n};\n\nexport function __wbg_add_9338901b80183e0f() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.add(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_at_7d852dd9f194d43e(arg0, arg1) {\n    const ret = arg0.at(arg1);\n    return ret;\n};\n\nexport function __wbg_backupkeys_new(arg0) {\n    const ret = BackupKeys.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_bound_55a8d08e0491e17a() { return handleError(function (arg0, arg1) {\n    const ret = IDBKeyRange.bound(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_bound_f2afc3766d4545cf() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = IDBKeyRange.bound(arg0, arg1, arg2 !== 0, arg3 !== 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_buffer_609cc3eee51ed158(arg0) {\n    const ret = arg0.buffer;\n    return ret;\n};\n\nexport function __wbg_call_672a4d21634d4a24() { return handleError(function (arg0, arg1) {\n    const ret = arg0.call(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_7cccdd69e0791ae2() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.call(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_833bed5770ea2041() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.call(arg1, arg2, arg3);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_b8adc8b1d0a0d8eb() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = arg0.call(arg1, arg2, arg3, arg4);\n    return ret;\n}, arguments) };\n\nexport function __wbg_clearTimeout_5a54f8841c30079a(arg0) {\n    const ret = clearTimeout(arg0);\n    return ret;\n};\n\nexport function __wbg_clear_f450db7eeb71163f() { return handleError(function (arg0) {\n    const ret = arg0.clear();\n    return ret;\n}, arguments) };\n\nexport function __wbg_close_26fc2e6856d8567a(arg0) {\n    arg0.close();\n};\n\nexport function __wbg_code_cfd8f6868bdaed9b(arg0) {\n    const ret = arg0.code;\n    return ret;\n};\n\nexport function __wbg_continue_c46c11d3dbe1b030() { return handleError(function (arg0) {\n    arg0.continue();\n}, arguments) };\n\nexport function __wbg_count_613cb921d67a4f26() { return handleError(function (arg0) {\n    const ret = arg0.count();\n    return ret;\n}, arguments) };\n\nexport function __wbg_count_ea1a2987dff7759e() { return handleError(function (arg0) {\n    const ret = arg0.count();\n    return ret;\n}, arguments) };\n\nexport function __wbg_createIndex_873ac48adc772309() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = arg0.createIndex(getStringFromWasm0(arg1, arg2), arg3, arg4);\n    return ret;\n}, arguments) };\n\nexport function __wbg_createIndex_fcfd513cf4581834() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.createIndex(getStringFromWasm0(arg1, arg2), arg3);\n    return ret;\n}, arguments) };\n\nexport function __wbg_createObjectStore_e566459f7161f82f() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.createObjectStore(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_crosssigningbootstraprequests_new(arg0) {\n    const ret = CrossSigningBootstrapRequests.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crosssigningkeyexport_new(arg0) {\n    const ret = CrossSigningKeyExport.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crosssigningstatus_new(arg0) {\n    const ret = CrossSigningStatus.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crypto_ed58b8e10a292839(arg0) {\n    const ret = arg0.crypto;\n    return ret;\n};\n\nexport function __wbg_debug_3cb59063b29f58c1(arg0) {\n    console.debug(arg0);\n};\n\nexport function __wbg_debug_f41e47509e8e4e36(arg0, arg1) {\n    arg0.debug(arg1);\n};\n\nexport function __wbg_decryptedroomevent_new(arg0) {\n    const ret = DecryptedRoomEvent.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_dehydrateddevice_new(arg0) {\n    const ret = DehydratedDevice.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_dehydrateddevicekey_new(arg0) {\n    const ret = DehydratedDeviceKey.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_deleteObjectStore_3f08ae00cd288224() { return handleError(function (arg0, arg1, arg2) {\n    arg0.deleteObjectStore(getStringFromWasm0(arg1, arg2));\n}, arguments) };\n\nexport function __wbg_delete_200677093b4cf756() { return handleError(function (arg0, arg1) {\n    const ret = arg0.delete(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_delete_2ecf7cf20900b3a2() { return handleError(function (arg0) {\n    const ret = arg0.delete();\n    return ret;\n}, arguments) };\n\nexport function __wbg_device_new(arg0) {\n    const ret = Device.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_deviceid_new(arg0) {\n    const ret = DeviceId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_devicekey_new(arg0) {\n    const ret = DeviceKey.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_devicekeyid_new(arg0) {\n    const ret = DeviceKeyId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_done_769e5ede4b31c67b(arg0) {\n    const ret = arg0.done;\n    return ret;\n};\n\nexport function __wbg_emoji_new(arg0) {\n    const ret = Emoji.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_encryptioninfo_new(arg0) {\n    const ret = EncryptionInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_entries_3265d4158b33e5dc(arg0) {\n    const ret = Object.entries(arg0);\n    return ret;\n};\n\nexport function __wbg_entries_c8a90a7ed73e84ce(arg0) {\n    const ret = arg0.entries();\n    return ret;\n};\n\nexport function __wbg_error_524f506f44df1645(arg0) {\n    console.error(arg0);\n};\n\nexport function __wbg_error_7534b8e9a36f1ab4(arg0, arg1) {\n    let deferred0_0;\n    let deferred0_1;\n    try {\n        deferred0_0 = arg0;\n        deferred0_1 = arg1;\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n    }\n};\n\nexport function __wbg_error_76286673af64a31f(arg0, arg1) {\n    arg0.error(arg1);\n};\n\nexport function __wbg_error_ff4ddaabdfc5dbb3() { return handleError(function (arg0) {\n    const ret = arg0.error;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_from_2a5d3e218e67aa85(arg0) {\n    const ret = Array.from(arg0);\n    return ret;\n};\n\nexport function __wbg_getAllKeys_b11d8835dc4be0e8() { return handleError(function (arg0) {\n    const ret = arg0.getAllKeys();\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_304e868beec2021f() { return handleError(function (arg0) {\n    const ret = arg0.getAll();\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_d1e60c13c0073374() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.getAll(arg1, arg2 >>> 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_e6903c610babcd42() { return handleError(function (arg0, arg1) {\n    const ret = arg0.getAll(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_getRandomValues_3d90134a348e46b3() { return handleError(function (arg0, arg1) {\n    globalThis.crypto.getRandomValues(getArrayU8FromWasm0(arg0, arg1));\n}, arguments) };\n\nexport function __wbg_getRandomValues_bcb4912f16000dc4() { return handleError(function (arg0, arg1) {\n    arg0.getRandomValues(arg1);\n}, arguments) };\n\nexport function __wbg_getTime_46267b1c24877e30(arg0) {\n    const ret = arg0.getTime();\n    return ret;\n};\n\nexport function __wbg_get_67b2ba62fc30de12() { return handleError(function (arg0, arg1) {\n    const ret = Reflect.get(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_8da03f81f6a1111e() { return handleError(function (arg0, arg1) {\n    const ret = arg0.get(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_93e54e8e166fbcab() { return handleError(function (arg0, arg1) {\n    const ret = arg0.get(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_b9b93047fe3cf45b(arg0, arg1) {\n    const ret = arg0[arg1 >>> 0];\n    return ret;\n};\n\nexport function __wbg_getwithrefkey_1dc361bd10053bfe(arg0, arg1) {\n    const ret = arg0[arg1];\n    return ret;\n};\n\nexport function __wbg_global_b6f5c73312f62313(arg0) {\n    const ret = arg0.global;\n    return ret;\n};\n\nexport function __wbg_inboundgroupsession_new(arg0) {\n    const ret = InboundGroupSession.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_index_e00ca5fff206ee3e() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.index(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_indexedDB_601ec26c63e333de() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_indexedDB_b1f49280282046f8() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_indexedDB_f6b47b0dc333fd2f() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_info_3b4be85e0a44d2af(arg0, arg1) {\n    arg0.info(arg1);\n};\n\nexport function __wbg_info_3daf2e093e091b66(arg0) {\n    console.info(arg0);\n};\n\nexport function __wbg_instanceof_ArrayBuffer_e14585432e3737fc(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof ArrayBuffer;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Map_f3469ce2244d2430(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Map;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Promise_935168b8f4b49db3(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Promise;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Uint8Array_17156bcf118086a9(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Uint8Array;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_isArray_a1eab7e0d067391b(arg0) {\n    const ret = Array.isArray(arg0);\n    return ret;\n};\n\nexport function __wbg_isSafeInteger_343e2beeeece1bb0(arg0) {\n    const ret = Number.isSafeInteger(arg0);\n    return ret;\n};\n\nexport function __wbg_item_c3c26b4103ad5aaf(arg0, arg1, arg2) {\n    const ret = arg1.item(arg2 >>> 0);\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_iterator_9a24c88df860dc65() {\n    const ret = Symbol.iterator;\n    return ret;\n};\n\nexport function __wbg_key_29fefecef430db96() { return handleError(function (arg0) {\n    const ret = arg0.key;\n    return ret;\n}, arguments) };\n\nexport function __wbg_keysbackuprequest_new(arg0) {\n    const ret = KeysBackupRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysclaimrequest_new(arg0) {\n    const ret = KeysClaimRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysqueryrequest_new(arg0) {\n    const ret = KeysQueryRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysuploadrequest_new(arg0) {\n    const ret = KeysUploadRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_length_238152a0aedbb6e7(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_length_a446193dc22c12f8(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_length_e2d2a49132c1b256(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_lowerBound_1872d19f5bcf83c6() { return handleError(function (arg0, arg1) {\n    const ret = IDBKeyRange.lowerBound(arg0, arg1 !== 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_maybesignature_new(arg0) {\n    const ret = MaybeSignature.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_megolmdecryptionerror_new(arg0) {\n    const ret = MegolmDecryptionError.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_message_5c5d919204d42400(arg0, arg1) {\n    const ret = arg1.message;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_msCrypto_0a36e2ec3a343d26(arg0) {\n    const ret = arg0.msCrypto;\n    return ret;\n};\n\nexport function __wbg_name_f2d27098bfd843e7(arg0, arg1) {\n    const ret = arg1.name;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_new_23a2665fac83c611(arg0, arg1) {\n    try {\n        var state0 = {a: arg0, b: arg1};\n        var cb0 = (arg0, arg1) => {\n            const a = state0.a;\n            state0.a = 0;\n            try {\n                return __wbg_adapter_788(a, state0.b, arg0, arg1);\n            } finally {\n                state0.a = a;\n            }\n        };\n        const ret = new Promise(cb0);\n        return ret;\n    } finally {\n        state0.a = state0.b = 0;\n    }\n};\n\nexport function __wbg_new_31a97dac4f10fab7(arg0) {\n    const ret = new Date(arg0);\n    return ret;\n};\n\nexport function __wbg_new_405e22f390576ce2() {\n    const ret = new Object();\n    return ret;\n};\n\nexport function __wbg_new_5e0be73521bc8c17() {\n    const ret = new Map();\n    return ret;\n};\n\nexport function __wbg_new_78feb108b6472713() {\n    const ret = new Array();\n    return ret;\n};\n\nexport function __wbg_new_7a91e41fe43b3c92(arg0) {\n    const ret = new Uint8ClampedArray(arg0);\n    return ret;\n};\n\nexport function __wbg_new_8a6f238a6ece86ea() {\n    const ret = new Error();\n    return ret;\n};\n\nexport function __wbg_new_a12002a7f91c75be(arg0) {\n    const ret = new Uint8Array(arg0);\n    return ret;\n};\n\nexport function __wbg_new_a239edaa1dc2968f(arg0) {\n    const ret = new Set(arg0);\n    return ret;\n};\n\nexport function __wbg_newnoargs_105ed471475aaf50(arg0, arg1) {\n    const ret = new Function(getStringFromWasm0(arg0, arg1));\n    return ret;\n};\n\nexport function __wbg_newwithbyteoffsetandlength_6d34787141015158(arg0, arg1, arg2) {\n    const ret = new Uint8ClampedArray(arg0, arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithbyteoffsetandlength_d97e637ebe145a9a(arg0, arg1, arg2) {\n    const ret = new Uint8Array(arg0, arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithlength_a381634e90c276d4(arg0) {\n    const ret = new Uint8Array(arg0 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithlength_ee8e1b95dea9d37c(arg0) {\n    const ret = new Uint8ClampedArray(arg0 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithmessage_baedba94f03976fd() { return handleError(function (arg0, arg1) {\n    const ret = new DOMException(getStringFromWasm0(arg0, arg1));\n    return ret;\n}, arguments) };\n\nexport function __wbg_next_25feadfc0913fea9(arg0) {\n    const ret = arg0.next;\n    return ret;\n};\n\nexport function __wbg_next_6574e1a8a62d1055() { return handleError(function (arg0) {\n    const ret = arg0.next();\n    return ret;\n}, arguments) };\n\nexport function __wbg_node_02999533c4ea02e3(arg0) {\n    const ret = arg0.node;\n    return ret;\n};\n\nexport function __wbg_now_2c95c9de01293173(arg0) {\n    const ret = arg0.now();\n    return ret;\n};\n\nexport function __wbg_now_807e54c39636c349() {\n    const ret = Date.now();\n    return ret;\n};\n\nexport function __wbg_objectStoreNames_9bb1ab04a7012aaf(arg0) {\n    const ret = arg0.objectStoreNames;\n    return ret;\n};\n\nexport function __wbg_objectStore_21878d46d25b64b6() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.objectStore(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_oldVersion_e8337811e52861c6(arg0) {\n    const ret = arg0.oldVersion;\n    return ret;\n};\n\nexport function __wbg_olmmachine_new(arg0) {\n    const ret = OlmMachine.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_openCursor_1adef2266972fb45() { return handleError(function (arg0) {\n    const ret = arg0.openCursor();\n    return ret;\n}, arguments) };\n\nexport function __wbg_openCursor_238e247d18bde2cd() { return handleError(function (arg0) {\n    const ret = arg0.openCursor();\n    return ret;\n}, arguments) };\n\nexport function __wbg_openCursor_f4b061aa6d804b93() { return handleError(function (arg0, arg1) {\n    const ret = arg0.openCursor(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_open_88b1390d99a7c691() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.open(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_open_e0c0b2993eb596e1() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.open(getStringFromWasm0(arg1, arg2), arg3 >>> 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_otheruseridentity_new(arg0) {\n    const ret = OtherUserIdentity.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_ownuseridentity_new(arg0) {\n    const ret = OwnUserIdentity.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_parse_def2e24ef1252aff() { return handleError(function (arg0, arg1) {\n    const ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n    return ret;\n}, arguments) };\n\nexport function __wbg_performance_7a3ffd0b17f663ad(arg0) {\n    const ret = arg0.performance;\n    return ret;\n};\n\nexport function __wbg_pickledinboundgroupsession_unwrap(arg0) {\n    const ret = PickledInboundGroupSession.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_pickledsession_unwrap(arg0) {\n    const ret = PickledSession.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_process_5c1d670bc53614b8(arg0) {\n    const ret = arg0.process;\n    return ret;\n};\n\nexport function __wbg_push_737cfc8c1432c2c6(arg0, arg1) {\n    const ret = arg0.push(arg1);\n    return ret;\n};\n\nexport function __wbg_put_066faa31a6a88f5b() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.put(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_putdehydrateddevicerequest_new(arg0) {\n    const ret = PutDehydratedDeviceRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_qr_new(arg0) {\n    const ret = Qr.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_queueMicrotask_97d92b4fcc8a61c5(arg0) {\n    queueMicrotask(arg0);\n};\n\nexport function __wbg_queueMicrotask_d3219def82552485(arg0) {\n    const ret = arg0.queueMicrotask;\n    return ret;\n};\n\nexport function __wbg_randomFillSync_ab2cfe79ebbf2740() { return handleError(function (arg0, arg1) {\n    arg0.randomFillSync(arg1);\n}, arguments) };\n\nexport function __wbg_readyState_4013cfdf4f22afb0(arg0) {\n    const ret = arg0.readyState;\n    return (__wbindgen_enum_IdbRequestReadyState.indexOf(ret) + 1 || 3) - 1;\n};\n\nexport function __wbg_rehydrateddevice_new(arg0) {\n    const ret = RehydratedDevice.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_require_79b1e9274cde3c87() { return handleError(function () {\n    const ret = module.require;\n    return ret;\n}, arguments) };\n\nexport function __wbg_resolve_4851785c9c5f573d(arg0) {\n    const ret = Promise.resolve(arg0);\n    return ret;\n};\n\nexport function __wbg_result_f29afabdf2c05826() { return handleError(function (arg0) {\n    const ret = arg0.result;\n    return ret;\n}, arguments) };\n\nexport function __wbg_roomid_unwrap(arg0) {\n    const ret = RoomId.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeycounts_new(arg0) {\n    const ret = RoomKeyCounts.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeyimportresult_new(arg0) {\n    const ret = RoomKeyImportResult.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeyinfo_new(arg0) {\n    const ret = RoomKeyInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeywithheldinfo_new(arg0) {\n    const ret = RoomKeyWithheldInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roommessagerequest_new(arg0) {\n    const ret = RoomMessageRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomsettings_new(arg0) {\n    const ret = RoomSettings.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_sas_new(arg0) {\n    const ret = Sas.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_secretsbundle_new(arg0) {\n    const ret = SecretsBundle.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_setTimeout_db2dbaeefb6f39c7() { return handleError(function (arg0, arg1) {\n    const ret = setTimeout(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_set_37837023f3d740e8(arg0, arg1, arg2) {\n    arg0[arg1 >>> 0] = arg2;\n};\n\nexport function __wbg_set_3f1d0b984ed272ed(arg0, arg1, arg2) {\n    arg0[arg1] = arg2;\n};\n\nexport function __wbg_set_65595bdd868b3009(arg0, arg1, arg2) {\n    arg0.set(arg1, arg2 >>> 0);\n};\n\nexport function __wbg_set_6775f73144c2ef27(arg0, arg1, arg2) {\n    arg0.set(arg1, arg2 >>> 0);\n};\n\nexport function __wbg_set_8fc6bf8a5b1071d1(arg0, arg1, arg2) {\n    const ret = arg0.set(arg1, arg2);\n    return ret;\n};\n\nexport function __wbg_setonabort_3bf4db6614fa98e9(arg0, arg1) {\n    arg0.onabort = arg1;\n};\n\nexport function __wbg_setonblocked_aebf64bd39f1eca8(arg0, arg1) {\n    arg0.onblocked = arg1;\n};\n\nexport function __wbg_setoncomplete_4d19df0dadb7c4d4(arg0, arg1) {\n    arg0.oncomplete = arg1;\n};\n\nexport function __wbg_setonerror_b0d9d723b8fddbbb(arg0, arg1) {\n    arg0.onerror = arg1;\n};\n\nexport function __wbg_setonerror_d7e3056cc6e56085(arg0, arg1) {\n    arg0.onerror = arg1;\n};\n\nexport function __wbg_setonsuccess_afa464ee777a396d(arg0, arg1) {\n    arg0.onsuccess = arg1;\n};\n\nexport function __wbg_setonupgradeneeded_fcf7ce4f2eb0cb5f(arg0, arg1) {\n    arg0.onupgradeneeded = arg1;\n};\n\nexport function __wbg_setonversionchange_6ee07fa49ee1e3a5(arg0, arg1) {\n    arg0.onversionchange = arg1;\n};\n\nexport function __wbg_setunique_dd24c422aa05df89(arg0, arg1) {\n    arg0.unique = arg1 !== 0;\n};\n\nexport function __wbg_signatures_new(arg0) {\n    const ret = Signatures.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_signatureuploadrequest_new(arg0) {\n    const ret = SignatureUploadRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_signatureverification_new(arg0) {\n    const ret = SignatureVerification.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_stack_0ed75d68575b0f3c(arg0, arg1) {\n    const ret = arg1.stack;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_static_accessor_GLOBAL_88a902d13a557d07() {\n    const ret = typeof global === 'undefined' ? null : global;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0() {\n    const ret = typeof globalThis === 'undefined' ? null : globalThis;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_SELF_37c5d418e4bf5819() {\n    const ret = typeof self === 'undefined' ? null : self;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_WINDOW_5de37043a91a9c40() {\n    const ret = typeof window === 'undefined' ? null : window;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_storehandle_new(arg0) {\n    const ret = StoreHandle.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_stringify_f7ed6987935b4a24() { return handleError(function (arg0) {\n    const ret = JSON.stringify(arg0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_subarray_aa9065fa9dc5df96(arg0, arg1, arg2) {\n    const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_target_0a62d9d79a2a1ede(arg0) {\n    const ret = arg0.target;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_then_44b73946d2fb3e7d(arg0, arg1) {\n    const ret = arg0.then(arg1);\n    return ret;\n};\n\nexport function __wbg_then_48b406749878a531(arg0, arg1, arg2) {\n    const ret = arg0.then(arg1, arg2);\n    return ret;\n};\n\nexport function __wbg_todevicerequest_new(arg0) {\n    const ret = ToDeviceRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_transaction_babc423936946a37() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.transaction(getStringFromWasm0(arg1, arg2), __wbindgen_enum_IdbTransactionMode[arg3]);\n    return ret;\n}, arguments) };\n\nexport function __wbg_transaction_d6d07c3c9963c49e() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.transaction(arg1, __wbindgen_enum_IdbTransactionMode[arg2]);\n    return ret;\n}, arguments) };\n\nexport function __wbg_transaction_e713aa7b07ccaedd(arg0) {\n    const ret = arg0.transaction;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_update_acd72607f506872a() { return handleError(function (arg0, arg1) {\n    const ret = arg0.update(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_userdevices_new(arg0) {\n    const ret = UserDevices.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_userid_new(arg0) {\n    const ret = UserId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_userid_unwrap(arg0) {\n    const ret = UserId.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_value_68c4e9a54bb7fd5e() { return handleError(function (arg0) {\n    const ret = arg0.value;\n    return ret;\n}, arguments) };\n\nexport function __wbg_value_cd1ffa7b1ab794f1(arg0) {\n    const ret = arg0.value;\n    return ret;\n};\n\nexport function __wbg_values_53465c57fc8cd691(arg0) {\n    const ret = arg0.values();\n    return ret;\n};\n\nexport function __wbg_verificationrequest_new(arg0) {\n    const ret = VerificationRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_version_a70a33e5bbc6d6db(arg0) {\n    const ret = arg0.version;\n    return ret;\n};\n\nexport function __wbg_versions_c71aa1626a93e0a1(arg0) {\n    const ret = arg0.versions;\n    return ret;\n};\n\nexport function __wbg_warn_4ca3906c248c47c4(arg0) {\n    console.warn(arg0);\n};\n\nexport function __wbg_warn_6ce7b8525f302b4c(arg0, arg1) {\n    arg0.warn(arg1);\n};\n\nexport function __wbindgen_as_number(arg0) {\n    const ret = +arg0;\n    return ret;\n};\n\nexport function __wbindgen_bigint_from_i64(arg0) {\n    const ret = arg0;\n    return ret;\n};\n\nexport function __wbindgen_bigint_from_u64(arg0) {\n    const ret = BigInt.asUintN(64, arg0);\n    return ret;\n};\n\nexport function __wbindgen_bigint_get_as_i64(arg0, arg1) {\n    const v = arg1;\n    const ret = typeof(v) === 'bigint' ? v : undefined;\n    getDataViewMemory0().setBigInt64(arg0 + 8 * 1, isLikeNone(ret) ? BigInt(0) : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_boolean_get(arg0) {\n    const v = arg0;\n    const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n    return ret;\n};\n\nexport function __wbindgen_cb_drop(arg0) {\n    const obj = arg0.original;\n    if (obj.cnt-- == 1) {\n        obj.a = 0;\n        return true;\n    }\n    const ret = false;\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper1066(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 30, __wbg_adapter_58);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper2247(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 401, __wbg_adapter_61);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper5526(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 401, __wbg_adapter_64);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper7042(arg0, arg1, arg2) {\n    const ret = makeClosure(arg0, arg1, 407, __wbg_adapter_67);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper7044(arg0, arg1, arg2) {\n    const ret = makeClosure(arg0, arg1, 407, __wbg_adapter_70);\n    return ret;\n};\n\nexport function __wbindgen_debug_string(arg0, arg1) {\n    const ret = debugString(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbindgen_error_new(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return ret;\n};\n\nexport function __wbindgen_in(arg0, arg1) {\n    const ret = arg0 in arg1;\n    return ret;\n};\n\nexport function __wbindgen_init_externref_table() {\n    const table = wasm.__wbindgen_export_4;\n    const offset = table.grow(4);\n    table.set(0, undefined);\n    table.set(offset + 0, undefined);\n    table.set(offset + 1, null);\n    table.set(offset + 2, true);\n    table.set(offset + 3, false);\n    ;\n};\n\nexport function __wbindgen_is_array(arg0) {\n    const ret = Array.isArray(arg0);\n    return ret;\n};\n\nexport function __wbindgen_is_bigint(arg0) {\n    const ret = typeof(arg0) === 'bigint';\n    return ret;\n};\n\nexport function __wbindgen_is_function(arg0) {\n    const ret = typeof(arg0) === 'function';\n    return ret;\n};\n\nexport function __wbindgen_is_null(arg0) {\n    const ret = arg0 === null;\n    return ret;\n};\n\nexport function __wbindgen_is_object(arg0) {\n    const val = arg0;\n    const ret = typeof(val) === 'object' && val !== null;\n    return ret;\n};\n\nexport function __wbindgen_is_string(arg0) {\n    const ret = typeof(arg0) === 'string';\n    return ret;\n};\n\nexport function __wbindgen_is_undefined(arg0) {\n    const ret = arg0 === undefined;\n    return ret;\n};\n\nexport function __wbindgen_jsval_eq(arg0, arg1) {\n    const ret = arg0 === arg1;\n    return ret;\n};\n\nexport function __wbindgen_jsval_loose_eq(arg0, arg1) {\n    const ret = arg0 == arg1;\n    return ret;\n};\n\nexport function __wbindgen_memory() {\n    const ret = wasm.memory;\n    return ret;\n};\n\nexport function __wbindgen_number_get(arg0, arg1) {\n    const obj = arg1;\n    const ret = typeof(obj) === 'number' ? obj : undefined;\n    getDataViewMemory0().setFloat64(arg0 + 8 * 1, isLikeNone(ret) ? 0 : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_number_new(arg0) {\n    const ret = arg0;\n    return ret;\n};\n\nexport function __wbindgen_string_get(arg0, arg1) {\n    const obj = arg1;\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return ret;\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_try_into_number(arg0) {\n    let result;\n    try { result = +arg0 } catch (e) { result = e }\n    const ret = result;\n    return ret;\n};\n\n","// Copyright 2024 The Matrix.org Foundation C.I.C.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// @ts-check\n\n/**\n * This is the entrypoint on non-node ESM environments.\n * `asyncLoad` will load the WASM module using a `fetch` call.\n */\n\nimport * as bindings from \"./pkg/matrix_sdk_crypto_wasm_bg.js\";\n\nconst moduleUrl = new URL(\"./pkg/matrix_sdk_crypto_wasm_bg.wasm\", import.meta.url);\n\n// Although we could simply instantiate the WASM at import time with a top-level `await`,\n// we avoid that, to make it easier for callers to delay loading the WASM (and instead\n// wait until `initAsync` is called). (Also, Safari 14 doesn't support top-level `await`.)\n//\n// However, having done so, there is no way to synchronously load the WASM if the user ends\n// up using the bindings before calling `initAsync` (unlike under Node.js), so we just throw\n// an error.\nbindings.__wbg_set_wasm(\n    new Proxy(\n        {},\n        {\n            get() {\n                throw new Error(\n                    \"@matrix-org/matrix-sdk-crypto-wasm was used before it was initialized. Call `initAsync` first.\",\n                );\n            },\n        },\n    ),\n);\n\n/**\n * Stores a promise of the `loadModuleAsync` call\n * @type {Promise<void> | null}\n */\nlet modPromise = null;\n\n/**\n * Loads and instantiates the WASM module asynchronously\n *\n * @returns {Promise<void>}\n */\nasync function loadModuleAsync() {\n    const { instance } = await WebAssembly.instantiateStreaming(fetch(moduleUrl), {\n        // @ts-expect-error: The bindings don't exactly match the 'ExportValue' type\n        \"./matrix_sdk_crypto_wasm_bg.js\": bindings,\n    });\n\n    bindings.__wbg_set_wasm(instance.exports);\n    // @ts-expect-error: Typescript doesn't know what the module exports are\n    instance.exports.__wbindgen_start();\n}\n\n/**\n * Load the WebAssembly module in the background, if it has not already been loaded.\n *\n * Returns a promise which will resolve once the other methods are ready.\n *\n * @returns {Promise<void>}\n */\nexport async function initAsync() {\n    if (!modPromise) modPromise = loadModuleAsync();\n    await modPromise;\n}\n\n// Re-export everything from the generated javascript wrappers\nexport * from \"./pkg/matrix_sdk_crypto_wasm_bg.js\";\n","/* Copyright 2015 Mark Haines\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'use strict';\n\nvar escaped = /[\\\\\\\"\\x00-\\x1F]/g;\nvar escapes = {};\nfor (var i = 0; i < 0x20; ++i) {\n    escapes[String.fromCharCode(i)] = (\n        '\\\\U' + ('0000' + i.toString(16)).slice(-4).toUpperCase()\n    );\n}\nescapes['\\b'] = '\\\\b';\nescapes['\\t'] = '\\\\t';\nescapes['\\n'] = '\\\\n';\nescapes['\\f'] = '\\\\f';\nescapes['\\r'] = '\\\\r';\nescapes['\\\"'] = '\\\\\\\"';\nescapes['\\\\'] = '\\\\\\\\';\n\nfunction escapeString(value) {\n    escaped.lastIndex = 0;\n    return value.replace(escaped, function(c) { return escapes[c]; });\n}\n\nfunction stringify(value) {\n    switch (typeof value) {\n        case 'string':\n            return '\"' + escapeString(value) + '\"';\n        case 'number':\n            return isFinite(value) ? value : 'null';\n        case 'boolean':\n            return value;\n        case 'object':\n            if (value === null) {\n                return 'null';\n            }\n            if (Array.isArray(value)) {\n                return stringifyArray(value);\n            }\n            return stringifyObject(value);\n        default:\n            throw new Error('Cannot stringify: ' + typeof value);\n    }\n}\n\nfunction stringifyArray(array) {\n    var sep = '[';\n    var result = '';\n    for (var i = 0; i < array.length; ++i) {\n        result += sep;\n        sep = ',';\n        result += stringify(array[i]);\n    }\n    if (sep != ',') {\n        return '[]';\n    } else {\n        return result + ']';\n    }\n}\n\nfunction stringifyObject(object) {\n    var sep = '{';\n    var result = '';\n    var keys = Object.keys(object);\n    keys.sort();\n    for (var i = 0; i < keys.length; ++i) {\n        var key = keys[i];\n        result += sep + '\"' + escapeString(key) + '\":';\n        sep = ',';\n        result += stringify(object[key]);\n    }\n    if (sep != ',') {\n        return '{}';\n    } else {\n        return result + '}';\n    }\n}\n\n/** */\nmodule.exports = {stringify: stringify};\n","import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport { CollectStrategy, EncryptionAlgorithm, EncryptionSettings, HistoryVisibility as RustHistoryVisibility, RoomId, UserId } from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport { EventType } from \"../@types/event.js\";\nimport { logger, LogSpan } from \"../logger.js\";\nimport { HistoryVisibility } from \"../@types/partials.js\";\nimport { logDuration } from \"../utils.js\";\nimport { KnownMembership } from \"../@types/membership.js\";\nimport { DeviceIsolationModeKind } from \"../crypto-api/index.js\";\n\n/**\n * RoomEncryptor: responsible for encrypting messages to a given room\n *\n * @internal\n */\nexport class RoomEncryptor {\n  /**\n   * @param olmMachine - The rust-sdk's OlmMachine\n   * @param keyClaimManager - Our KeyClaimManager, which manages the queue of one-time-key claim requests\n   * @param outgoingRequestManager - The OutgoingRequestManager, which manages the queue of outgoing requests.\n   * @param room - The room we want to encrypt for\n   * @param encryptionSettings - body of the m.room.encryption event currently in force in this room\n   */\n  constructor(olmMachine, keyClaimManager, outgoingRequestManager, room, encryptionSettings) {\n    this.olmMachine = olmMachine;\n    this.keyClaimManager = keyClaimManager;\n    this.outgoingRequestManager = outgoingRequestManager;\n    this.room = room;\n    this.encryptionSettings = encryptionSettings;\n    _defineProperty(this, \"prefixedLogger\", void 0);\n    /** whether the room members have been loaded and tracked for the first time */\n    _defineProperty(this, \"lazyLoadedMembersResolved\", false);\n    /**\n     * Ensures that there is only one encryption operation at a time for that room.\n     *\n     * An encryption operation is either a {@link prepareForEncryption} or an {@link encryptEvent} call.\n     */\n    _defineProperty(this, \"currentEncryptionPromise\", Promise.resolve());\n    this.prefixedLogger = logger.getChild(\"[\".concat(room.roomId, \" encryption]\"));\n\n    // start tracking devices for any users already known to be in this room.\n    // Do not load members here, would defeat lazy loading.\n    var members = room.getJoinedMembers();\n\n    // At this point just mark the known members as tracked, it might not be the full list of members\n    // because of lazy loading. This is fine, because we will get a member list update when sending a message for\n    // the first time, see `RoomEncryptor#ensureEncryptionSession`\n    this.olmMachine.updateTrackedUsers(members.map(u => new RustSdkCryptoJs.UserId(u.userId))).catch(e => this.prefixedLogger.error(\"Error initializing tracked users\", e));\n  }\n\n  /**\n   * Handle a new `m.room.encryption` event in this room\n   *\n   * @param config - The content of the encryption event\n   */\n  onCryptoEvent(config) {\n    if (JSON.stringify(this.encryptionSettings) != JSON.stringify(config)) {\n      // This should currently be unreachable, since the Rust SDK will reject any attempts to change config.\n      throw new Error(\"Cannot reconfigure an active RoomEncryptor\");\n    }\n  }\n\n  /**\n   * Handle a new `m.room.member` event in this room\n   *\n   * @param member - new membership state\n   */\n  onRoomMembership(member) {\n    if (member.membership == KnownMembership.Join || member.membership == KnownMembership.Invite && this.room.shouldEncryptForInvitedMembers()) {\n      // make sure we are tracking the deviceList for this user\n      this.olmMachine.updateTrackedUsers([new UserId(member.userId)]).catch(e => {\n        this.prefixedLogger.error(\"Unable to update tracked users\", e);\n      });\n    }\n\n    // TODO: handle leaves (including our own)\n  }\n\n  /**\n   * Prepare to encrypt events in this room.\n   *\n   * This ensures that we have a megolm session ready to use and that we have shared its key with all the devices\n   * in the room.\n   * @param globalBlacklistUnverifiedDevices - When `true`, and `deviceIsolationMode` is `AllDevicesIsolationMode`,\n   * will not send encrypted messages to unverified devices.\n   * Ignored when `deviceIsolationMode` is `OnlySignedDevicesIsolationMode`.\n   * @param deviceIsolationMode - The device isolation mode. See {@link DeviceIsolationMode}.\n   */\n  prepareForEncryption(globalBlacklistUnverifiedDevices, deviceIsolationMode) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // We consider a prepareForEncryption as an encryption promise as it will potentially share keys\n      // even if it doesn't send an event.\n      // Usually this is called when the user starts typing, so we want to make sure we have keys ready when the\n      // message is finally sent.\n      // If `encryptEvent` is invoked before `prepareForEncryption` has completed, the `encryptEvent` call will wait for\n      // `prepareForEncryption` to complete before executing.\n      // The part where `encryptEvent` shares the room key will then usually be a no-op as it was already performed by `prepareForEncryption`.\n      yield _this.encryptEvent(null, globalBlacklistUnverifiedDevices, deviceIsolationMode);\n    })();\n  }\n\n  /**\n   * Encrypt an event for this room, or prepare for encryption.\n   *\n   * This will ensure that we have a megolm session for this room, share it with the devices in the room, and\n   * then, if an event is provided, encrypt it using the session.\n   *\n   * @param event - Event to be encrypted, or null if only preparing for encryption (in which case we will pre-share the room key).\n   * @param globalBlacklistUnverifiedDevices - When `true`, and `deviceIsolationMode` is `AllDevicesIsolationMode`,\n   * will not send encrypted messages to unverified devices.\n   * Ignored when `deviceIsolationMode` is `OnlySignedDevicesIsolationMode`.\n   * @param deviceIsolationMode - The device isolation mode. See {@link DeviceIsolationMode}.\n   */\n  encryptEvent(event, globalBlacklistUnverifiedDevices, deviceIsolationMode) {\n    var _event$getTxnId,\n      _this2 = this;\n    var logger = new LogSpan(this.prefixedLogger, event ? (_event$getTxnId = event.getTxnId()) !== null && _event$getTxnId !== void 0 ? _event$getTxnId : \"\" : \"prepareForEncryption\");\n    // Ensure order of encryption to avoid message ordering issues, as the scheduler only ensures\n    // events order after they have been encrypted.\n    var prom = this.currentEncryptionPromise.catch(() => {\n      // Any errors in the previous call will have been reported already, so there is nothing to do here.\n      // we just throw away the error and start anew.\n    }).then(/*#__PURE__*/_asyncToGenerator(function* () {\n      yield logDuration(logger, \"ensureEncryptionSession\", /*#__PURE__*/_asyncToGenerator(function* () {\n        yield _this2.ensureEncryptionSession(logger, globalBlacklistUnverifiedDevices, deviceIsolationMode);\n      }));\n      if (event) {\n        yield logDuration(logger, \"encryptEventInner\", /*#__PURE__*/_asyncToGenerator(function* () {\n          yield _this2.encryptEventInner(logger, event);\n        }));\n      }\n    }));\n    this.currentEncryptionPromise = prom;\n    return prom;\n  }\n\n  /**\n   * Prepare to encrypt events in this room.\n   *\n   * This ensures that we have a megolm session ready to use and that we have shared its key with all the devices\n   * in the room.\n   *\n   * @param logger - a place to write diagnostics to\n   * @param globalBlacklistUnverifiedDevices - When `true`, and `deviceIsolationMode` is `AllDevicesIsolationMode`,\n   * will not send encrypted messages to unverified devices.\n   * Ignored when `deviceIsolationMode` is `OnlySignedDevicesIsolationMode`.\n   * @param deviceIsolationMode - The device isolation mode. See {@link DeviceIsolationMode}.\n   */\n  ensureEncryptionSession(logger, globalBlacklistUnverifiedDevices, deviceIsolationMode) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (_this3.encryptionSettings.algorithm !== \"m.megolm.v1.aes-sha2\") {\n        throw new Error(\"Cannot encrypt in \".concat(_this3.room.roomId, \" for unsupported algorithm '\").concat(_this3.encryptionSettings.algorithm, \"'\"));\n      }\n      logger.debug(\"Starting encryption\");\n      var members = yield _this3.room.getEncryptionTargetMembers();\n\n      // If this is the first time we are sending a message to the room, we may not yet have seen all the members\n      // (so the Crypto SDK might not have a device list for them). So, if this is the first time we are encrypting\n      // for this room, give the SDK the full list of members, to be on the safe side.\n      //\n      // This could end up being racy (if two calls to ensureEncryptionSession happen at the same time), but that's\n      // not a particular problem, since `OlmMachine.updateTrackedUsers` just adds any users that weren't already tracked.\n      if (!_this3.lazyLoadedMembersResolved) {\n        yield logDuration(_this3.prefixedLogger, \"loadMembersIfNeeded: updateTrackedUsers\", /*#__PURE__*/_asyncToGenerator(function* () {\n          yield _this3.olmMachine.updateTrackedUsers(members.map(u => new RustSdkCryptoJs.UserId(u.userId)));\n        }));\n        logger.debug(\"Updated tracked users\");\n        _this3.lazyLoadedMembersResolved = true;\n\n        // Query keys in case we don't have them for newly tracked members.\n        // It's important after loading members for the first time, as likely most of them won't be\n        // known yet and will be unable to decrypt messages despite being in the room for long.\n        // This must be done before ensuring sessions. If not the devices of these users are not\n        // known yet and will not get the room key.\n        // We don't have API to only get the keys queries related to this member list, so we just\n        // process the pending requests from the olmMachine. (usually these are processed\n        // at the end of the sync, but we can't wait for that).\n        // XXX future improvement process only KeysQueryRequests for the users that have never been queried.\n        logger.debug(\"Processing outgoing requests\");\n        yield logDuration(_this3.prefixedLogger, \"doProcessOutgoingRequests\", /*#__PURE__*/_asyncToGenerator(function* () {\n          yield _this3.outgoingRequestManager.doProcessOutgoingRequests();\n        }));\n      } else {\n        // If members are already loaded it's less critical to await on key queries.\n        // We might still want to trigger a processOutgoingRequests here.\n        // The call to `ensureSessionsForUsers` below will wait a bit on in-flight key queries we are\n        // interested in. If a sync handling happens in the meantime, and some new members are added to the room\n        // or have new devices it would give us a chance to query them before sending.\n        // It's less critical due to the racy nature of this process.\n        logger.debug(\"Processing outgoing requests in background\");\n        _this3.outgoingRequestManager.doProcessOutgoingRequests();\n      }\n      logger.debug(\"Encrypting for users (shouldEncryptForInvitedMembers: \".concat(_this3.room.shouldEncryptForInvitedMembers(), \"):\"), members.map(u => \"\".concat(u.userId, \" (\").concat(u.membership, \")\")));\n      var userList = members.map(u => new UserId(u.userId));\n      yield logDuration(_this3.prefixedLogger, \"ensureSessionsForUsers\", /*#__PURE__*/_asyncToGenerator(function* () {\n        yield _this3.keyClaimManager.ensureSessionsForUsers(logger, userList);\n      }));\n      var rustEncryptionSettings = new EncryptionSettings();\n      rustEncryptionSettings.historyVisibility = toRustHistoryVisibility(_this3.room.getHistoryVisibility());\n\n      // We only support megolm\n      rustEncryptionSettings.algorithm = EncryptionAlgorithm.MegolmV1AesSha2;\n\n      // We need to convert the rotation period from milliseconds to microseconds\n      // See https://spec.matrix.org/v1.8/client-server-api/#mroomencryption and\n      // https://matrix-org.github.io/matrix-rust-sdk-crypto-wasm/classes/EncryptionSettings.html#rotationPeriod\n      if (typeof _this3.encryptionSettings.rotation_period_ms === \"number\") {\n        rustEncryptionSettings.rotationPeriod = BigInt(_this3.encryptionSettings.rotation_period_ms * 1000);\n      }\n      if (typeof _this3.encryptionSettings.rotation_period_msgs === \"number\") {\n        rustEncryptionSettings.rotationPeriodMessages = BigInt(_this3.encryptionSettings.rotation_period_msgs);\n      }\n      switch (deviceIsolationMode.kind) {\n        case DeviceIsolationModeKind.AllDevicesIsolationMode:\n          {\n            var _this3$room$getBlackl;\n            // When this.room.getBlacklistUnverifiedDevices() === null, the global settings should be used\n            // See Room#getBlacklistUnverifiedDevices\n            var onlyAllowTrustedDevices = (_this3$room$getBlackl = _this3.room.getBlacklistUnverifiedDevices()) !== null && _this3$room$getBlackl !== void 0 ? _this3$room$getBlackl : globalBlacklistUnverifiedDevices;\n            rustEncryptionSettings.sharingStrategy = CollectStrategy.deviceBasedStrategy(onlyAllowTrustedDevices, deviceIsolationMode.errorOnVerifiedUserProblems);\n          }\n          break;\n        case DeviceIsolationModeKind.OnlySignedDevicesIsolationMode:\n          rustEncryptionSettings.sharingStrategy = CollectStrategy.identityBasedStrategy();\n          break;\n      }\n      yield logDuration(_this3.prefixedLogger, \"shareRoomKey\", /*#__PURE__*/_asyncToGenerator(function* () {\n        var shareMessages = yield _this3.olmMachine.shareRoomKey(new RoomId(_this3.room.roomId),\n        // safe to pass without cloning, as it's not reused here (before or after)\n        userList, rustEncryptionSettings);\n        if (shareMessages) {\n          for (var m of shareMessages) {\n            yield _this3.outgoingRequestManager.outgoingRequestProcessor.makeOutgoingRequest(m);\n          }\n        }\n      }));\n    })();\n  }\n\n  /**\n   * Discard any existing group session for this room\n   */\n  forceDiscardSession() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      var r = yield _this4.olmMachine.invalidateGroupSession(new RoomId(_this4.room.roomId));\n      if (r) {\n        _this4.prefixedLogger.info(\"Discarded existing group session\");\n      }\n    })();\n  }\n  encryptEventInner(logger, event) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      logger.debug(\"Encrypting actual message content\");\n      var encryptedContent = yield _this5.olmMachine.encryptRoomEvent(new RoomId(_this5.room.roomId), event.getType(), JSON.stringify(event.getContent()));\n      event.makeEncrypted(EventType.RoomMessageEncrypted, JSON.parse(encryptedContent), _this5.olmMachine.identityKeys.curve25519.toBase64(), _this5.olmMachine.identityKeys.ed25519.toBase64());\n      logger.debug(\"Encrypted event successfully\");\n    })();\n  }\n}\n\n/**\n * Convert a HistoryVisibility to a RustHistoryVisibility\n * @param visibility - HistoryVisibility enum\n * @returns a RustHistoryVisibility enum\n */\nexport function toRustHistoryVisibility(visibility) {\n  switch (visibility) {\n    case HistoryVisibility.Invited:\n      return RustHistoryVisibility.Invited;\n    case HistoryVisibility.Joined:\n      return RustHistoryVisibility.Joined;\n    case HistoryVisibility.Shared:\n      return RustHistoryVisibility.Shared;\n    case HistoryVisibility.WorldReadable:\n      return RustHistoryVisibility.WorldReadable;\n  }\n}\n//# sourceMappingURL=RoomEncryptor.js.map","import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n/*\nCopyright 2024 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport { encodeUri } from \"../utils.js\";\nimport { Method } from \"../http-api/index.js\";\nimport { decodeBase64 } from \"../base64.js\";\nimport { CryptoEvent } from \"../crypto-api/index.js\";\nimport { TypedEventEmitter } from \"../models/typed-event-emitter.js\";\n\n/**\n * The response body of `GET /_matrix/client/unstable/org.matrix.msc3814.v1/dehydrated_device`.\n */\n\n/**\n * The response body of `POST /_matrix/client/unstable/org.matrix.msc3814.v1/dehydrated_device/events`.\n */\n\n/**\n * The unstable URL prefix for dehydrated device endpoints\n */\nexport var UnstablePrefix = \"/_matrix/client/unstable/org.matrix.msc3814.v1\";\n/**\n * The name used for the dehydration key in Secret Storage\n */\nvar SECRET_STORAGE_NAME = \"org.matrix.msc3814\";\n\n/**\n * The interval between creating dehydrated devices. (one week)\n */\nvar DEHYDRATION_INTERVAL = 7 * 24 * 60 * 60 * 1000;\n\n/**\n * Manages dehydrated devices\n *\n * We have one of these per `RustCrypto`.  It's responsible for\n *\n * * determining server support for dehydrated devices\n * * creating new dehydrated devices when requested, including periodically\n *   replacing the dehydrated device with a new one\n * * rehydrating a device when requested, and when present\n *\n * @internal\n */\nexport class DehydratedDeviceManager extends TypedEventEmitter {\n  constructor(logger, olmMachine, http, outgoingRequestProcessor, secretStorage) {\n    super();\n    this.logger = logger;\n    this.olmMachine = olmMachine;\n    this.http = http;\n    this.outgoingRequestProcessor = outgoingRequestProcessor;\n    this.secretStorage = secretStorage;\n    /** the ID of the interval for periodically replacing the dehydrated device */\n    _defineProperty(this, \"intervalId\", void 0);\n  }\n  cacheKey(key) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.olmMachine.dehydratedDevices().saveDehydratedDeviceKey(key);\n      _this.emit(CryptoEvent.DehydrationKeyCached);\n    })();\n  }\n\n  /**\n   * Return whether the server supports dehydrated devices.\n   */\n  isSupported() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // call the endpoint to get a dehydrated device.  If it returns an\n      // M_UNRECOGNIZED error, then dehydration is unsupported.  If it returns\n      // a successful response, or an M_NOT_FOUND, then dehydration is supported.\n      // Any other exceptions are passed through.\n      try {\n        yield _this2.http.authedRequest(Method.Get, \"/dehydrated_device\", undefined, undefined, {\n          prefix: UnstablePrefix\n        });\n      } catch (error) {\n        var err = error;\n        if (err.errcode === \"M_UNRECOGNIZED\") {\n          return false;\n        } else if (err.errcode === \"M_NOT_FOUND\") {\n          return true;\n        }\n        throw error;\n      }\n      return true;\n    })();\n  }\n\n  /**\n   * Start using device dehydration.\n   *\n   * - Rehydrates a dehydrated device, if one is available and `opts.rehydrate`\n   *   is `true`.\n   * - Creates a new dehydration key, if necessary, and stores it in Secret\n   *   Storage.\n   *   - If `opts.createNewKey` is set to true, always creates a new key.\n   *   - If a dehydration key is not available, creates a new one.\n   * - Creates a new dehydrated device, and schedules periodically creating\n   *   new dehydrated devices.\n   *\n   * @param opts - options for device dehydration. For backwards compatibility\n   *     with old code, a boolean can be given here, which will be treated as\n   *     the `createNewKey` option. However, this is deprecated.\n   */\n  start() {\n    var _arguments = arguments,\n      _this3 = this;\n    return _asyncToGenerator(function* () {\n      var opts = _arguments.length > 0 && _arguments[0] !== undefined ? _arguments[0] : {};\n      if (typeof opts === \"boolean\") {\n        opts = {\n          createNewKey: opts\n        };\n      }\n      if (opts.onlyIfKeyCached && !(yield _this3.olmMachine.dehydratedDevices().getDehydratedDeviceKey())) {\n        return;\n      }\n      _this3.stop();\n      if (opts.rehydrate !== false) {\n        try {\n          yield _this3.rehydrateDeviceIfAvailable();\n        } catch (e) {\n          // If rehydration fails, there isn't much we can do about it.  Log\n          // the error, and create a new device.\n          _this3.logger.info(\"dehydration: Error rehydrating device:\", e);\n          _this3.emit(CryptoEvent.RehydrationError, e.message);\n        }\n      }\n      if (opts.createNewKey) {\n        yield _this3.resetKey();\n      }\n      yield _this3.scheduleDeviceDehydration();\n    })();\n  }\n\n  /**\n   * Return whether the dehydration key is stored in Secret Storage.\n   */\n  isKeyStored() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return Boolean(yield _this4.secretStorage.isStored(SECRET_STORAGE_NAME));\n    })();\n  }\n\n  /**\n   * Reset the dehydration key.\n   *\n   * Creates a new key and stores it in secret storage.\n   *\n   * @returns The newly-generated key.\n   */\n  resetKey() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      var key = RustSdkCryptoJs.DehydratedDeviceKey.createRandomKey();\n      yield _this5.secretStorage.store(SECRET_STORAGE_NAME, key.toBase64());\n      // Also cache it in the rust SDK's crypto store.\n      yield _this5.cacheKey(key);\n      return key;\n    })();\n  }\n\n  /**\n   * Get and cache the encryption key from secret storage.\n   *\n   * If `create` is `true`, creates a new key if no existing key is present.\n   *\n   * @returns the key, if available, or `null` if no key is available\n   */\n  getKey(create) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      var cachedKey = yield _this6.olmMachine.dehydratedDevices().getDehydratedDeviceKey();\n      if (cachedKey) return cachedKey;\n      var keyB64 = yield _this6.secretStorage.get(SECRET_STORAGE_NAME);\n      if (keyB64 === undefined) {\n        if (!create) {\n          return null;\n        }\n        return yield _this6.resetKey();\n      }\n\n      // We successfully found the key in secret storage: decode it, and cache it in\n      // the rust SDK's crypto store.\n      var bytes = decodeBase64(keyB64);\n      try {\n        var key = RustSdkCryptoJs.DehydratedDeviceKey.createKeyFromArray(bytes);\n        yield _this6.cacheKey(key);\n        return key;\n      } finally {\n        bytes.fill(0);\n      }\n    })();\n  }\n\n  /**\n   * Rehydrate the dehydrated device stored on the server.\n   *\n   * Checks if there is a dehydrated device on the server.  If so, rehydrates\n   * the device and processes the to-device events.\n   *\n   * Returns whether or not a dehydrated device was found.\n   */\n  rehydrateDeviceIfAvailable() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      var key = yield _this7.getKey(false);\n      if (!key) {\n        return false;\n      }\n      var dehydratedDeviceResp;\n      try {\n        dehydratedDeviceResp = yield _this7.http.authedRequest(Method.Get, \"/dehydrated_device\", undefined, undefined, {\n          prefix: UnstablePrefix\n        });\n      } catch (error) {\n        var err = error;\n        // We ignore M_NOT_FOUND (there is no dehydrated device, so nothing\n        // us to do) and M_UNRECOGNIZED (the server does not understand the\n        // endpoint).  We pass through any other errors.\n        if (err.errcode === \"M_NOT_FOUND\" || err.errcode === \"M_UNRECOGNIZED\") {\n          _this7.logger.info(\"dehydration: No dehydrated device\");\n          return false;\n        }\n        throw err;\n      }\n      _this7.logger.info(\"dehydration: dehydrated device found\");\n      _this7.emit(CryptoEvent.RehydrationStarted);\n      var rehydratedDevice = yield _this7.olmMachine.dehydratedDevices().rehydrate(key, new RustSdkCryptoJs.DeviceId(dehydratedDeviceResp.device_id), JSON.stringify(dehydratedDeviceResp.device_data));\n      _this7.logger.info(\"dehydration: device rehydrated\");\n      var nextBatch = undefined;\n      var toDeviceCount = 0;\n      var roomKeyCount = 0;\n      var path = encodeUri(\"/dehydrated_device/$device_id/events\", {\n        $device_id: dehydratedDeviceResp.device_id\n      });\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        var eventResp = yield _this7.http.authedRequest(Method.Post, path, undefined, nextBatch ? {\n          next_batch: nextBatch\n        } : {}, {\n          prefix: UnstablePrefix\n        });\n        if (eventResp.events.length === 0) {\n          break;\n        }\n        toDeviceCount += eventResp.events.length;\n        nextBatch = eventResp.next_batch;\n        var roomKeyInfos = yield rehydratedDevice.receiveEvents(JSON.stringify(eventResp.events));\n        roomKeyCount += roomKeyInfos.length;\n        _this7.emit(CryptoEvent.RehydrationProgress, roomKeyCount, toDeviceCount);\n      }\n      _this7.logger.info(\"dehydration: received \".concat(roomKeyCount, \" room keys from \").concat(toDeviceCount, \" to-device events\"));\n      _this7.emit(CryptoEvent.RehydrationCompleted);\n      return true;\n    })();\n  }\n\n  /**\n   * Creates and uploads a new dehydrated device.\n   *\n   * Creates and stores a new key in secret storage if none is available.\n   */\n  createAndUploadDehydratedDevice() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      var key = yield _this8.getKey(true);\n      var dehydratedDevice = yield _this8.olmMachine.dehydratedDevices().create();\n      _this8.emit(CryptoEvent.DehydratedDeviceCreated);\n      var request = yield dehydratedDevice.keysForUpload(\"Dehydrated device\", key);\n      yield _this8.outgoingRequestProcessor.makeOutgoingRequest(request);\n      _this8.emit(CryptoEvent.DehydratedDeviceUploaded);\n      _this8.logger.info(\"dehydration: uploaded device\");\n    })();\n  }\n\n  /**\n   * Schedule periodic creation of dehydrated devices.\n   */\n  scheduleDeviceDehydration() {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      // cancel any previously-scheduled tasks\n      _this9.stop();\n      yield _this9.createAndUploadDehydratedDevice();\n      _this9.intervalId = setInterval(() => {\n        _this9.createAndUploadDehydratedDevice().catch(error => {\n          _this9.emit(CryptoEvent.DehydratedDeviceRotationError, error.message);\n          _this9.logger.error(\"Error creating dehydrated device:\", error);\n        });\n      }, DEHYDRATION_INTERVAL);\n    })();\n  }\n\n  /**\n   * Stop the dehydrated device manager.\n   *\n   * Cancels any scheduled dehydration tasks.\n   */\n  stop() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n      this.intervalId = undefined;\n    }\n  }\n\n  /**\n   * Delete the current dehydrated device and stop the dehydrated device manager.\n   */\n  delete() {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      _this10.stop();\n      try {\n        yield _this10.http.authedRequest(Method.Delete, \"/dehydrated_device\", undefined, {}, {\n          prefix: UnstablePrefix\n        });\n      } catch (error) {\n        var err = error;\n        // If dehydrated devices aren't supported, or no dehydrated device\n        // is found, we don't consider it an error, because we we'll end up\n        // with no dehydrated device.\n        if (err.errcode === \"M_UNRECOGNIZED\") {\n          return;\n        } else if (err.errcode === \"M_NOT_FOUND\") {\n          return;\n        }\n        throw error;\n      }\n    })();\n  }\n}\n\n/**\n * The events fired by the DehydratedDeviceManager\n * @internal\n */\n\n/**\n * A map of the {@link DehydratedDeviceEvents} fired by the {@link DehydratedDeviceManager} and their payloads.\n * @internal\n */\n//# sourceMappingURL=DehydratedDeviceManager.js.map","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { KeysBackupRequest, KeysClaimRequest, KeysQueryRequest, KeysUploadRequest, PutDehydratedDeviceRequest, RoomMessageRequest, SignatureUploadRequest, ToDeviceRequest, UploadSigningKeysRequest } from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport { logger } from \"../logger.js\";\nimport { calculateRetryBackoff, Method } from \"../http-api/index.js\";\nimport { logDuration, sleep } from \"../utils.js\";\nimport { ToDeviceMessageId } from \"../@types/event.js\";\nimport { UnstablePrefix as DehydrationUnstablePrefix } from \"./DehydratedDeviceManager.js\";\n\n/**\n * OutgoingRequestManager: turns `OutgoingRequest`s from the rust sdk into HTTP requests\n *\n * We have one of these per `RustCrypto` (and hence per `MatrixClient`), not that it does anything terribly complicated.\n * It's responsible for:\n *\n *   * holding the reference to the `MatrixHttpApi`\n *   * turning `OutgoingRequest`s from the rust backend into HTTP requests, and sending them\n *   * sending the results of such requests back to the rust backend.\n *\n * @internal\n */\nexport class OutgoingRequestProcessor {\n  constructor(olmMachine, http) {\n    this.olmMachine = olmMachine;\n    this.http = http;\n  }\n  makeOutgoingRequest(msg, uiaCallback) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var resp;\n\n      /* refer https://docs.rs/matrix-sdk-crypto/0.6.0/matrix_sdk_crypto/requests/enum.OutgoingRequests.html\n       * for the complete list of request types\n       */\n      if (msg instanceof KeysUploadRequest) {\n        resp = yield _this.requestWithRetry(Method.Post, \"/_matrix/client/v3/keys/upload\", {}, msg.body);\n      } else if (msg instanceof KeysQueryRequest) {\n        resp = yield _this.requestWithRetry(Method.Post, \"/_matrix/client/v3/keys/query\", {}, msg.body);\n      } else if (msg instanceof KeysClaimRequest) {\n        resp = yield _this.requestWithRetry(Method.Post, \"/_matrix/client/v3/keys/claim\", {}, msg.body);\n      } else if (msg instanceof SignatureUploadRequest) {\n        resp = yield _this.requestWithRetry(Method.Post, \"/_matrix/client/v3/keys/signatures/upload\", {}, msg.body);\n      } else if (msg instanceof KeysBackupRequest) {\n        resp = yield _this.requestWithRetry(Method.Put, \"/_matrix/client/v3/room_keys/keys\", {\n          version: msg.version\n        }, msg.body);\n      } else if (msg instanceof ToDeviceRequest) {\n        resp = yield _this.sendToDeviceRequest(msg);\n      } else if (msg instanceof RoomMessageRequest) {\n        var path = \"/_matrix/client/v3/rooms/\".concat(encodeURIComponent(msg.room_id), \"/send/\") + \"\".concat(encodeURIComponent(msg.event_type), \"/\").concat(encodeURIComponent(msg.txn_id));\n        resp = yield _this.requestWithRetry(Method.Put, path, {}, msg.body);\n      } else if (msg instanceof UploadSigningKeysRequest) {\n        yield _this.makeRequestWithUIA(Method.Post, \"/_matrix/client/v3/keys/device_signing/upload\", {}, msg.body, uiaCallback);\n        // SigningKeysUploadRequest does not implement OutgoingRequest and does not need to be marked as sent.\n        return;\n      } else if (msg instanceof PutDehydratedDeviceRequest) {\n        var _path = DehydrationUnstablePrefix + \"/dehydrated_device\";\n        yield _this.rawJsonRequest(Method.Put, _path, {}, msg.body);\n        // PutDehydratedDeviceRequest does not implement OutgoingRequest and does not need to be marked as sent.\n        return;\n      } else {\n        logger.warn(\"Unsupported outgoing message\", Object.getPrototypeOf(msg));\n        resp = \"\";\n      }\n      if (msg.id) {\n        try {\n          yield logDuration(logger, \"Mark Request as sent \".concat(msg.type), /*#__PURE__*/_asyncToGenerator(function* () {\n            yield _this.olmMachine.markRequestAsSent(msg.id, msg.type, resp);\n          }));\n        } catch (e) {\n          // Ignore errors which are caused by the olmMachine having been freed. The exact error message depends\n          // on whether we are using a release or develop build of rust-sdk-crypto-wasm.\n          if (e instanceof Error && (e.message === \"Attempt to use a moved value\" || e.message === \"null pointer passed to rust\")) {\n            logger.log(\"Ignoring error '\".concat(e.message, \"': client is likely shutting down\"));\n          } else {\n            throw e;\n          }\n        }\n      } else {\n        logger.trace(\"Outgoing request type:\".concat(msg.type, \" does not have an ID\"));\n      }\n    })();\n  }\n\n  /**\n   * Send the HTTP request for a `ToDeviceRequest`\n   *\n   * @param request - request to send\n   * @returns JSON-serialized body of the response, if successful\n   */\n  sendToDeviceRequest(request) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // a bit of extra logging, to help trace to-device messages through the system\n      var parsedBody = JSON.parse(request.body);\n      var messageList = [];\n      for (var [userId, perUserMessages] of Object.entries(parsedBody.messages)) {\n        for (var [deviceId, message] of Object.entries(perUserMessages)) {\n          messageList.push(\"\".concat(userId, \"/\").concat(deviceId, \" (msgid \").concat(message[ToDeviceMessageId], \")\"));\n        }\n      }\n      logger.info(\"Sending batch of to-device messages. type=\".concat(request.event_type, \" txnid=\").concat(request.txn_id), messageList);\n      var path = \"/_matrix/client/v3/sendToDevice/\".concat(encodeURIComponent(request.event_type), \"/\") + encodeURIComponent(request.txn_id);\n      return yield _this2.requestWithRetry(Method.Put, path, {}, request.body);\n    })();\n  }\n  makeRequestWithUIA(method, path, queryParams, body, uiaCallback) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (!uiaCallback) {\n        return yield _this3.requestWithRetry(method, path, queryParams, body);\n      }\n      var parsedBody = JSON.parse(body);\n      var makeRequest = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (auth) {\n          var newBody = _objectSpread({}, parsedBody);\n          if (auth !== null) {\n            newBody.auth = auth;\n          }\n          var resp = yield _this3.requestWithRetry(method, path, queryParams, JSON.stringify(newBody));\n          return JSON.parse(resp);\n        });\n        return function makeRequest(_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n      var resp = yield uiaCallback(makeRequest);\n      return JSON.stringify(resp);\n    })();\n  }\n  requestWithRetry(method, path, queryParams, body) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      var currentRetryCount = 0;\n\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        try {\n          return yield _this4.rawJsonRequest(method, path, queryParams, body);\n        } catch (e) {\n          currentRetryCount++;\n          var backoff = calculateRetryBackoff(e, currentRetryCount, true);\n          if (backoff < 0) {\n            // Max number of retries reached, or error is not retryable. rethrow the error\n            throw e;\n          }\n          // wait for the specified time and then retry the request\n          yield sleep(backoff);\n        }\n      }\n    })();\n  }\n  rawJsonRequest(method, path, queryParams, body) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      var opts = {\n        // inhibit the JSON stringification and parsing within HttpApi.\n        json: false,\n        // nevertheless, we are sending, and accept, JSON.\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        // we use the full prefix\n        prefix: \"\",\n        // We set a timeout of 60 seconds to guard against requests getting stuck forever and wedging the\n        // request loop (cf https://github.com/element-hq/element-web/issues/29534).\n        //\n        // (XXX: should we do this in the whole of the js-sdk?)\n        localTimeoutMs: 60000\n      };\n      return yield _this5.http.authedRequest(method, path, queryParams, body, opts);\n    })();\n  }\n}\n//# sourceMappingURL=OutgoingRequestProcessor.js.map","import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * KeyClaimManager: linearises calls to OlmMachine.getMissingSessions to avoid races\n *\n * We have one of these per `RustCrypto` (and hence per `MatrixClient`).\n *\n * @internal\n */\nexport class KeyClaimManager {\n  constructor(olmMachine, outgoingRequestProcessor) {\n    this.olmMachine = olmMachine;\n    this.outgoingRequestProcessor = outgoingRequestProcessor;\n    _defineProperty(this, \"currentClaimPromise\", void 0);\n    _defineProperty(this, \"stopped\", false);\n    this.currentClaimPromise = Promise.resolve();\n  }\n\n  /**\n   * Tell the KeyClaimManager to immediately stop processing requests.\n   *\n   * Any further calls, and any still in the queue, will fail with an error.\n   */\n  stop() {\n    this.stopped = true;\n  }\n\n  /**\n   * Given a list of users, attempt to ensure that we have Olm Sessions active with each of their devices\n   *\n   * If we don't have an active olm session, we will claim a one-time key and start one.\n   * @param logger - logger to use\n   * @param userList - list of userIDs to claim\n   */\n  ensureSessionsForUsers(logger, userList) {\n    // The Rust-SDK requires that we only have one getMissingSessions process in flight at once. This little dance\n    // ensures that, by only having one call to ensureSessionsForUsersInner active at once (and making them\n    // queue up in order).\n    var prom = this.currentClaimPromise.catch(() => {\n      // any errors in the previous claim will have been reported already, so there is nothing to do here.\n      // we just throw away the error and start anew.\n    }).then(() => this.ensureSessionsForUsersInner(logger, userList));\n    this.currentClaimPromise = prom;\n    return prom;\n  }\n  ensureSessionsForUsersInner(logger, userList) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // bail out quickly if we've been stopped.\n      if (_this.stopped) {\n        throw new Error(\"Cannot ensure Olm sessions: shutting down\");\n      }\n      logger.info(\"Checking for missing Olm sessions\");\n      // By passing the userId array to rust we transfer ownership of the items to rust, causing\n      // them to be invalidated on the JS side as soon as the method is called.\n      // As we haven't created the `userList` let's clone the users, to not break the caller from re-using it.\n      var claimRequest = yield _this.olmMachine.getMissingSessions(userList.map(u => u.clone()));\n      if (claimRequest) {\n        logger.info(\"Making /keys/claim request\");\n        yield _this.outgoingRequestProcessor.makeOutgoingRequest(claimRequest);\n      }\n      logger.info(\"Olm sessions prepared\");\n    })();\n  }\n}\n//# sourceMappingURL=KeyClaimManager.js.map","/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport { Device, DeviceVerification } from \"../models/device.js\";\n/**\n * Convert a {@link RustSdkCryptoJs.Device} to a {@link Device}\n * @param device - Rust Sdk device\n * @param userId - owner of the device\n *\n * @internal\n */\nexport function rustDeviceToJsDevice(device, userId) {\n  // Copy rust device keys to Device.keys\n  var keys = new Map();\n  for (var [keyId, key] of device.keys.entries()) {\n    keys.set(keyId.toString(), key.toBase64());\n  }\n\n  // Compute verified from device state\n  var verified = DeviceVerification.Unverified;\n  if (device.isBlacklisted()) {\n    verified = DeviceVerification.Blocked;\n  } else if (device.isVerified()) {\n    verified = DeviceVerification.Verified;\n  }\n\n  // Convert rust signatures to Device.signatures\n  var signatures = new Map();\n  var mayBeSignatureMap = device.signatures.get(userId);\n  if (mayBeSignatureMap) {\n    var convertedSignatures = new Map();\n    // Convert maybeSignatures map to a Map<string, string>\n    for (var [_key, value] of mayBeSignatureMap.entries()) {\n      if (value.isValid() && value.signature) {\n        convertedSignatures.set(_key, value.signature.toBase64());\n      }\n    }\n    signatures.set(userId.toString(), convertedSignatures);\n  }\n\n  // Convert rust algorithms to algorithms\n  var rustAlgorithms = device.algorithms;\n  // Use set to ensure that algorithms are not duplicated\n  var algorithms = new Set();\n  rustAlgorithms.forEach(algorithm => {\n    switch (algorithm) {\n      case RustSdkCryptoJs.EncryptionAlgorithm.MegolmV1AesSha2:\n        algorithms.add(\"m.megolm.v1.aes-sha2\");\n        break;\n      case RustSdkCryptoJs.EncryptionAlgorithm.OlmV1Curve25519AesSha2:\n      default:\n        algorithms.add(\"m.olm.v1.curve25519-aes-sha2\");\n        break;\n    }\n  });\n  return new Device({\n    deviceId: device.deviceId.toString(),\n    userId: userId.toString(),\n    keys,\n    algorithms: Array.from(algorithms),\n    verified,\n    signatures,\n    displayName: device.displayName,\n    dehydrated: device.isDehydrated\n  });\n}\n\n/**\n * Convert {@link DeviceKeys}  from `/keys/query` request to a `Map<string, Device>`\n * @param deviceKeys - Device keys object to convert\n *\n * @internal\n */\nexport function deviceKeysToDeviceMap(deviceKeys) {\n  return new Map(Object.entries(deviceKeys).map(_ref => {\n    var [deviceId, device] = _ref;\n    return [deviceId, downloadDeviceToJsDevice(device)];\n  }));\n}\n\n// Device from `/keys/query` request\n\n/**\n * Convert `/keys/query` {@link QueryDevice} device to {@link Device}\n * @param device - Device from `/keys/query` request\n *\n * @internal\n */\nexport function downloadDeviceToJsDevice(device) {\n  var _device$unsigned;\n  var keys = new Map(Object.entries(device.keys));\n  var displayName = (_device$unsigned = device.unsigned) === null || _device$unsigned === void 0 ? void 0 : _device$unsigned.device_display_name;\n  var signatures = new Map();\n  if (device.signatures) {\n    for (var userId in device.signatures) {\n      signatures.set(userId, new Map(Object.entries(device.signatures[userId])));\n    }\n  }\n  return new Device({\n    deviceId: device.device_id,\n    userId: device.user_id,\n    keys,\n    algorithms: device.algorithms,\n    verified: DeviceVerification.Unverified,\n    signatures,\n    displayName\n  });\n}\n//# sourceMappingURL=device-converter.js.map","import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\n/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { logger } from \"../logger.js\";\n/** Manages the cross-signing keys for our own user.\n *\n * @internal\n */\nexport class CrossSigningIdentity {\n  constructor(olmMachine, outgoingRequestProcessor, secretStorage) {\n    this.olmMachine = olmMachine;\n    this.outgoingRequestProcessor = outgoingRequestProcessor;\n    this.secretStorage = secretStorage;\n  }\n\n  /**\n   * Initialise our cross-signing keys by creating new keys if they do not exist, and uploading to the server\n   */\n  bootstrapCrossSigning(opts) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (opts.setupNewCrossSigning) {\n        yield _this.resetCrossSigning(opts.authUploadDeviceSigningKeys);\n        return;\n      }\n      var olmDeviceStatus = yield _this.olmMachine.crossSigningStatus();\n\n      // Try to fetch cross signing keys from the secret storage\n      var masterKeyFromSecretStorage = yield _this.secretStorage.get(\"m.cross_signing.master\");\n      var selfSigningKeyFromSecretStorage = yield _this.secretStorage.get(\"m.cross_signing.self_signing\");\n      var userSigningKeyFromSecretStorage = yield _this.secretStorage.get(\"m.cross_signing.user_signing\");\n      var privateKeysInSecretStorage = Boolean(masterKeyFromSecretStorage && selfSigningKeyFromSecretStorage && userSigningKeyFromSecretStorage);\n      var olmDeviceHasKeys = olmDeviceStatus.hasMaster && olmDeviceStatus.hasUserSigning && olmDeviceStatus.hasSelfSigning;\n\n      // Log all relevant state for easier parsing of debug logs.\n      logger.log(\"bootstrapCrossSigning: starting\", {\n        setupNewCrossSigning: opts.setupNewCrossSigning,\n        olmDeviceHasMaster: olmDeviceStatus.hasMaster,\n        olmDeviceHasUserSigning: olmDeviceStatus.hasUserSigning,\n        olmDeviceHasSelfSigning: olmDeviceStatus.hasSelfSigning,\n        privateKeysInSecretStorage\n      });\n      if (olmDeviceHasKeys) {\n        if (!(yield _this.secretStorage.hasKey())) {\n          logger.warn(\"bootstrapCrossSigning: Olm device has private keys, but secret storage is not yet set up; doing nothing for now.\");\n          // the keys should get uploaded to 4S once that is set up.\n        } else if (!privateKeysInSecretStorage) {\n          // the device has the keys but they are not in 4S, so update it\n          logger.log(\"bootstrapCrossSigning: Olm device has private keys: exporting to secret storage\");\n          yield _this.exportCrossSigningKeysToStorage();\n        } else {\n          logger.log(\"bootstrapCrossSigning: Olm device has private keys and they are saved in secret storage; doing nothing\");\n        }\n      } /* (!olmDeviceHasKeys) */else {\n        if (privateKeysInSecretStorage) {\n          // they are in 4S, so import from there\n          logger.log(\"bootstrapCrossSigning: Cross-signing private keys not found locally, but they are available \" + \"in secret storage, reading storage and caching locally\");\n          var status = yield _this.olmMachine.importCrossSigningKeys(masterKeyFromSecretStorage, selfSigningKeyFromSecretStorage, userSigningKeyFromSecretStorage);\n\n          // Check that `importCrossSigningKeys` worked correctly (for example, it will fail silently if the\n          // public keys are not available).\n          if (!status.hasMaster || !status.hasSelfSigning || !status.hasUserSigning) {\n            throw new Error(\"importCrossSigningKeys failed to import the keys\");\n          }\n\n          // Get the current device\n          var device = yield _this.olmMachine.getDevice(_this.olmMachine.userId, _this.olmMachine.deviceId);\n          try {\n            // Sign the device with our cross-signing key and upload the signature\n            var request = yield device.verify();\n            yield _this.outgoingRequestProcessor.makeOutgoingRequest(request);\n          } finally {\n            device.free();\n          }\n        } else {\n          logger.log(\"bootstrapCrossSigning: Cross-signing private keys not found locally or in secret storage, creating new keys\");\n          yield _this.resetCrossSigning(opts.authUploadDeviceSigningKeys);\n        }\n      }\n\n      // TODO: we might previously have bootstrapped cross-signing but not completed uploading the keys to the\n      //   server -- in which case we should call OlmDevice.bootstrap_cross_signing. How do we know?\n      logger.log(\"bootstrapCrossSigning: complete\");\n    })();\n  }\n\n  /** Reset our cross-signing keys\n   *\n   * This method will:\n   *   * Tell the OlmMachine to create new keys\n   *   * Upload the new public keys and the device signature to the server\n   *   * Upload the private keys to SSSS, if it is set up\n   */\n  resetCrossSigning(authUploadDeviceSigningKeys) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // XXX: We must find a way to make this atomic, currently if the user does not remember his account password\n      // or 4S passphrase/key the process will fail in a bad state, with keys rotated but not uploaded or saved in 4S.\n      var outgoingRequests = yield _this2.olmMachine.bootstrapCrossSigning(true);\n\n      // If 4S is configured we need to update it.\n      if (!(yield _this2.secretStorage.hasKey())) {\n        logger.warn(\"resetCrossSigning: Secret storage is not yet set up; not exporting keys to secret storage yet.\");\n        // the keys should get uploaded to 4S once that is set up.\n      } else {\n        // Update 4S before uploading cross-signing keys, to stay consistent with legacy that asks\n        // 4S passphrase before asking for account password.\n        // Ultimately should be made atomic and resistant to forgotten password/passphrase.\n        logger.log(\"resetCrossSigning: exporting private keys to secret storage\");\n        yield _this2.exportCrossSigningKeysToStorage();\n      }\n      logger.log(\"resetCrossSigning: publishing public keys to server\");\n      for (var req of [outgoingRequests.uploadKeysRequest, outgoingRequests.uploadSigningKeysRequest, outgoingRequests.uploadSignaturesRequest]) {\n        if (req) {\n          yield _this2.outgoingRequestProcessor.makeOutgoingRequest(req, authUploadDeviceSigningKeys);\n        }\n      }\n    })();\n  }\n\n  /**\n   * Extract the cross-signing keys from the olm machine and save them to secret storage, if it is configured\n   *\n   * (If secret storage is *not* configured, we assume that the export will happen when it is set up)\n   */\n  exportCrossSigningKeysToStorage() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      var exported = yield _this3.olmMachine.exportCrossSigningKeys();\n      /* istanbul ignore else (this function is only called when we know the olm machine has keys) */\n      if (exported !== null && exported !== void 0 && exported.masterKey) {\n        yield _this3.secretStorage.store(\"m.cross_signing.master\", exported.masterKey);\n      } else {\n        logger.error(\"Cannot export MSK to secret storage, private key unknown\");\n      }\n      if (exported !== null && exported !== void 0 && exported.self_signing_key) {\n        yield _this3.secretStorage.store(\"m.cross_signing.self_signing\", exported.self_signing_key);\n      } else {\n        logger.error(\"Cannot export SSK to secret storage, private key unknown\");\n      }\n      if (exported !== null && exported !== void 0 && exported.userSigningKey) {\n        yield _this3.secretStorage.store(\"m.cross_signing.user_signing\", exported.userSigningKey);\n      } else {\n        logger.error(\"Cannot export USK to secret storage, private key unknown\");\n      }\n    })();\n  }\n}\n//# sourceMappingURL=CrossSigningIdentity.js.map","import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\n/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Check that the private cross signing keys (master, self signing, user signing) are stored in the secret storage and encrypted with the default secret storage key.\n *\n * @param secretStorage - The secret store using account data\n * @returns True if the cross-signing keys are all stored and encrypted with the same secret storage key.\n *\n * @internal\n */\nexport function secretStorageContainsCrossSigningKeys(_x) {\n  return _secretStorageContainsCrossSigningKeys.apply(this, arguments);\n}\n\n/**\n *\n * Check that the secret storage can access the given secrets using the default key.\n *\n * @param secretStorage - The secret store using account data\n * @param secretNames - The secret names to check\n * @returns True if all the given secrets are accessible and encrypted with the given key.\n *\n * @internal\n */\nfunction _secretStorageContainsCrossSigningKeys() {\n  _secretStorageContainsCrossSigningKeys = _asyncToGenerator(function* (secretStorage) {\n    return secretStorageCanAccessSecrets(secretStorage, [\"m.cross_signing.master\", \"m.cross_signing.user_signing\", \"m.cross_signing.self_signing\"]);\n  });\n  return _secretStorageContainsCrossSigningKeys.apply(this, arguments);\n}\nexport function secretStorageCanAccessSecrets(_x2, _x3) {\n  return _secretStorageCanAccessSecrets.apply(this, arguments);\n}\nfunction _secretStorageCanAccessSecrets() {\n  _secretStorageCanAccessSecrets = _asyncToGenerator(function* (secretStorage, secretNames) {\n    var defaultKeyId = yield secretStorage.getDefaultKeyId();\n    if (!defaultKeyId) return false;\n    for (var secretName of secretNames) {\n      // check which keys this particular secret is encrypted with\n      var record = (yield secretStorage.isStored(secretName)) || {};\n      // if it's not encrypted with the right key, there is no point continuing\n      if (!(defaultKeyId in record)) return false;\n    }\n    return true;\n  });\n  return _secretStorageCanAccessSecrets.apply(this, arguments);\n}\n//# sourceMappingURL=secret-storage.js.map","import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport { QrState } from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport { VerificationPhase, VerificationRequestEvent, VerifierEvent } from \"../crypto-api/verification.js\";\nimport { TypedEventEmitter } from \"../models/typed-event-emitter.js\";\nimport { TypedReEmitter } from \"../ReEmitter.js\";\nimport { EventType, MsgType } from \"../@types/event.js\";\nimport { defer } from \"../utils.js\";\nimport { VerificationMethod } from \"../types.js\";\n\n/**\n * An incoming, or outgoing, request to verify a user or a device via cross-signing.\n *\n * @internal\n */\nexport class RustVerificationRequest extends TypedEventEmitter {\n  /**\n   * Construct a new RustVerificationRequest to wrap the rust-level `VerificationRequest`.\n   *\n   * @param olmMachine - The `OlmMachine` from the underlying rust crypto sdk.\n   * @param inner - VerificationRequest from the Rust SDK.\n   * @param outgoingRequestProcessor - `OutgoingRequestProcessor` to use for making outgoing HTTP requests.\n   * @param supportedVerificationMethods - Verification methods to use when `accept()` is called.\n   */\n  constructor(olmMachine, inner, outgoingRequestProcessor, supportedVerificationMethods) {\n    super();\n    this.olmMachine = olmMachine;\n    this.inner = inner;\n    this.outgoingRequestProcessor = outgoingRequestProcessor;\n    this.supportedVerificationMethods = supportedVerificationMethods;\n    /** a reëmitter which relays VerificationRequestEvent.Changed events emitted by the verifier */\n    _defineProperty(this, \"reEmitter\", void 0);\n    /** Are we in the process of sending an `m.key.verification.ready` event? */\n    _defineProperty(this, \"_accepting\", false);\n    /** Are we in the process of sending an `m.key.verification.cancellation` event? */\n    _defineProperty(this, \"_cancelling\", false);\n    _defineProperty(this, \"_verifier\", void 0);\n    this.reEmitter = new TypedReEmitter(this);\n\n    // Obviously, the Rust object maintains a reference to the callback function. If the callback function maintains\n    // a reference to the Rust object, then we have a reference cycle which means that `RustVerificationRequest`\n    // will never be garbage-collected, and hence the underlying rust object will never be freed.\n    //\n    // To avoid this reference cycle, use a weak reference in the callback function. If the `RustVerificationRequest`\n    // gets garbage-collected, then there is nothing to update!\n    var weakThis = new WeakRef(this);\n    inner.registerChangesCallback(/*#__PURE__*/_asyncToGenerator(function* () {\n      var _weakThis$deref;\n      return (_weakThis$deref = weakThis.deref()) === null || _weakThis$deref === void 0 ? void 0 : _weakThis$deref.onChange();\n    }));\n  }\n\n  /**\n   * Hook which is called when the underlying rust class notifies us that there has been a change.\n   */\n  onChange() {\n    var verification = this.inner.getVerification();\n\n    // Set the _verifier object (wrapping the rust `Verification` as a js-sdk Verifier) if:\n    // - we now have a `Verification` where we lacked one before\n    // - we have transitioned from QR to SAS\n    // - we are verifying with SAS, but we need to replace our verifier with a new one because both parties\n    //   tried to start verification at the same time, and we lost the tie breaking\n    if (verification instanceof RustSdkCryptoJs.Sas) {\n      if (this._verifier === undefined || this._verifier instanceof RustQrCodeVerifier) {\n        this.setVerifier(new RustSASVerifier(verification, this, this.outgoingRequestProcessor));\n      } else if (this._verifier instanceof RustSASVerifier) {\n        this._verifier.replaceInner(verification);\n      }\n    } else if (verification instanceof RustSdkCryptoJs.Qr && this._verifier === undefined) {\n      this.setVerifier(new RustQrCodeVerifier(verification, this.outgoingRequestProcessor));\n    }\n    this.emit(VerificationRequestEvent.Change);\n  }\n  setVerifier(verifier) {\n    // if we already have a verifier, unsubscribe from its events\n    if (this._verifier) {\n      this.reEmitter.stopReEmitting(this._verifier, [VerificationRequestEvent.Change]);\n    }\n    this._verifier = verifier;\n    this.reEmitter.reEmit(this._verifier, [VerificationRequestEvent.Change]);\n  }\n\n  /**\n   * Unique ID for this verification request.\n   *\n   * An ID isn't assigned until the first message is sent, so this may be `undefined` in the early phases.\n   */\n  get transactionId() {\n    return this.inner.flowId;\n  }\n\n  /**\n   * For an in-room verification, the ID of the room.\n   *\n   * For to-device verifications, `undefined`.\n   */\n  get roomId() {\n    var _this$inner$roomId;\n    return (_this$inner$roomId = this.inner.roomId) === null || _this$inner$roomId === void 0 ? void 0 : _this$inner$roomId.toString();\n  }\n\n  /**\n   * True if this request was initiated by the local client.\n   *\n   * For in-room verifications, the initiator is who sent the `m.key.verification.request` event.\n   * For to-device verifications, the initiator is who sent the `m.key.verification.start` event.\n   */\n  get initiatedByMe() {\n    return this.inner.weStarted();\n  }\n\n  /** The user id of the other party in this request */\n  get otherUserId() {\n    return this.inner.otherUserId.toString();\n  }\n\n  /** For verifications via to-device messages: the ID of the other device. Otherwise, undefined. */\n  get otherDeviceId() {\n    var _this$inner$otherDevi;\n    return (_this$inner$otherDevi = this.inner.otherDeviceId) === null || _this$inner$otherDevi === void 0 ? void 0 : _this$inner$otherDevi.toString();\n  }\n\n  /** Get the other device involved in the verification, if it is known */\n  getOtherDevice() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var otherDeviceId = _this.inner.otherDeviceId;\n      if (!otherDeviceId) {\n        return undefined;\n      }\n      return yield _this.olmMachine.getDevice(_this.inner.otherUserId, otherDeviceId, 5);\n    })();\n  }\n\n  /** True if the other party in this request is one of this user's own devices. */\n  get isSelfVerification() {\n    return this.inner.isSelfVerification();\n  }\n\n  /** current phase of the request. */\n  get phase() {\n    var phase = this.inner.phase();\n    switch (phase) {\n      case RustSdkCryptoJs.VerificationRequestPhase.Created:\n      case RustSdkCryptoJs.VerificationRequestPhase.Requested:\n        return VerificationPhase.Requested;\n      case RustSdkCryptoJs.VerificationRequestPhase.Ready:\n        // if we're still sending the `m.key.verification.ready`, that counts as \"Requested\" in the js-sdk's\n        // parlance.\n        return this._accepting ? VerificationPhase.Requested : VerificationPhase.Ready;\n      case RustSdkCryptoJs.VerificationRequestPhase.Transitioned:\n        if (!this._verifier) {\n          // this shouldn't happen, because the onChange handler should have created a _verifier.\n          throw new Error(\"VerificationRequest: inner phase == Transitioned but no verifier!\");\n        }\n        return this._verifier.verificationPhase;\n      case RustSdkCryptoJs.VerificationRequestPhase.Done:\n        return VerificationPhase.Done;\n      case RustSdkCryptoJs.VerificationRequestPhase.Cancelled:\n        return VerificationPhase.Cancelled;\n    }\n    throw new Error(\"Unknown verification phase \".concat(phase));\n  }\n\n  /** True if the request has sent its initial event and needs more events to complete\n   * (ie it is in phase `Requested`, `Ready` or `Started`).\n   */\n  get pending() {\n    if (this.inner.isPassive()) return false;\n    var phase = this.phase;\n    return phase !== VerificationPhase.Done && phase !== VerificationPhase.Cancelled;\n  }\n\n  /**\n   * True if we have started the process of sending an `m.key.verification.ready` (but have not necessarily received\n   * the remote echo which causes a transition to {@link VerificationPhase.Ready}.\n   */\n  get accepting() {\n    return this._accepting;\n  }\n\n  /**\n   * True if we have started the process of sending an `m.key.verification.cancel` (but have not necessarily received\n   * the remote echo which causes a transition to {@link VerificationPhase.Cancelled}).\n   */\n  get declining() {\n    return this._cancelling;\n  }\n\n  /**\n   * The remaining number of ms before the request will be automatically cancelled.\n   *\n   * `null` indicates that there is no timeout\n   */\n  get timeout() {\n    return this.inner.timeRemainingMillis();\n  }\n\n  /** once the phase is Started (and !initiatedByMe) or Ready: common methods supported by both sides */\n  get methods() {\n    throw new Error(\"not implemented\");\n  }\n\n  /** the method picked in the .start event */\n  get chosenMethod() {\n    if (this.phase !== VerificationPhase.Started) return null;\n    var verification = this.inner.getVerification();\n    if (verification instanceof RustSdkCryptoJs.Sas) {\n      return VerificationMethod.Sas;\n    } else if (verification instanceof RustSdkCryptoJs.Qr) {\n      return VerificationMethod.Reciprocate;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Checks whether the other party supports a given verification method.\n   * This is useful when setting up the QR code UI, as it is somewhat asymmetrical:\n   * if the other party supports SCAN_QR, we should show a QR code in the UI, and vice versa.\n   * For methods that need to be supported by both ends, use the `methods` property.\n   *\n   * @param method - the method to check\n   * @returns true if the other party said they supported the method\n   */\n  otherPartySupportsMethod(method) {\n    var theirMethods = this.inner.theirSupportedMethods;\n    if (theirMethods === undefined) {\n      // no message from the other side yet\n      return false;\n    }\n    var requiredMethod = verificationMethodsByIdentifier[method];\n    return theirMethods.some(m => m === requiredMethod);\n  }\n\n  /**\n   * Accepts the request, sending a .ready event to the other party\n   *\n   * @returns Promise which resolves when the event has been sent.\n   */\n  accept() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2.inner.phase() !== RustSdkCryptoJs.VerificationRequestPhase.Requested || _this2._accepting) {\n        throw new Error(\"Cannot accept a verification request in phase \".concat(_this2.phase));\n      }\n      _this2._accepting = true;\n      try {\n        var req = _this2.inner.acceptWithMethods(_this2.supportedVerificationMethods.map(verificationMethodIdentifierToMethod));\n        if (req) {\n          yield _this2.outgoingRequestProcessor.makeOutgoingRequest(req);\n        }\n      } finally {\n        _this2._accepting = false;\n      }\n\n      // phase may have changed, so emit a 'change' event\n      _this2.emit(VerificationRequestEvent.Change);\n    })();\n  }\n\n  /**\n   * Cancels the request, sending a cancellation to the other party\n   *\n   * @param params - Details for the cancellation, including `reason` (defaults to \"User declined\"), and `code`\n   *    (defaults to `m.user`).\n   *\n   * @returns Promise which resolves when the event has been sent.\n   */\n  cancel(params) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (_this3._cancelling) {\n        // already cancelling; do nothing\n        return;\n      }\n      _this3._cancelling = true;\n      try {\n        var req = _this3.inner.cancel();\n        if (req) {\n          yield _this3.outgoingRequestProcessor.makeOutgoingRequest(req);\n        }\n      } finally {\n        _this3._cancelling = false;\n      }\n    })();\n  }\n\n  /**\n   * Create a {@link Verifier} to do this verification via a particular method.\n   *\n   * If a verifier has already been created for this request, returns that verifier.\n   *\n   * This does *not* send the `m.key.verification.start` event - to do so, call {@link Verifier#verifier} on the\n   * returned verifier.\n   *\n   * If no previous events have been sent, pass in `targetDevice` to set who to direct this request to.\n   *\n   * @param method - the name of the verification method to use.\n   * @param targetDevice - details of where to send the request to.\n   *\n   * @returns The verifier which will do the actual verification.\n   */\n  beginKeyVerification(method, targetDevice) {\n    throw new Error(\"not implemented\");\n  }\n\n  /**\n   * Send an `m.key.verification.start` event to start verification via a particular method.\n   *\n   * Implementation of {@link Crypto.VerificationRequest#startVerification}.\n   *\n   * @param method - the name of the verification method to use.\n   */\n  startVerification(method) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (method !== VerificationMethod.Sas) {\n        throw new Error(\"Unsupported verification method \".concat(method));\n      }\n\n      // make sure that we have a list of the other user's devices (workaround https://github.com/matrix-org/matrix-rust-sdk/issues/2896)\n      if (!(yield _this4.getOtherDevice())) {\n        throw new Error(\"startVerification(): other device is unknown\");\n      }\n      var res = yield _this4.inner.startSas();\n      if (res) {\n        var [, req] = res;\n        yield _this4.outgoingRequestProcessor.makeOutgoingRequest(req);\n      }\n\n      // this should have triggered the onChange callback, and we should now have a verifier\n      if (!_this4._verifier) {\n        throw new Error(\"Still no verifier after startSas() call\");\n      }\n      return _this4._verifier;\n    })();\n  }\n\n  /**\n   * Start a QR code verification by providing a scanned QR code for this verification flow.\n   *\n   * Implementation of {@link Crypto.VerificationRequest#scanQRCode}.\n   *\n   * @param qrCodeData - the decoded QR code.\n   * @returns A verifier; call `.verify()` on it to wait for the other side to complete the verification flow.\n   */\n  scanQRCode(uint8Array) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      var scan = RustSdkCryptoJs.QrCodeScan.fromBytes(uint8Array);\n      var verifier = yield _this5.inner.scanQrCode(scan);\n\n      // this should have triggered the onChange callback, and we should now have a verifier\n      if (!_this5._verifier) {\n        throw new Error(\"Still no verifier after scanQrCode() call\");\n      }\n\n      // we can immediately trigger the reciprocate request\n      var req = verifier.reciprocate();\n      if (req) {\n        yield _this5.outgoingRequestProcessor.makeOutgoingRequest(req);\n      }\n      return _this5._verifier;\n    })();\n  }\n\n  /**\n   * The verifier which is doing the actual verification, once the method has been established.\n   * Only defined when the `phase` is Started.\n   */\n  get verifier() {\n    // It's possible for us to have a Verifier before a method has been chosen (in particular,\n    // if we are showing a QR code which the other device has not yet scanned. At that point, we could\n    // still switch to SAS).\n    //\n    // In that case, we should not return it to the application yet, since the application will not expect the\n    // Verifier to be replaced during the lifetime of the VerificationRequest.\n    return this.phase === VerificationPhase.Started ? this._verifier : undefined;\n  }\n\n  /**\n   * Stub implementation of {@link Crypto.VerificationRequest#getQRCodeBytes}.\n   */\n  getQRCodeBytes() {\n    throw new Error(\"getQRCodeBytes() unsupported in Rust Crypto; use generateQRCode() instead.\");\n  }\n\n  /**\n   * Generate the data for a QR code allowing the other device to verify this one, if it supports it.\n   *\n   * Implementation of {@link Crypto.VerificationRequest#generateQRCode}.\n   */\n  generateQRCode() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      // make sure that we have a list of the other user's devices (workaround https://github.com/matrix-org/matrix-rust-sdk/issues/2896)\n      if (!(yield _this6.getOtherDevice())) {\n        throw new Error(\"generateQRCode(): other device is unknown\");\n      }\n      var innerVerifier = yield _this6.inner.generateQrCode();\n      // If we are unable to generate a QRCode, we return undefined\n      if (!innerVerifier) return;\n      return innerVerifier.toBytes();\n    })();\n  }\n\n  /**\n   * If this request has been cancelled, the cancellation code (e.g `m.user`) which is responsible for cancelling\n   * this verification.\n   */\n  get cancellationCode() {\n    var _this$inner$cancelInf, _this$inner$cancelInf2;\n    return (_this$inner$cancelInf = (_this$inner$cancelInf2 = this.inner.cancelInfo) === null || _this$inner$cancelInf2 === void 0 ? void 0 : _this$inner$cancelInf2.cancelCode()) !== null && _this$inner$cancelInf !== void 0 ? _this$inner$cancelInf : null;\n  }\n\n  /**\n   * The id of the user that cancelled the request.\n   *\n   * Only defined when phase is Cancelled\n   */\n  get cancellingUserId() {\n    var cancelInfo = this.inner.cancelInfo;\n    if (!cancelInfo) {\n      return undefined;\n    } else if (cancelInfo.cancelledbyUs()) {\n      return this.olmMachine.userId.toString();\n    } else {\n      return this.inner.otherUserId.toString();\n    }\n  }\n}\n\n/** Common base class for `Verifier` implementations which wrap rust classes.\n *\n * The generic parameter `InnerType` is the type of the rust Verification class which we wrap.\n *\n * @internal\n */\nclass BaseRustVerifer extends TypedEventEmitter {\n  constructor(inner, outgoingRequestProcessor) {\n    super();\n    this.inner = inner;\n    this.outgoingRequestProcessor = outgoingRequestProcessor;\n    /** A deferred which completes when the verification completes (or rejects when it is cancelled/fails) */\n    _defineProperty(this, \"completionDeferred\", void 0);\n    this.completionDeferred = defer();\n\n    // As with RustVerificationRequest, we need to avoid a reference cycle.\n    // See the comments in RustVerificationRequest.\n    var weakThis = new WeakRef(this);\n    inner.registerChangesCallback(/*#__PURE__*/_asyncToGenerator(function* () {\n      var _weakThis$deref2;\n      return (_weakThis$deref2 = weakThis.deref()) === null || _weakThis$deref2 === void 0 ? void 0 : _weakThis$deref2.onChange();\n    }));\n\n    // stop the runtime complaining if nobody catches a failure\n    this.completionDeferred.promise.catch(() => null);\n  }\n\n  /**\n   * Hook which is called when the underlying rust class notifies us that there has been a change.\n   *\n   * Can be overridden by subclasses to see if we can notify the application about an update. The overriding method\n   * must call `super.onChange()`.\n   */\n  onChange() {\n    if (this.inner.isDone()) {\n      this.completionDeferred.resolve(undefined);\n    } else if (this.inner.isCancelled()) {\n      var cancelInfo = this.inner.cancelInfo();\n      this.completionDeferred.reject(new Error(\"Verification cancelled by \".concat(cancelInfo.cancelledbyUs() ? \"us\" : \"them\", \" with code \").concat(cancelInfo.cancelCode(), \": \").concat(cancelInfo.reason())));\n    }\n    this.emit(VerificationRequestEvent.Change);\n  }\n\n  /**\n   * Returns true if the verification has been cancelled, either by us or the other side.\n   */\n  get hasBeenCancelled() {\n    return this.inner.isCancelled();\n  }\n\n  /**\n   * The ID of the other user in the verification process.\n   */\n  get userId() {\n    return this.inner.otherUserId.toString();\n  }\n\n  /**\n   * Cancel a verification.\n   *\n   * We will send an `m.key.verification.cancel` if the verification is still in flight. The verification promise\n   * will reject, and a {@link Crypto.VerifierEvent#Cancel} will be emitted.\n   *\n   * @param e - the reason for the cancellation.\n   */\n  cancel(e) {\n    // TODO: something with `e`\n    var req = this.inner.cancel();\n    if (req) {\n      this.outgoingRequestProcessor.makeOutgoingRequest(req);\n    }\n  }\n\n  /**\n   * Get the details for an SAS verification, if one is in progress\n   *\n   * Returns `null`, unless this verifier is for a SAS-based verification and we are waiting for the user to confirm\n   * the SAS matches.\n   */\n  getShowSasCallbacks() {\n    return null;\n  }\n\n  /**\n   * Get the details for reciprocating QR code verification, if one is in progress\n   *\n   * Returns `null`, unless this verifier is for reciprocating a QR-code-based verification (ie, the other user has\n   * already scanned our QR code), and we are waiting for the user to confirm.\n   */\n  getReciprocateQrCodeCallbacks() {\n    return null;\n  }\n}\n\n/** A Verifier instance which is used to show and/or scan a QR code. */\nexport class RustQrCodeVerifier extends BaseRustVerifer {\n  constructor(inner, outgoingRequestProcessor) {\n    super(inner, outgoingRequestProcessor);\n    _defineProperty(this, \"callbacks\", null);\n  }\n  onChange() {\n    // if the other side has scanned our QR code and sent us a \"reciprocate\" message, it is now time for the\n    // application to prompt the user to confirm their side.\n    if (this.callbacks === null && this.inner.hasBeenScanned()) {\n      this.callbacks = {\n        confirm: () => {\n          this.confirmScanning();\n        },\n        cancel: () => this.cancel()\n      };\n    }\n    super.onChange();\n  }\n\n  /**\n   * Start the key verification, if it has not already been started.\n   *\n   * @returns Promise which resolves when the verification has completed, or rejects if the verification is cancelled\n   *    or times out.\n   */\n  verify() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      // Some applications (hello, matrix-react-sdk) may not check if there is a `ShowQrCodeCallbacks` and instead\n      // register a `ShowReciprocateQr` listener which they expect to be called once `.verify` is called.\n      if (_this7.callbacks !== null) {\n        _this7.emit(VerifierEvent.ShowReciprocateQr, _this7.callbacks);\n      }\n      // Nothing to do here but wait.\n      yield _this7.completionDeferred.promise;\n    })();\n  }\n\n  /**\n   * Calculate an appropriate VerificationPhase for a VerificationRequest where this is the verifier.\n   *\n   * This is abnormally complicated because a rust-side QR Code verifier can span several verification phases.\n   */\n  get verificationPhase() {\n    switch (this.inner.state()) {\n      case QrState.Created:\n        // we have created a QR for display; neither side has yet sent an `m.key.verification.start`.\n        return VerificationPhase.Ready;\n      case QrState.Scanned:\n        // other side has scanned our QR and sent an `m.key.verification.start` with `m.reciprocate.v1`\n        return VerificationPhase.Started;\n      case QrState.Confirmed:\n        // we have confirmed the other side's scan and sent an `m.key.verification.done`.\n        //\n        // However, the verification is not yet \"Done\", because we have to wait until we have received the\n        // `m.key.verification.done` from the other side (in particular, we don't mark the device/identity as\n        // verified until that happens). If we return \"Done\" too soon, we risk the user cancelling the flow.\n        return VerificationPhase.Started;\n      case QrState.Reciprocated:\n        // although the rust SDK doesn't immediately send the `m.key.verification.start` on transition into this\n        // state, `RustVerificationRequest.scanQrCode` immediately calls `reciprocate()` and does so, so in practice\n        // we can treat the two the same.\n        return VerificationPhase.Started;\n      case QrState.Done:\n        return VerificationPhase.Done;\n      case QrState.Cancelled:\n        return VerificationPhase.Cancelled;\n      default:\n        throw new Error(\"Unknown qr code state \".concat(this.inner.state()));\n    }\n  }\n\n  /**\n   * Get the details for reciprocating QR code verification, if one is in progress\n   *\n   * Returns `null`, unless this verifier is for reciprocating a QR-code-based verification (ie, the other user has\n   * already scanned our QR code), and we are waiting for the user to confirm.\n   */\n  getReciprocateQrCodeCallbacks() {\n    return this.callbacks;\n  }\n  confirmScanning() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      var req = _this8.inner.confirmScanning();\n      if (req) {\n        yield _this8.outgoingRequestProcessor.makeOutgoingRequest(req);\n      }\n    })();\n  }\n}\n\n/** A Verifier instance which is used if we are exchanging emojis */\nexport class RustSASVerifier extends BaseRustVerifer {\n  constructor(inner, _verificationRequest, outgoingRequestProcessor) {\n    super(inner, outgoingRequestProcessor);\n    _defineProperty(this, \"callbacks\", null);\n  }\n\n  /**\n   * Start the key verification, if it has not already been started.\n   *\n   * This means sending a `m.key.verification.start` if we are the first responder, or a `m.key.verification.accept`\n   * if the other side has already sent a start event.\n   *\n   * @returns Promise which resolves when the verification has completed, or rejects if the verification is cancelled\n   *    or times out.\n   */\n  verify() {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      yield _this9.sendAccept();\n      yield _this9.completionDeferred.promise;\n    })();\n  }\n\n  /**\n   * Send the accept or start event, if it hasn't already been sent\n   */\n  sendAccept() {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      var req = _this10.inner.accept();\n      if (req) {\n        yield _this10.outgoingRequestProcessor.makeOutgoingRequest(req);\n      }\n    })();\n  }\n\n  /** if we can now show the callbacks, do so */\n  onChange() {\n    var _this11 = this;\n    super.onChange();\n    if (this.callbacks === null) {\n      var emoji = this.inner.emoji();\n      var decimal = this.inner.decimals();\n      if (emoji === undefined && decimal === undefined) {\n        return;\n      }\n      var sas = {};\n      if (emoji) {\n        sas.emoji = emoji.map(e => [e.symbol, e.description]);\n      }\n      if (decimal) {\n        sas.decimal = [decimal[0], decimal[1], decimal[2]];\n      }\n      this.callbacks = {\n        sas,\n        confirm: function () {\n          var _confirm = _asyncToGenerator(function* () {\n            var requests = yield _this11.inner.confirm();\n            for (var m of requests) {\n              yield _this11.outgoingRequestProcessor.makeOutgoingRequest(m);\n            }\n          });\n          function confirm() {\n            return _confirm.apply(this, arguments);\n          }\n          return confirm;\n        }(),\n        mismatch: () => {\n          var request = this.inner.cancelWithCode(\"m.mismatched_sas\");\n          if (request) {\n            this.outgoingRequestProcessor.makeOutgoingRequest(request);\n          }\n        },\n        cancel: () => {\n          var request = this.inner.cancelWithCode(\"m.user\");\n          if (request) {\n            this.outgoingRequestProcessor.makeOutgoingRequest(request);\n          }\n        }\n      };\n      this.emit(VerifierEvent.ShowSas, this.callbacks);\n    }\n  }\n\n  /**\n   * Calculate an appropriate VerificationPhase for a VerificationRequest where this is the verifier.\n   */\n  get verificationPhase() {\n    return VerificationPhase.Started;\n  }\n\n  /**\n   * Get the details for an SAS verification, if one is in progress\n   *\n   * Returns `null`, unless this verifier is for a SAS-based verification and we are waiting for the user to confirm\n   * the SAS matches.\n   */\n  getShowSasCallbacks() {\n    return this.callbacks;\n  }\n\n  /**\n   * Replace the inner Rust verifier with a different one.\n   *\n   * @param inner - the new Rust verifier\n   * @internal\n   */\n  replaceInner(inner) {\n    if (this.inner != inner) {\n      this.inner = inner;\n\n      // As with RustVerificationRequest, we need to avoid a reference cycle.\n      // See the comments in RustVerificationRequest.\n      var weakThis = new WeakRef(this);\n      inner.registerChangesCallback(/*#__PURE__*/_asyncToGenerator(function* () {\n        var _weakThis$deref3;\n        return (_weakThis$deref3 = weakThis.deref()) === null || _weakThis$deref3 === void 0 ? void 0 : _weakThis$deref3.onChange();\n      }));\n\n      // replaceInner will only get called if we started the verification at the same time as the other side, and we lost\n      // the tie breaker.  So we need to re-accept their verification.\n      this.sendAccept();\n      this.onChange();\n    }\n  }\n}\n\n/** For each specced verification method, the rust-side `VerificationMethod` corresponding to it */\nvar verificationMethodsByIdentifier = {\n  [VerificationMethod.Sas]: RustSdkCryptoJs.VerificationMethod.SasV1,\n  [VerificationMethod.ScanQrCode]: RustSdkCryptoJs.VerificationMethod.QrCodeScanV1,\n  [VerificationMethod.ShowQrCode]: RustSdkCryptoJs.VerificationMethod.QrCodeShowV1,\n  [VerificationMethod.Reciprocate]: RustSdkCryptoJs.VerificationMethod.ReciprocateV1\n};\n\n/**\n * Convert a specced verification method identifier into a rust-side `VerificationMethod`.\n *\n * @param method - specced method identifier, for example `m.sas.v1`.\n * @returns Rust-side `VerificationMethod` corresponding to `method`.\n * @throws An error if the method is unknown.\n *\n * @internal\n */\nexport function verificationMethodIdentifierToMethod(method) {\n  var meth = verificationMethodsByIdentifier[method];\n  if (meth === undefined) {\n    throw new Error(\"Unknown verification method \".concat(method));\n  }\n  return meth;\n}\n\n/**\n * Return true if the event's type matches that of an in-room verification event\n *\n * @param event - MatrixEvent\n * @returns\n *\n * @internal\n */\nexport function isVerificationEvent(event) {\n  switch (event.getType()) {\n    case EventType.KeyVerificationCancel:\n    case EventType.KeyVerificationDone:\n    case EventType.KeyVerificationMac:\n    case EventType.KeyVerificationStart:\n    case EventType.KeyVerificationKey:\n    case EventType.KeyVerificationReady:\n    case EventType.KeyVerificationAccept:\n      return true;\n    case EventType.RoomMessage:\n      return event.getContent().msgtype === MsgType.KeyVerificationRequest;\n    default:\n      return false;\n  }\n}\n//# sourceMappingURL=verification.js.map","import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n/*\nCopyright 2023 - 2024 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport { logger } from \"../logger.js\";\nimport { ClientPrefix, MatrixError, Method } from \"../http-api/index.js\";\nimport { TypedEventEmitter } from \"../models/typed-event-emitter.js\";\nimport { encodeUri, logDuration } from \"../utils.js\";\nimport { sleep } from \"../utils.js\";\nimport { CryptoEvent, ImportRoomKeyStage } from \"../crypto-api/index.js\";\n\n/** Authentification of the backup info, depends on algorithm */\n\n/**\n * Holds information of a created keybackup.\n * Useful to get the generated private key material and save it securely somewhere.\n */\n\n/**\n * @internal\n */\nexport class RustBackupManager extends TypedEventEmitter {\n  constructor(olmMachine, http, outgoingRequestProcessor) {\n    super();\n    this.olmMachine = olmMachine;\n    this.http = http;\n    this.outgoingRequestProcessor = outgoingRequestProcessor;\n    /** Have we checked if there is a backup on the server which we can use */\n    _defineProperty(this, \"checkedForBackup\", false);\n    /**\n     * The latest backup version on the server, when we last checked.\n     *\n     * If there was no backup on the server, `null`. If our attempt to check resulted in an error, `undefined`.\n     *\n     * Note that the backup was not necessarily verified.\n     */\n    _defineProperty(this, \"serverBackupInfo\", undefined);\n    _defineProperty(this, \"activeBackupVersion\", null);\n    _defineProperty(this, \"stopped\", false);\n    /** whether {@link backupKeysLoop} is currently running */\n    _defineProperty(this, \"backupKeysLoopRunning\", false);\n    _defineProperty(this, \"keyBackupCheckInProgress\", null);\n  }\n\n  /**\n   * Tells the RustBackupManager to stop.\n   * The RustBackupManager is scheduling background uploads of keys to the backup, this\n   * call allows to cancel the process when the client is stoppped.\n   */\n  stop() {\n    this.stopped = true;\n  }\n\n  /**\n   * Get the backup version we are currently backing up to, if any\n   */\n  getActiveBackupVersion() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!(yield _this.olmMachine.isBackupEnabled())) return null;\n      return _this.activeBackupVersion;\n    })();\n  }\n\n  /**\n   * Return the details of the latest backup on the server, when we last checked.\n   *\n   * This normally returns a cached value, but if we haven't yet made a request to the server, it will fire one off.\n   * It will always return the details of the active backup if key backup is enabled.\n   *\n   * If there was no backup on the server, `null`. If our attempt to check resulted in an error, `undefined`.\n   */\n  getServerBackupInfo() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      // Do a validity check if we haven't already done one. The check is likely to fail if we don't yet have the\n      // backup keys -- but as a side-effect, it will populate `serverBackupInfo`.\n      yield _this2.checkKeyBackupAndEnable(false);\n      return _this2.serverBackupInfo;\n    })();\n  }\n\n  /**\n   * Determine if a key backup can be trusted.\n   *\n   * @param info - key backup info dict from {@link CryptoApi.getKeyBackupInfo}.\n   */\n  isKeyBackupTrusted(info) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      var signatureVerification = yield _this3.olmMachine.verifyBackup(info);\n      var backupKeys = yield _this3.olmMachine.getBackupKeys();\n      var decryptionKey = backupKeys === null || backupKeys === void 0 ? void 0 : backupKeys.decryptionKey;\n      var backupMatchesSavedPrivateKey = !!decryptionKey && backupInfoMatchesBackupDecryptionKey(info, decryptionKey);\n      return {\n        matchesDecryptionKey: backupMatchesSavedPrivateKey,\n        trusted: signatureVerification.trusted()\n      };\n    })();\n  }\n\n  /**\n   * Re-check the key backup and enable/disable it as appropriate.\n   *\n   * @param force - whether we should force a re-check even if one has already happened.\n   */\n  checkKeyBackupAndEnable(force) {\n    if (!force && this.checkedForBackup) {\n      return Promise.resolve(null);\n    }\n\n    // make sure there is only one check going on at a time\n    if (!this.keyBackupCheckInProgress) {\n      this.keyBackupCheckInProgress = this.doCheckKeyBackup().finally(() => {\n        this.keyBackupCheckInProgress = null;\n      });\n    }\n    return this.keyBackupCheckInProgress;\n  }\n\n  /**\n   * Handles a backup secret received event and store it if it matches the current backup version.\n   *\n   * @param secret - The secret as received from a `m.secret.send` event for secret `m.megolm_backup.v1`.\n   * @returns true if the secret is valid and has been stored, false otherwise.\n   */\n  handleBackupSecretReceived(secret) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      var _latestBackupInfo;\n      // Currently we only receive the decryption key without any key backup version. It is important to\n      // check that the secret is valid for the current version before storing it.\n      // We force a check to ensure to have the latest version.\n      var latestBackupInfo;\n      try {\n        latestBackupInfo = yield _this4.requestKeyBackupVersion();\n      } catch (e) {\n        logger.warn(\"handleBackupSecretReceived: Error checking for latest key backup\", e);\n        return false;\n      }\n      if (!((_latestBackupInfo = latestBackupInfo) !== null && _latestBackupInfo !== void 0 && _latestBackupInfo.version)) {\n        // There is no server-side key backup.\n        // This decryption key is useless to us.\n        logger.warn(\"handleBackupSecretReceived: Received a backup decryption key, but there is no trusted server-side key backup\");\n        return false;\n      }\n      try {\n        var backupDecryptionKey = RustSdkCryptoJs.BackupDecryptionKey.fromBase64(secret);\n        var privateKeyMatches = backupInfoMatchesBackupDecryptionKey(latestBackupInfo, backupDecryptionKey);\n        if (!privateKeyMatches) {\n          logger.warn(\"handleBackupSecretReceived: Private decryption key does not match the public key of the current remote backup.\");\n          // just ignore the secret\n          return false;\n        }\n        logger.info(\"handleBackupSecretReceived: A valid backup decryption key has been received and stored in cache.\");\n        yield _this4.saveBackupDecryptionKey(backupDecryptionKey, latestBackupInfo.version);\n        return true;\n      } catch (e) {\n        logger.warn(\"handleBackupSecretReceived: Invalid backup decryption key\", e);\n      }\n      return false;\n    })();\n  }\n  saveBackupDecryptionKey(backupDecryptionKey, version) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      yield _this5.olmMachine.saveBackupDecryptionKey(backupDecryptionKey, version);\n      // Emit an event that we have a new backup decryption key, so that the sdk can start\n      // importing keys from backup if needed.\n      _this5.emit(CryptoEvent.KeyBackupDecryptionKeyCached, version);\n    })();\n  }\n\n  /**\n   * Import a list of room keys previously exported by exportRoomKeys\n   *\n   * @param keys - a list of session export objects\n   * @param opts - options object\n   * @returns a promise which resolves once the keys have been imported\n   */\n  importRoomKeys(keys, opts) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      yield _this6.importRoomKeysAsJson(JSON.stringify(keys), opts);\n    })();\n  }\n\n  /**\n   * Import a list of room keys previously exported by exportRoomKeysAsJson\n   *\n   * @param jsonKeys - a JSON string encoding a list of session export objects,\n   *    each of which is an IMegolmSessionData\n   * @param opts - options object\n   * @returns a promise which resolves once the keys have been imported\n   */\n  importRoomKeysAsJson(jsonKeys, opts) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      yield _this7.olmMachine.importExportedRoomKeys(jsonKeys, (progress, total) => {\n        var _opts$progressCallbac;\n        var importOpt = {\n          total: Number(total),\n          successes: Number(progress),\n          stage: ImportRoomKeyStage.LoadKeys,\n          failures: 0\n        };\n        opts === null || opts === void 0 || (_opts$progressCallbac = opts.progressCallback) === null || _opts$progressCallbac === void 0 || _opts$progressCallbac.call(opts, importOpt);\n      });\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoBackend#importBackedUpRoomKeys}.\n   */\n  importBackedUpRoomKeys(keys, backupVersion, opts) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      var keysByRoom = new Map();\n      for (var key of keys) {\n        var roomId = new RustSdkCryptoJs.RoomId(key.room_id);\n        if (!keysByRoom.has(roomId)) {\n          keysByRoom.set(roomId, new Map());\n        }\n        keysByRoom.get(roomId).set(key.session_id, key);\n      }\n      yield _this8.olmMachine.importBackedUpRoomKeys(keysByRoom, (progress, total, failures) => {\n        var _opts$progressCallbac2;\n        var importOpt = {\n          total: Number(total),\n          successes: Number(progress),\n          stage: ImportRoomKeyStage.LoadKeys,\n          failures: Number(failures)\n        };\n        opts === null || opts === void 0 || (_opts$progressCallbac2 = opts.progressCallback) === null || _opts$progressCallbac2 === void 0 || _opts$progressCallbac2.call(opts, importOpt);\n      }, backupVersion);\n    })();\n  }\n  /** Helper for `checkKeyBackup` */\n  doCheckKeyBackup() {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      logger.log(\"Checking key backup status...\");\n      var backupInfo;\n      try {\n        backupInfo = yield _this9.requestKeyBackupVersion();\n      } catch (e) {\n        logger.warn(\"Error checking for active key backup\", e);\n        _this9.serverBackupInfo = undefined;\n        return null;\n      }\n      _this9.checkedForBackup = true;\n      if (backupInfo && !backupInfo.version) {\n        logger.warn(\"active backup lacks a useful 'version'; ignoring it\");\n        backupInfo = undefined;\n      }\n      _this9.serverBackupInfo = backupInfo;\n      var activeVersion = yield _this9.getActiveBackupVersion();\n      if (!backupInfo) {\n        if (activeVersion !== null) {\n          logger.log(\"No key backup present on server: disabling key backup\");\n          yield _this9.disableKeyBackup();\n        } else {\n          logger.log(\"No key backup present on server: not enabling key backup\");\n        }\n        return null;\n      }\n      var trustInfo = yield _this9.isKeyBackupTrusted(backupInfo);\n\n      // Per the spec, we should enable key upload if either (a) the backup is signed by a trusted key, or\n      // (b) the public key matches the private decryption key that we have received from 4S.\n      if (!trustInfo.matchesDecryptionKey && !trustInfo.trusted) {\n        if (activeVersion !== null) {\n          logger.log(\"Key backup present on server but not trusted: disabling key backup\");\n          yield _this9.disableKeyBackup();\n        } else {\n          logger.log(\"Key backup present on server but not trusted: not enabling key backup\");\n        }\n      } else {\n        if (activeVersion === null) {\n          logger.log(\"Found usable key backup v\".concat(backupInfo.version, \": enabling key backups\"));\n          yield _this9.enableKeyBackup(backupInfo);\n        } else if (activeVersion !== backupInfo.version) {\n          logger.log(\"On backup version \".concat(activeVersion, \" but found version \").concat(backupInfo.version, \": switching.\"));\n          // This will remove any pending backup request, remove the backup key and reset the backup state of each room key we have.\n          yield _this9.disableKeyBackup();\n          // Enabling will now trigger re-upload of all the keys\n          yield _this9.enableKeyBackup(backupInfo);\n        } else {\n          logger.log(\"Backup version \".concat(backupInfo.version, \" still current\"));\n        }\n      }\n      return {\n        backupInfo,\n        trustInfo\n      };\n    })();\n  }\n  enableKeyBackup(backupInfo) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      // we know for certain it must be a Curve25519 key, because we have verified it and only Curve25519\n      // keys can be verified.\n      //\n      // we also checked it has a valid `version`.\n      yield _this10.olmMachine.enableBackupV1(backupInfo.auth_data.public_key, backupInfo.version);\n      _this10.activeBackupVersion = backupInfo.version;\n      _this10.emit(CryptoEvent.KeyBackupStatus, true);\n      _this10.backupKeysLoop();\n    })();\n  }\n\n  /**\n   * Restart the backup key loop if there is an active trusted backup.\n   * Doesn't try to check the backup server side. To be called when a new\n   * megolm key is known locally.\n   */\n  maybeUploadKey() {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      if (_this11.activeBackupVersion != null) {\n        _this11.backupKeysLoop();\n      }\n    })();\n  }\n  disableKeyBackup() {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      yield _this12.olmMachine.disableBackup();\n      _this12.activeBackupVersion = null;\n      _this12.emit(CryptoEvent.KeyBackupStatus, false);\n    })();\n  }\n  backupKeysLoop() {\n    var _arguments = arguments,\n      _this13 = this;\n    return _asyncToGenerator(function* () {\n      var maxDelay = _arguments.length > 0 && _arguments[0] !== undefined ? _arguments[0] : 10000;\n      if (_this13.backupKeysLoopRunning) {\n        logger.log(\"Backup loop already running\");\n        return;\n      }\n      _this13.backupKeysLoopRunning = true;\n      logger.log(\"Backup: Starting keys upload loop for backup version:\".concat(_this13.activeBackupVersion, \".\"));\n\n      // wait between 0 and `maxDelay` seconds, to avoid backup\n      // requests from different clients hitting the server all at\n      // the same time when a new key is sent\n      var delay = Math.random() * maxDelay;\n      yield sleep(delay);\n      try {\n        // number of consecutive network failures for exponential backoff\n        var numFailures = 0;\n        // The number of keys left to back up. (Populated lazily: see more comments below.)\n        var remainingToUploadCount = null;\n        // To avoid computing the key when only a few keys were added (after a sync for example),\n        // we compute the count only when at least two iterations are needed.\n        var isFirstIteration = true;\n        while (!_this13.stopped) {\n          // Get a batch of room keys to upload\n          var request = undefined;\n          try {\n            request = yield logDuration(logger, \"BackupRoomKeys: Get keys to backup from rust crypto-sdk\", /*#__PURE__*/_asyncToGenerator(function* () {\n              return yield _this13.olmMachine.backupRoomKeys();\n            }));\n          } catch (err) {\n            logger.error(\"Backup: Failed to get keys to backup from rust crypto-sdk\", err);\n          }\n          if (!request || _this13.stopped || !_this13.activeBackupVersion) {\n            logger.log(\"Backup: Ending loop for version \".concat(_this13.activeBackupVersion, \".\"));\n            if (!request) {\n              // nothing more to upload\n              _this13.emit(CryptoEvent.KeyBackupSessionsRemaining, 0);\n            }\n            return;\n          }\n          try {\n            yield _this13.outgoingRequestProcessor.makeOutgoingRequest(request);\n            numFailures = 0;\n            if (_this13.stopped) break;\n\n            // Key count performance (`olmMachine.roomKeyCounts()`) can be pretty bad on some configurations.\n            // In particular, we detected on some M1 macs that when the object store reaches a threshold, the count\n            // performance stops growing in O(n) and suddenly becomes very slow (40s, 60s or more).\n            // For reference, the performance drop occurs around 300-400k keys on the platforms where this issue is observed.\n            // Even on other configurations, the count can take several seconds.\n            // This will block other operations on the database, like sending messages.\n            //\n            // This is a workaround to avoid calling `olmMachine.roomKeyCounts()` too often, and only when necessary.\n            // We don't call it on the first loop because there could be only a few keys to upload, and we don't want to wait for the count.\n            if (!isFirstIteration && remainingToUploadCount === null) {\n              try {\n                var keyCount = yield _this13.olmMachine.roomKeyCounts();\n                remainingToUploadCount = keyCount.total - keyCount.backedUp;\n              } catch (err) {\n                logger.error(\"Backup: Failed to get key counts from rust crypto-sdk\", err);\n              }\n            }\n            if (remainingToUploadCount !== null) {\n              _this13.emit(CryptoEvent.KeyBackupSessionsRemaining, remainingToUploadCount);\n              var keysCountInBatch = _this13.keysCountInBatch(request);\n              // `OlmMachine.roomKeyCounts` is called only once for the current backupKeysLoop. But new\n              // keys could be added during the current loop (after a sync for example).\n              // So the count can get out of sync with the real number of remaining keys to upload.\n              // Depending on the number of new keys imported and the time to complete the loop,\n              // this could result in multiple events being emitted with a remaining key count of 0.\n              remainingToUploadCount = Math.max(remainingToUploadCount - keysCountInBatch, 0);\n            }\n          } catch (err) {\n            numFailures++;\n            logger.error(\"Backup: Error processing backup request for rust crypto-sdk\", err);\n            if (err instanceof MatrixError) {\n              var errCode = err.data.errcode;\n              if (errCode == \"M_NOT_FOUND\" || errCode == \"M_WRONG_ROOM_KEYS_VERSION\") {\n                logger.log(\"Backup: Failed to upload keys to current vesion: \".concat(errCode, \".\"));\n                try {\n                  yield _this13.disableKeyBackup();\n                } catch (error) {\n                  logger.error(\"Backup: An error occurred while disabling key backup:\", error);\n                }\n                _this13.emit(CryptoEvent.KeyBackupFailed, err.data.errcode);\n                // There was an active backup and we are out of sync with the server\n                // force a check server side\n                _this13.backupKeysLoopRunning = false;\n                _this13.checkKeyBackupAndEnable(true);\n                return;\n              } else if (err.isRateLimitError()) {\n                // wait for that and then continue?\n                try {\n                  var waitTime = err.getRetryAfterMs();\n                  if (waitTime && waitTime > 0) {\n                    yield sleep(waitTime);\n                    continue;\n                  }\n                } catch (error) {\n                  logger.warn(\"Backup: An error occurred while retrieving a rate-limit retry delay\", error);\n                } // else go to the normal backoff\n              }\n            }\n\n            // Some other errors (mx, network, or CORS or invalid urls?) anyhow backoff\n            // exponential backoff if we have failures\n            yield sleep(1000 * Math.pow(2, Math.min(numFailures - 1, 4)));\n          }\n          isFirstIteration = false;\n        }\n      } finally {\n        _this13.backupKeysLoopRunning = false;\n      }\n    })();\n  }\n\n  /**\n   * Utility method to count the number of keys in a backup request, in order to update the remaining keys count.\n   * This should be the chunk size of the backup request for all requests but the last, but we don't have access to it\n   * (it's static in the Rust SDK).\n   * @param batch - The backup request to count the keys from.\n   *\n   * @returns The number of keys in the backup request.\n   */\n  keysCountInBatch(batch) {\n    var parsedBody = JSON.parse(batch.body);\n    return countKeysInBackup(parsedBody);\n  }\n\n  /**\n   * Get information about a key backup from the server\n   * - If version is provided, get information about that backup version.\n   * - If no version is provided, get information about the latest backup.\n   *\n   * @param version - The version of the backup to get information about.\n   * @returns Information object from API or null if there is no active backup.\n   */\n  requestKeyBackupVersion(version) {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      return yield requestKeyBackupVersion(_this14.http, version);\n    })();\n  }\n\n  /**\n   * Creates a new key backup by generating a new random private key.\n   *\n   * If there is an existing backup server side it will be deleted and replaced\n   * by the new one.\n   *\n   * @param signObject - Method that should sign the backup with existing device and\n   * existing identity.\n   * @returns a KeyBackupCreationInfo - All information related to the backup.\n   */\n  setupKeyBackup(signObject) {\n    var _this15 = this;\n    return _asyncToGenerator(function* () {\n      // Clean up any existing backup\n      yield _this15.deleteAllKeyBackupVersions();\n      var randomKey = RustSdkCryptoJs.BackupDecryptionKey.createRandomKey();\n      var pubKey = randomKey.megolmV1PublicKey;\n      var authData = {\n        public_key: pubKey.publicKeyBase64\n      };\n      yield signObject(authData);\n      var res = yield _this15.http.authedRequest(Method.Post, \"/room_keys/version\", undefined, {\n        algorithm: pubKey.algorithm,\n        auth_data: authData\n      }, {\n        prefix: ClientPrefix.V3\n      });\n      yield _this15.saveBackupDecryptionKey(randomKey, res.version);\n      return {\n        version: res.version,\n        algorithm: pubKey.algorithm,\n        authData: authData,\n        decryptionKey: randomKey\n      };\n    })();\n  }\n\n  /**\n   * Deletes all key backups.\n   *\n   * Will call the API to delete active backup until there is no more present.\n   */\n  deleteAllKeyBackupVersions() {\n    var _this16 = this;\n    return _asyncToGenerator(function* () {\n      var _yield$_this16$reques, _yield$_this16$reques2;\n      // there could be several backup versions. Delete all to be safe.\n      var current = (_yield$_this16$reques = (_yield$_this16$reques2 = yield _this16.requestKeyBackupVersion()) === null || _yield$_this16$reques2 === void 0 ? void 0 : _yield$_this16$reques2.version) !== null && _yield$_this16$reques !== void 0 ? _yield$_this16$reques : null;\n      while (current != null) {\n        var _yield$_this16$reques3, _yield$_this16$reques4;\n        yield _this16.deleteKeyBackupVersion(current);\n        current = (_yield$_this16$reques3 = (_yield$_this16$reques4 = yield _this16.requestKeyBackupVersion()) === null || _yield$_this16$reques4 === void 0 ? void 0 : _yield$_this16$reques4.version) !== null && _yield$_this16$reques3 !== void 0 ? _yield$_this16$reques3 : null;\n      }\n\n      // XXX: Should this also update Secret Storage and delete any existing keys?\n    })();\n  }\n\n  /**\n   * Deletes the given key backup.\n   *\n   * @param version - The backup version to delete.\n   */\n  deleteKeyBackupVersion(version) {\n    var _this17 = this;\n    return _asyncToGenerator(function* () {\n      logger.debug(\"deleteKeyBackupVersion v:\".concat(version));\n      var path = encodeUri(\"/room_keys/version/$version\", {\n        $version: version\n      });\n      yield _this17.http.authedRequest(Method.Delete, path, undefined, undefined, {\n        prefix: ClientPrefix.V3\n      });\n      // If the backup we are deleting is the active one, we need to disable the key backup and to have the local properties reset\n      if (_this17.activeBackupVersion === version) {\n        _this17.serverBackupInfo = null;\n        yield _this17.disableKeyBackup();\n      }\n    })();\n  }\n\n  /**\n   * Creates a new backup decryptor for the given private key.\n   * @param decryptionKey - The private key to use for decryption.\n   */\n  createBackupDecryptor(decryptionKey) {\n    return new RustBackupDecryptor(decryptionKey);\n  }\n\n  /**\n   * Restore a key backup.\n   *\n   * @param backupVersion - The version of the backup to restore.\n   * @param backupDecryptor - The backup decryptor to use to decrypt the keys.\n   * @param opts - Options for the restore.\n   * @returns The total number of keys and the total imported.\n   */\n  restoreKeyBackup(backupVersion, backupDecryptor, opts) {\n    var _this18 = this;\n    return _asyncToGenerator(function* () {\n      var keyBackup = yield _this18.downloadKeyBackup(backupVersion);\n      return _this18.importKeyBackup(keyBackup, backupVersion, backupDecryptor, opts);\n    })();\n  }\n\n  /**\n   * Call `/room_keys/keys` to download the key backup (room keys) for the given backup version.\n   * https://spec.matrix.org/v1.12/client-server-api/#get_matrixclientv3room_keyskeys\n   *\n   * @param backupVersion\n   * @returns The key backup response.\n   */\n  downloadKeyBackup(backupVersion) {\n    return this.http.authedRequest(Method.Get, \"/room_keys/keys\", {\n      version: backupVersion\n    }, undefined, {\n      prefix: ClientPrefix.V3\n    });\n  }\n\n  /**\n   * Import the room keys from a `/room_keys/keys` call.\n   * Calls `opts.progressCallback` with the progress of the import.\n   *\n   * @param keyBackup - The response from the server containing the keys to import.\n   * @param backupVersion - The version of the backup info.\n   * @param backupDecryptor - The backup decryptor to use to decrypt the keys.\n   * @param opts - Options for the import.\n   *\n   * @returns The total number of keys and the total imported.\n   *\n   * @private\n   */\n  importKeyBackup(keyBackup, backupVersion, backupDecryptor, opts) {\n    var _this19 = this;\n    return _asyncToGenerator(function* () {\n      var _opts$progressCallbac3;\n      // We have a full backup here, it can get quite big, so we need to decrypt and import it in chunks.\n\n      var CHUNK_SIZE = 200;\n      // Get the total count as a first pass\n      var totalKeyCount = countKeysInBackup(keyBackup);\n      var totalImported = 0;\n      var totalFailures = 0;\n      opts === null || opts === void 0 || (_opts$progressCallbac3 = opts.progressCallback) === null || _opts$progressCallbac3 === void 0 || _opts$progressCallbac3.call(opts, {\n        total: totalKeyCount,\n        successes: totalImported,\n        stage: ImportRoomKeyStage.LoadKeys,\n        failures: totalFailures\n      });\n\n      /**\n       * This method is called when we have enough chunks to decrypt.\n       * It will decrypt the chunks and try to import the room keys.\n       * @param roomChunks\n       */\n      var handleChunkCallback = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (roomChunks) {\n          var _opts$progressCallbac4;\n          var currentChunk = [];\n          var _loop = function* _loop(roomId) {\n            // Decrypt the sessions for the given room\n            var decryptedSessions = yield backupDecryptor.decryptSessions(roomChunks.get(roomId));\n            // Add the decrypted sessions to the current chunk\n            decryptedSessions.forEach(session => {\n              // We set the room_id for each session\n              session.room_id = roomId;\n              currentChunk.push(session);\n            });\n          };\n          for (var roomId of roomChunks.keys()) {\n            yield* _loop(roomId);\n          }\n\n          // We have a chunk of decrypted keys: import them\n          try {\n            yield _this19.importBackedUpRoomKeys(currentChunk, backupVersion);\n            totalImported += currentChunk.length;\n          } catch (e) {\n            totalFailures += currentChunk.length;\n            // We failed to import some keys, but we should still try to import the rest?\n            // Log the error and continue\n            logger.error(\"Error importing keys from backup\", e);\n          }\n          opts === null || opts === void 0 || (_opts$progressCallbac4 = opts.progressCallback) === null || _opts$progressCallbac4 === void 0 || _opts$progressCallbac4.call(opts, {\n            total: totalKeyCount,\n            successes: totalImported,\n            stage: ImportRoomKeyStage.LoadKeys,\n            failures: totalFailures\n          });\n        });\n        return function handleChunkCallback(_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n      var groupChunkCount = 0;\n      var chunkGroupByRoom = new Map();\n\n      // Iterate over the rooms and sessions to group them in chunks\n      // And we call the handleChunkCallback when we have enough chunks to decrypt\n      for (var [roomId, roomData] of Object.entries(keyBackup.rooms)) {\n        // If there are no sessions for the room, skip it\n        if (!roomData.sessions) continue;\n\n        // Initialize a new chunk group for the current room\n        chunkGroupByRoom.set(roomId, {});\n        for (var [sessionId, session] of Object.entries(roomData.sessions)) {\n          // We set previously the chunk group for the current room, so we can safely get it\n          var sessionsForRoom = chunkGroupByRoom.get(roomId);\n          sessionsForRoom[sessionId] = session;\n          groupChunkCount += 1;\n          // If we have enough chunks to decrypt, call the block callback\n          if (groupChunkCount >= CHUNK_SIZE) {\n            // We have enough chunks to decrypt\n            yield handleChunkCallback(chunkGroupByRoom);\n            // Reset the chunk group\n            chunkGroupByRoom = new Map();\n            // There might be remaining keys for that room, so add back an entry for the current room.\n            chunkGroupByRoom.set(roomId, {});\n            groupChunkCount = 0;\n          }\n        }\n      }\n\n      // Handle remaining chunk if needed\n      if (groupChunkCount > 0) {\n        yield handleChunkCallback(chunkGroupByRoom);\n      }\n      return {\n        total: totalKeyCount,\n        imported: totalImported\n      };\n    })();\n  }\n}\n\n/**\n * Checks if the provided backup info matches the given private key.\n *\n * @param info - The backup info to check.\n * @param backupDecryptionKey - The `BackupDecryptionKey` private key to check against.\n * @returns `true` if the private key can decrypt the backup, `false` otherwise.\n */\nfunction backupInfoMatchesBackupDecryptionKey(info, backupDecryptionKey) {\n  var _info$auth_data;\n  if (info.algorithm !== \"m.megolm_backup.v1.curve25519-aes-sha2\") {\n    logger.warn(\"backupMatchesPrivateKey: Unsupported backup algorithm\", info.algorithm);\n    return false;\n  }\n  return ((_info$auth_data = info.auth_data) === null || _info$auth_data === void 0 ? void 0 : _info$auth_data.public_key) === backupDecryptionKey.megolmV1PublicKey.publicKeyBase64;\n}\n\n/**\n * Implementation of {@link BackupDecryptor} for the rust crypto backend.\n */\nexport class RustBackupDecryptor {\n  constructor(decryptionKey) {\n    _defineProperty(this, \"decryptionKey\", void 0);\n    _defineProperty(this, \"sourceTrusted\", void 0);\n    this.decryptionKey = decryptionKey;\n    this.sourceTrusted = false;\n  }\n\n  /**\n   * Implements {@link BackupDecryptor#decryptSessions}\n   */\n  decryptSessions(ciphertexts) {\n    var _this20 = this;\n    return _asyncToGenerator(function* () {\n      var keys = [];\n      for (var [sessionId, sessionData] of Object.entries(ciphertexts)) {\n        try {\n          var decrypted = JSON.parse(_this20.decryptionKey.decryptV1(sessionData.session_data.ephemeral, sessionData.session_data.mac, sessionData.session_data.ciphertext));\n          decrypted.session_id = sessionId;\n          keys.push(decrypted);\n        } catch (e) {\n          logger.log(\"Failed to decrypt megolm session from backup\", e, sessionData);\n        }\n      }\n      return keys;\n    })();\n  }\n\n  /**\n   * Implements {@link BackupDecryptor#free}\n   */\n  free() {\n    this.decryptionKey.free();\n  }\n}\n\n/**\n * Fetch a key backup info from the server.\n *\n * If `version` is provided, calls `GET /room_keys/version/$version` and gets the backup info for that version.\n * See https://spec.matrix.org/v1.12/client-server-api/#get_matrixclientv3room_keysversionversion.\n *\n * If not, calls `GET /room_keys/version` and gets the latest backup info.\n * See https://spec.matrix.org/v1.12/client-server-api/#get_matrixclientv3room_keysversion\n *\n * @param http\n * @param version - the specific version of the backup info to fetch\n * @returns The key backup info or null if there is no backup.\n */\nexport function requestKeyBackupVersion(_x2, _x3) {\n  return _requestKeyBackupVersion.apply(this, arguments);\n}\n\n/**\n * Checks if the provided decryption key matches the public key of the key backup info.\n *\n * @param decryptionKey - The decryption key to check.\n * @param keyBackupInfo - The key backup info to check against.\n * @returns `true` if the decryption key matches the key backup info, `false` otherwise.\n */\nfunction _requestKeyBackupVersion() {\n  _requestKeyBackupVersion = _asyncToGenerator(function* (http, version) {\n    try {\n      var path = version ? encodeUri(\"/room_keys/version/$version\", {\n        $version: version\n      }) : \"/room_keys/version\";\n      return yield http.authedRequest(Method.Get, path, undefined, undefined, {\n        prefix: ClientPrefix.V3\n      });\n    } catch (e) {\n      if (e.errcode === \"M_NOT_FOUND\") {\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  });\n  return _requestKeyBackupVersion.apply(this, arguments);\n}\nexport function decryptionKeyMatchesKeyBackupInfo(decryptionKey, keyBackupInfo) {\n  var authData = keyBackupInfo.auth_data;\n  return authData.public_key === decryptionKey.megolmV1PublicKey.publicKeyBase64;\n}\n\n/**\n * Counts the total number of keys present in a key backup.\n * @param keyBackup - The key backup to count the keys from.\n * @returns The total number of keys in the backup.\n */\nfunction countKeysInBackup(keyBackup) {\n  var count = 0;\n  for (var {\n    sessions\n  } of Object.values(keyBackup.rooms)) {\n    count += Object.keys(sessions).length;\n  }\n  return count;\n}\n\n/**\n * Response from GET `/room_keys/keys` endpoint.\n * See https://spec.matrix.org/latest/client-server-api/#get_matrixclientv3room_keyskeys\n */\n//# sourceMappingURL=backup.js.map","import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { defer, logDuration } from \"../utils.js\";\n\n/**\n * OutgoingRequestsManager: responsible for processing outgoing requests from the OlmMachine.\n * Ensure that only one loop is going on at once, and that the requests are processed in order.\n */\nexport class OutgoingRequestsManager {\n  constructor(logger, olmMachine, outgoingRequestProcessor) {\n    this.logger = logger;\n    this.olmMachine = olmMachine;\n    this.outgoingRequestProcessor = outgoingRequestProcessor;\n    /** whether {@link stop} has been called */\n    _defineProperty(this, \"stopped\", false);\n    /** whether {@link outgoingRequestLoop} is currently running */\n    _defineProperty(this, \"outgoingRequestLoopRunning\", false);\n    /**\n     * If there are additional calls to doProcessOutgoingRequests() while there is a current call running\n     * we need to remember in order to call `doProcessOutgoingRequests` again (as there could be new requests).\n     *\n     * If this is defined, it is an indication that we need to do another iteration; in this case the deferred\n     * will resolve once that next iteration completes. If it is undefined, there have been no new calls\n     * to `doProcessOutgoingRequests` since the current iteration started.\n     */\n    _defineProperty(this, \"nextLoopDeferred\", void 0);\n  }\n\n  /**\n   * Shut down as soon as possible the current loop of outgoing requests processing.\n   */\n  stop() {\n    this.stopped = true;\n  }\n\n  /**\n   * Process the OutgoingRequests from the OlmMachine.\n   *\n   * This should be called at the end of each sync, to process any OlmMachine OutgoingRequests created by the rust sdk.\n   * In some cases if OutgoingRequests need to be sent immediately, this can be called directly.\n   *\n   * Calls to doProcessOutgoingRequests() are processed synchronously, one after the other, in order.\n   * If doProcessOutgoingRequests() is called while another call is still being processed, it will be queued.\n   * Multiple calls to doProcessOutgoingRequests() when a call is already processing will be batched together.\n   */\n  doProcessOutgoingRequests() {\n    // Flag that we need at least one more iteration of the loop.\n    //\n    // It is important that we do this even if the loop is currently running. There is potential for a race whereby\n    // a request is added to the queue *after* `OlmMachine.outgoingRequests` checks the queue, but *before* it\n    // returns. In such a case, the item could sit there unnoticed for some time.\n    //\n    // In order to circumvent the race, we set a flag which tells the loop to go round once again even if the\n    // queue appears to be empty.\n    if (!this.nextLoopDeferred) {\n      this.nextLoopDeferred = defer();\n    }\n\n    // ... and wait for it to complete.\n    var result = this.nextLoopDeferred.promise;\n\n    // set the loop going if it is not already.\n    if (!this.outgoingRequestLoopRunning) {\n      this.outgoingRequestLoop().catch(e => {\n        // this should not happen; outgoingRequestLoop should return any errors via `nextLoopDeferred`.\n        /* istanbul ignore next */\n        this.logger.error(\"Uncaught error in outgoing request loop\", e);\n      });\n    }\n    return result;\n  }\n  outgoingRequestLoop() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      /* istanbul ignore if */\n      if (_this.outgoingRequestLoopRunning) {\n        throw new Error(\"Cannot run two outgoing request loops\");\n      }\n      _this.outgoingRequestLoopRunning = true;\n      try {\n        while (!_this.stopped && _this.nextLoopDeferred) {\n          var deferred = _this.nextLoopDeferred;\n\n          // reset `nextLoopDeferred` so that any future calls to `doProcessOutgoingRequests` are queued\n          // for another additional iteration.\n          _this.nextLoopDeferred = undefined;\n\n          // make the requests and feed the results back to the `nextLoopDeferred`\n          yield _this.processOutgoingRequests().then(deferred.resolve, deferred.reject);\n        }\n      } finally {\n        _this.outgoingRequestLoopRunning = false;\n      }\n      if (_this.nextLoopDeferred) {\n        // the loop was stopped, but there was a call to `doProcessOutgoingRequests`. Make sure that\n        // we reject the promise in case anything is waiting for it.\n        _this.nextLoopDeferred.reject(new Error(\"OutgoingRequestsManager was stopped\"));\n      }\n    })();\n  }\n\n  /**\n   * Make a single request to `olmMachine.outgoingRequests` and do the corresponding requests.\n   */\n  processOutgoingRequests() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2.stopped) return;\n      var outgoingRequests = yield _this2.olmMachine.outgoingRequests();\n      var _loop = function* _loop(request) {\n          if (_this2.stopped) return {\n            v: void 0\n          };\n          try {\n            yield logDuration(_this2.logger, \"Make outgoing request \".concat(request.type), /*#__PURE__*/_asyncToGenerator(function* () {\n              yield _this2.outgoingRequestProcessor.makeOutgoingRequest(request);\n            }));\n          } catch (e) {\n            // as part of the loop we silently ignore errors, but log them.\n            // The rust sdk will retry the request later as it won't have been marked as sent.\n            _this2.logger.error(\"Failed to process outgoing request \".concat(request.type, \": \").concat(e));\n          }\n        },\n        _ret;\n      for (var request of outgoingRequests) {\n        _ret = yield* _loop(request);\n        if (_ret) return _ret.v;\n      }\n    })();\n  }\n}\n//# sourceMappingURL=OutgoingRequestsManager.js.map","import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n/*\nCopyright 2023 - 2024 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { CryptoEvent } from \"../crypto-api/index.js\";\nimport { ClientPrefix, MatrixError, Method } from \"../http-api/index.js\";\nimport { encodeUri, sleep } from \"../utils.js\";\n// The minimum time to wait between two retries in case of errors. To avoid hammering the server.\nvar KEY_BACKUP_BACKOFF = 5000; // ms\n\n/**\n * Enumerates the different kind of errors that can occurs when downloading and importing a key from backup.\n */\nvar KeyDownloadErrorCode = /*#__PURE__*/function (KeyDownloadErrorCode) {\n  /** The requested key is not in the backup. */\n  KeyDownloadErrorCode[\"MISSING_DECRYPTION_KEY\"] = \"MISSING_DECRYPTION_KEY\";\n  /** A network error occurred while trying to download the key from backup. */\n  KeyDownloadErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n  /** The loop has been stopped. */\n  KeyDownloadErrorCode[\"STOPPED\"] = \"STOPPED\";\n  return KeyDownloadErrorCode;\n}(KeyDownloadErrorCode || {});\nclass KeyDownloadError extends Error {\n  constructor(code) {\n    super(\"Failed to get key from backup: \".concat(code));\n    this.code = code;\n    this.name = \"KeyDownloadError\";\n  }\n}\nclass KeyDownloadRateLimitError extends Error {\n  constructor(retryMillis) {\n    super(\"Failed to get key from backup: rate limited\");\n    this.retryMillis = retryMillis;\n    this.name = \"KeyDownloadRateLimitError\";\n  }\n}\n\n/** Details of a megolm session whose key we are trying to fetch. */\n\n/** Holds the current backup decryptor and version that should be used.\n *\n * This is intended to be used as an immutable object (a new instance should be created if the configuration changes),\n * and some of the logic relies on that, so the properties are marked as `readonly`.\n */\n\n/**\n * Used when an 'unable to decrypt' error occurs. It attempts to download the key from the backup.\n *\n * The current backup API lacks pagination, which can lead to lengthy key retrieval times for large histories (several 10s of minutes).\n * To mitigate this, keys are downloaded on demand as decryption errors occurs.\n * While this approach may result in numerous requests, it improves user experience by reducing wait times for message decryption.\n *\n * The PerSessionKeyBackupDownloader is resistant to backup configuration changes: it will automatically resume querying when\n * the backup is configured correctly.\n */\nexport class PerSessionKeyBackupDownloader {\n  /**\n   * Creates a new instance of PerSessionKeyBackupDownloader.\n   *\n   * @param backupManager - The backup manager to use.\n   * @param olmMachine - The olm machine to use.\n   * @param http - The http instance to use.\n   * @param logger - The logger to use.\n   */\n  constructor(logger, olmMachine, http, backupManager) {\n    this.olmMachine = olmMachine;\n    this.http = http;\n    this.backupManager = backupManager;\n    _defineProperty(this, \"stopped\", false);\n    /**\n     * The version and decryption key to use with current backup if all set up correctly.\n     *\n     * Will not be set unless `hasConfigurationProblem` is `false`.\n     */\n    _defineProperty(this, \"configuration\", null);\n    /** We remember when a session was requested and not found in backup to avoid query again too soon.\n     * Map of session_id to timestamp */\n    _defineProperty(this, \"sessionLastCheckAttemptedTime\", new Map());\n    /** The logger to use */\n    _defineProperty(this, \"logger\", void 0);\n    /** Whether the download loop is running. */\n    _defineProperty(this, \"downloadLoopRunning\", false);\n    /** The list of requests that are queued. */\n    _defineProperty(this, \"queuedRequests\", []);\n    /** Remembers if we have a configuration problem. */\n    _defineProperty(this, \"hasConfigurationProblem\", false);\n    /** The current server backup version check promise. To avoid doing a server call if one is in flight. */\n    _defineProperty(this, \"currentBackupVersionCheck\", null);\n    /**\n     * Called when the backup status changes (CryptoEvents)\n     * This will trigger a check of the backup configuration.\n     */\n    _defineProperty(this, \"onBackupStatusChanged\", () => {\n      // we want to force check configuration, so we clear the current one.\n      this.hasConfigurationProblem = false;\n      this.configuration = null;\n      this.getOrCreateBackupConfiguration().then(configuration => {\n        if (configuration) {\n          // restart the download loop if it was stopped\n          this.downloadKeysLoop();\n        }\n      });\n    });\n    this.logger = logger.getChild(\"[PerSessionKeyBackupDownloader]\");\n    backupManager.on(CryptoEvent.KeyBackupStatus, this.onBackupStatusChanged);\n    backupManager.on(CryptoEvent.KeyBackupFailed, this.onBackupStatusChanged);\n    backupManager.on(CryptoEvent.KeyBackupDecryptionKeyCached, this.onBackupStatusChanged);\n  }\n\n  /**\n   * Check if key download is successfully configured and active.\n   *\n   * @return `true` if key download is correctly configured and active; otherwise `false`.\n   */\n  isKeyBackupDownloadConfigured() {\n    return this.configuration !== null;\n  }\n\n  /**\n   * Return the details of the latest backup on the server, when we last checked.\n   *\n   * This is just a convenience method to expose {@link RustBackupManager.getServerBackupInfo}.\n   */\n  getServerBackupInfo() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return yield _this.backupManager.getServerBackupInfo();\n    })();\n  }\n\n  /**\n   * Called when a MissingRoomKey or UnknownMessageIndex decryption error is encountered.\n   *\n   * This will try to download the key from the backup if there is a trusted active backup.\n   * In case of success the key will be imported and the onRoomKeysUpdated callback will be called\n   * internally by the rust-sdk and decryption will be retried.\n   *\n   * @param roomId - The room ID of the room where the error occurred.\n   * @param megolmSessionId - The megolm session ID that is missing.\n   */\n  onDecryptionKeyMissingError(roomId, megolmSessionId) {\n    // Several messages encrypted with the same session may be decrypted at the same time,\n    // so we need to be resistant and not query several time the same session.\n    if (this.isAlreadyInQueue(roomId, megolmSessionId)) {\n      // There is already a request queued for this session, no need to queue another one.\n      this.logger.trace(\"Not checking key backup for session \".concat(megolmSessionId, \" as it is already queued\"));\n      return;\n    }\n    if (this.wasRequestedRecently(megolmSessionId)) {\n      // We already tried to download this session recently and it was not in backup, no need to try again.\n      this.logger.trace(\"Not checking key backup for session \".concat(megolmSessionId, \" as it was already requested recently\"));\n      return;\n    }\n\n    // We always add the request to the queue, even if we have a configuration problem (can't access backup).\n    // This is to make sure that if the configuration problem is resolved, we will try to download the key.\n    // This will happen after an initial sync, at this point the backup will not yet be trusted and the decryption\n    // key will not be available, but it will be just after the verification.\n    // We don't need to persist it because currently on refresh the sdk will retry to decrypt the messages in error.\n    this.queuedRequests.push({\n      roomId,\n      megolmSessionId\n    });\n\n    // Start the download loop if it's not already running.\n    this.downloadKeysLoop();\n  }\n  stop() {\n    this.stopped = true;\n    this.backupManager.off(CryptoEvent.KeyBackupStatus, this.onBackupStatusChanged);\n    this.backupManager.off(CryptoEvent.KeyBackupFailed, this.onBackupStatusChanged);\n    this.backupManager.off(CryptoEvent.KeyBackupDecryptionKeyCached, this.onBackupStatusChanged);\n  }\n  /** Returns true if the megolm session is already queued for download. */\n  isAlreadyInQueue(roomId, megolmSessionId) {\n    return this.queuedRequests.some(info => {\n      return info.roomId == roomId && info.megolmSessionId == megolmSessionId;\n    });\n  }\n\n  /**\n   * Marks the session as not found in backup, to avoid retrying to soon for a key not in backup\n   *\n   * @param megolmSessionId - The megolm session ID that is missing.\n   */\n  markAsNotFoundInBackup(megolmSessionId) {\n    var now = Date.now();\n    this.sessionLastCheckAttemptedTime.set(megolmSessionId, now);\n    // if too big make some cleaning to keep under control\n    if (this.sessionLastCheckAttemptedTime.size > 100) {\n      this.sessionLastCheckAttemptedTime = new Map(Array.from(this.sessionLastCheckAttemptedTime).filter((sid, ts) => {\n        return Math.max(now - ts, 0) < KEY_BACKUP_BACKOFF;\n      }));\n    }\n  }\n\n  /** Returns true if the session was requested recently. */\n  wasRequestedRecently(megolmSessionId) {\n    var lastCheck = this.sessionLastCheckAttemptedTime.get(megolmSessionId);\n    if (!lastCheck) return false;\n    return Math.max(Date.now() - lastCheck, 0) < KEY_BACKUP_BACKOFF;\n  }\n  getBackupDecryptionKey() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        return yield _this2.olmMachine.getBackupKeys();\n      } catch (_unused) {\n        return null;\n      }\n    })();\n  }\n\n  /**\n   * Requests a key from the server side backup.\n   *\n   * @param version - The backup version to use.\n   * @param roomId - The room ID of the room where the error occurred.\n   * @param sessionId - The megolm session ID that is missing.\n   */\n  requestRoomKeyFromBackup(version, roomId, sessionId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      var path = encodeUri(\"/room_keys/keys/$roomId/$sessionId\", {\n        $roomId: roomId,\n        $sessionId: sessionId\n      });\n      return yield _this3.http.authedRequest(Method.Get, path, {\n        version\n      }, undefined, {\n        prefix: ClientPrefix.V3\n      });\n    })();\n  }\n  downloadKeysLoop() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (_this4.downloadLoopRunning) return;\n\n      // If we have a configuration problem, we don't want to try to download.\n      // If any configuration change is detected, we will retry and restart the loop.\n      if (_this4.hasConfigurationProblem) return;\n      _this4.downloadLoopRunning = true;\n      try {\n        while (_this4.queuedRequests.length > 0) {\n          // we just peek the first one without removing it, so if a new request for same key comes in while we're\n          // processing this one, it won't queue another request.\n          var request = _this4.queuedRequests[0];\n          try {\n            // The backup could have changed between the time we queued the request and now, so we need to check\n            var configuration = yield _this4.getOrCreateBackupConfiguration();\n            if (!configuration) {\n              // Backup is not configured correctly, so stop the loop.\n              _this4.downloadLoopRunning = false;\n              return;\n            }\n            var result = yield _this4.queryKeyBackup(request.roomId, request.megolmSessionId, configuration);\n            if (_this4.stopped) {\n              return;\n            }\n            // We got the encrypted key from backup, let's try to decrypt and import it.\n            try {\n              yield _this4.decryptAndImport(request, result, configuration);\n            } catch (e) {\n              _this4.logger.error(\"Error while decrypting and importing key backup for session \".concat(request.megolmSessionId), e);\n            }\n            // now remove the request from the queue as we've processed it.\n            _this4.queuedRequests.shift();\n          } catch (err) {\n            if (err instanceof KeyDownloadError) {\n              switch (err.code) {\n                case KeyDownloadErrorCode.MISSING_DECRYPTION_KEY:\n                  _this4.markAsNotFoundInBackup(request.megolmSessionId);\n                  // continue for next one\n                  _this4.queuedRequests.shift();\n                  break;\n                case KeyDownloadErrorCode.NETWORK_ERROR:\n                  // We don't want to hammer if there is a problem, so wait a bit.\n                  yield sleep(KEY_BACKUP_BACKOFF);\n                  break;\n                case KeyDownloadErrorCode.STOPPED:\n                  // If the downloader was stopped, we don't want to retry.\n                  _this4.downloadLoopRunning = false;\n                  return;\n              }\n            } else if (err instanceof KeyDownloadRateLimitError) {\n              // we want to retry after the backoff time\n              yield sleep(err.retryMillis);\n            }\n          }\n        }\n      } finally {\n        // all pending request have been processed, we can stop the loop.\n        _this4.downloadLoopRunning = false;\n      }\n    })();\n  }\n\n  /**\n   * Query the backup for a key.\n   *\n   * @param targetRoomId - ID of the room that the session is used in.\n   * @param targetSessionId - ID of the session for which to check backup.\n   * @param configuration - The backup configuration to use.\n   */\n  queryKeyBackup(targetRoomId, targetSessionId, configuration) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      _this5.logger.debug(\"Checking key backup for session \".concat(targetSessionId));\n      if (_this5.stopped) throw new KeyDownloadError(KeyDownloadErrorCode.STOPPED);\n      try {\n        var res = yield _this5.requestRoomKeyFromBackup(configuration.backupVersion, targetRoomId, targetSessionId);\n        _this5.logger.debug(\"Got key from backup for sessionId:\".concat(targetSessionId));\n        return res;\n      } catch (e) {\n        if (_this5.stopped) throw new KeyDownloadError(KeyDownloadErrorCode.STOPPED);\n        _this5.logger.info(\"No luck requesting key backup for session \".concat(targetSessionId, \": \").concat(e));\n        if (e instanceof MatrixError) {\n          var errCode = e.data.errcode;\n          if (errCode == \"M_NOT_FOUND\") {\n            // Unfortunately the spec doesn't give us a way to differentiate between a missing key and a wrong version.\n            // Synapse will return:\n            //     - \"error\": \"Unknown backup version\" if the version is wrong.\n            //     - \"error\": \"No room_keys found\" if the key is missing.\n            // It's useful to know if the key is missing or if the version is wrong.\n            // As it's not spec'ed, we fall back on considering the key is not in backup.\n            // Notice that this request will be lost if instead the backup got out of sync (updated from other session).\n            throw new KeyDownloadError(KeyDownloadErrorCode.MISSING_DECRYPTION_KEY);\n          }\n          if (e.isRateLimitError()) {\n            var waitTime;\n            try {\n              var _e$getRetryAfterMs;\n              waitTime = (_e$getRetryAfterMs = e.getRetryAfterMs()) !== null && _e$getRetryAfterMs !== void 0 ? _e$getRetryAfterMs : undefined;\n            } catch (error) {\n              _this5.logger.warn(\"Error while retrieving a rate-limit retry delay\", error);\n            }\n            if (waitTime && waitTime > 0) {\n              _this5.logger.info(\"Rate limited by server, waiting \".concat(waitTime, \"ms\"));\n            }\n            throw new KeyDownloadRateLimitError(waitTime !== null && waitTime !== void 0 ? waitTime : KEY_BACKUP_BACKOFF);\n          }\n        }\n        throw new KeyDownloadError(KeyDownloadErrorCode.NETWORK_ERROR);\n      }\n    })();\n  }\n  decryptAndImport(sessionInfo, data, configuration) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      var sessionsToImport = {\n        [sessionInfo.megolmSessionId]: data\n      };\n      var keys = yield configuration.decryptor.decryptSessions(sessionsToImport);\n      for (var k of keys) {\n        k.room_id = sessionInfo.roomId;\n      }\n      yield _this6.backupManager.importBackedUpRoomKeys(keys, configuration.backupVersion);\n    })();\n  }\n\n  /**\n   * Gets the current backup configuration or create one if it doesn't exist.\n   *\n   * When a valid configuration is found it is cached and returned for subsequent calls.\n   * Otherwise, if a check is forced or a check has not yet been done, a new check is done.\n   *\n   * @returns The backup configuration to use or null if there is a configuration problem.\n   */\n  getOrCreateBackupConfiguration() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      if (_this7.configuration) {\n        return _this7.configuration;\n      }\n\n      // We already tried to check the configuration and it failed.\n      // We don't want to try again immediately, we will retry if a configuration change is detected.\n      if (_this7.hasConfigurationProblem) {\n        return null;\n      }\n\n      // This method can be called rapidly by several emitted CryptoEvent, so we need to make sure that we don't\n      // query the server several times.\n      if (_this7.currentBackupVersionCheck != null) {\n        _this7.logger.debug(\"Already checking server version, use current promise\");\n        return yield _this7.currentBackupVersionCheck;\n      }\n      _this7.currentBackupVersionCheck = _this7.internalCheckFromServer();\n      try {\n        return yield _this7.currentBackupVersionCheck;\n      } finally {\n        _this7.currentBackupVersionCheck = null;\n      }\n    })();\n  }\n  internalCheckFromServer() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      var _currentServerVersion, _currentServerVersion2, _currentServerVersion4;\n      var currentServerVersion = null;\n      try {\n        currentServerVersion = yield _this8.backupManager.getServerBackupInfo();\n      } catch (e) {\n        _this8.logger.debug(\"Backup: error while checking server version: \".concat(e));\n        _this8.hasConfigurationProblem = true;\n        return null;\n      }\n      _this8.logger.debug(\"Got current backup version from server: \".concat((_currentServerVersion = currentServerVersion) === null || _currentServerVersion === void 0 ? void 0 : _currentServerVersion.version));\n      if (((_currentServerVersion2 = currentServerVersion) === null || _currentServerVersion2 === void 0 ? void 0 : _currentServerVersion2.algorithm) != \"m.megolm_backup.v1.curve25519-aes-sha2\") {\n        var _currentServerVersion3;\n        _this8.logger.info(\"Unsupported algorithm \".concat((_currentServerVersion3 = currentServerVersion) === null || _currentServerVersion3 === void 0 ? void 0 : _currentServerVersion3.algorithm));\n        _this8.hasConfigurationProblem = true;\n        return null;\n      }\n      if (!((_currentServerVersion4 = currentServerVersion) !== null && _currentServerVersion4 !== void 0 && _currentServerVersion4.version)) {\n        _this8.logger.info(\"No current key backup\");\n        _this8.hasConfigurationProblem = true;\n        return null;\n      }\n      var activeVersion = yield _this8.backupManager.getActiveBackupVersion();\n      if (activeVersion == null || currentServerVersion.version != activeVersion) {\n        // Either the current backup version on server side is not trusted, or it is out of sync with the active version on the client side.\n        _this8.logger.info(\"The current backup version on the server (\".concat(currentServerVersion.version, \") is not trusted. Version we are currently backing up to: \").concat(activeVersion));\n        _this8.hasConfigurationProblem = true;\n        return null;\n      }\n      var backupKeys = yield _this8.getBackupDecryptionKey();\n      if (!(backupKeys !== null && backupKeys !== void 0 && backupKeys.decryptionKey)) {\n        _this8.logger.debug(\"Not checking key backup for session (no decryption key)\");\n        _this8.hasConfigurationProblem = true;\n        return null;\n      }\n      if (activeVersion != backupKeys.backupVersion) {\n        _this8.logger.debug(\"Version for which we have a decryption key (\".concat(backupKeys.backupVersion, \") doesn't match the version we are backing up to (\").concat(activeVersion, \")\"));\n        _this8.hasConfigurationProblem = true;\n        return null;\n      }\n      var authData = currentServerVersion.auth_data;\n      if (authData.public_key != backupKeys.decryptionKey.megolmV1PublicKey.publicKeyBase64) {\n        _this8.logger.debug(\"Key backup on server does not match our decryption key\");\n        _this8.hasConfigurationProblem = true;\n        return null;\n      }\n      var backupDecryptor = _this8.backupManager.createBackupDecryptor(backupKeys.decryptionKey);\n      _this8.hasConfigurationProblem = false;\n      _this8.configuration = {\n        decryptor: backupDecryptor,\n        backupVersion: activeVersion\n      };\n      return _this8.configuration;\n    })();\n  }\n}\n//# sourceMappingURL=PerSessionKeyBackupDownloader.js.map","/*\n * Copyright 2024 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deriveRecoveryKeyFromPassphrase } from \"../crypto-api/index.js\";\n\n/* eslint-disable camelcase */\n\n/**\n * Derive a backup key from a passphrase using the salt and iterations from the auth data.\n * @param authData - The auth data containing the salt and iterations\n * @param passphrase - The passphrase to derive the key from\n * @deprecated Deriving a backup key from a passphrase is not part of the matrix spec. Instead, a random key is generated and stored/shared via 4S.\n */\nexport function keyFromAuthData(authData, passphrase) {\n  if (!authData.private_key_salt || !authData.private_key_iterations) {\n    throw new Error(\"Salt and/or iterations not found: \" + \"this backup cannot be restored with a passphrase\");\n  }\n  return deriveRecoveryKeyFromPassphrase(passphrase, authData.private_key_salt, authData.private_key_iterations, authData.private_key_bits);\n}\n//# sourceMappingURL=key-passphrase.js.map","import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n/*\nCopyright 2022-2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport anotherjson from \"another-json\";\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport { KnownMembership } from \"../@types/membership.js\";\nimport { MatrixEventEvent } from \"../models/event.js\";\nimport { DecryptionError } from \"../common-crypto/CryptoBackend.js\";\nimport { logger, LogSpan } from \"../logger.js\";\nimport { Method } from \"../http-api/index.js\";\nimport { RoomEncryptor } from \"./RoomEncryptor.js\";\nimport { OutgoingRequestProcessor } from \"./OutgoingRequestProcessor.js\";\nimport { KeyClaimManager } from \"./KeyClaimManager.js\";\nimport { logDuration, MapWithDefault } from \"../utils.js\";\nimport { CrossSigningKey, DecryptionFailureCode, DeviceVerificationStatus, EventShieldColour, EventShieldReason, UserVerificationStatus, encodeRecoveryKey, deriveRecoveryKeyFromPassphrase, AllDevicesIsolationMode, DeviceIsolationModeKind, CryptoEvent, ImportRoomKeyStage } from \"../crypto-api/index.js\";\nimport { deviceKeysToDeviceMap, rustDeviceToJsDevice } from \"./device-converter.js\";\nimport { SECRET_STORAGE_ALGORITHM_V1_AES } from \"../secret-storage.js\";\nimport { CrossSigningIdentity } from \"./CrossSigningIdentity.js\";\nimport { secretStorageCanAccessSecrets, secretStorageContainsCrossSigningKeys } from \"./secret-storage.js\";\nimport { isVerificationEvent, RustVerificationRequest, verificationMethodIdentifierToMethod } from \"./verification.js\";\nimport { EventType, MsgType } from \"../@types/event.js\";\nimport { TypedEventEmitter } from \"../models/typed-event-emitter.js\";\nimport { decryptionKeyMatchesKeyBackupInfo, RustBackupManager } from \"./backup.js\";\nimport { TypedReEmitter } from \"../ReEmitter.js\";\nimport { secureRandomString } from \"../randomstring.js\";\nimport { ClientStoppedError } from \"../errors.js\";\nimport { decodeBase64, encodeBase64 } from \"../base64.js\";\nimport { OutgoingRequestsManager } from \"./OutgoingRequestsManager.js\";\nimport { PerSessionKeyBackupDownloader } from \"./PerSessionKeyBackupDownloader.js\";\nimport { DehydratedDeviceManager } from \"./DehydratedDeviceManager.js\";\nimport { VerificationMethod } from \"../types.js\";\nimport { keyFromAuthData } from \"../common-crypto/key-passphrase.js\";\nvar ALL_VERIFICATION_METHODS = [VerificationMethod.Sas, VerificationMethod.ScanQrCode, VerificationMethod.ShowQrCode, VerificationMethod.Reciprocate];\n/**\n * An implementation of {@link CryptoBackend} using the Rust matrix-sdk-crypto.\n *\n * @internal\n */\nexport class RustCrypto extends TypedEventEmitter {\n  constructor(logger, /** The `OlmMachine` from the underlying rust crypto sdk. */\n  olmMachine,\n  /**\n   * Low-level HTTP interface: used to make outgoing requests required by the rust SDK.\n   *\n   * We expect it to set the access token, etc.\n   */\n  http, /** The local user's User ID. */\n  userId, /** The local user's Device ID. */\n  _deviceId, /** Interface to server-side secret storage */\n  secretStorage, /** Crypto callbacks provided by the application */\n  cryptoCallbacks) {\n    super();\n    this.logger = logger;\n    this.olmMachine = olmMachine;\n    this.http = http;\n    this.userId = userId;\n    this.secretStorage = secretStorage;\n    this.cryptoCallbacks = cryptoCallbacks;\n    /**\n     * The number of iterations to use when deriving a recovery key from a passphrase.\n     */\n    _defineProperty(this, \"RECOVERY_KEY_DERIVATION_ITERATIONS\", 500000);\n    _defineProperty(this, \"_trustCrossSignedDevices\", true);\n    _defineProperty(this, \"deviceIsolationMode\", new AllDevicesIsolationMode(false));\n    /** whether {@link stop} has been called */\n    _defineProperty(this, \"stopped\", false);\n    /** mapping of roomId → encryptor class */\n    _defineProperty(this, \"roomEncryptors\", {});\n    _defineProperty(this, \"eventDecryptor\", void 0);\n    _defineProperty(this, \"keyClaimManager\", void 0);\n    _defineProperty(this, \"outgoingRequestProcessor\", void 0);\n    _defineProperty(this, \"crossSigningIdentity\", void 0);\n    _defineProperty(this, \"backupManager\", void 0);\n    _defineProperty(this, \"outgoingRequestsManager\", void 0);\n    _defineProperty(this, \"perSessionBackupDownloader\", void 0);\n    _defineProperty(this, \"dehydratedDeviceManager\", void 0);\n    _defineProperty(this, \"reemitter\", new TypedReEmitter(this));\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // CryptoApi implementation\n    //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    _defineProperty(this, \"globalBlacklistUnverifiedDevices\", false);\n    /**\n     * The verification methods we offer to the other side during an interactive verification.\n     */\n    _defineProperty(this, \"_supportedVerificationMethods\", ALL_VERIFICATION_METHODS);\n    this.outgoingRequestProcessor = new OutgoingRequestProcessor(olmMachine, http);\n    this.outgoingRequestsManager = new OutgoingRequestsManager(this.logger, olmMachine, this.outgoingRequestProcessor);\n    this.keyClaimManager = new KeyClaimManager(olmMachine, this.outgoingRequestProcessor);\n    this.backupManager = new RustBackupManager(olmMachine, http, this.outgoingRequestProcessor);\n    this.perSessionBackupDownloader = new PerSessionKeyBackupDownloader(this.logger, this.olmMachine, this.http, this.backupManager);\n    this.dehydratedDeviceManager = new DehydratedDeviceManager(this.logger, olmMachine, http, this.outgoingRequestProcessor, secretStorage);\n    this.eventDecryptor = new EventDecryptor(this.logger, olmMachine, this.perSessionBackupDownloader);\n\n    // re-emit the events emitted by managers\n    this.reemitter.reEmit(this.backupManager, [CryptoEvent.KeyBackupStatus, CryptoEvent.KeyBackupSessionsRemaining, CryptoEvent.KeyBackupFailed, CryptoEvent.KeyBackupDecryptionKeyCached]);\n    this.reemitter.reEmit(this.dehydratedDeviceManager, [CryptoEvent.DehydratedDeviceCreated, CryptoEvent.DehydratedDeviceUploaded, CryptoEvent.RehydrationStarted, CryptoEvent.RehydrationProgress, CryptoEvent.RehydrationCompleted, CryptoEvent.RehydrationError, CryptoEvent.DehydrationKeyCached, CryptoEvent.DehydratedDeviceRotationError]);\n    this.crossSigningIdentity = new CrossSigningIdentity(olmMachine, this.outgoingRequestProcessor, secretStorage);\n\n    // Check and start in background the key backup connection\n    this.checkKeyBackupAndEnable();\n  }\n\n  /**\n   * Return the OlmMachine only if {@link RustCrypto#stop} has not been called.\n   *\n   * This allows us to better handle race conditions where the client is stopped before or during a crypto API call.\n   *\n   * @throws ClientStoppedError if {@link RustCrypto#stop} has been called.\n   */\n  getOlmMachineOrThrow() {\n    if (this.stopped) {\n      throw new ClientStoppedError();\n    }\n    return this.olmMachine;\n  }\n\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //\n  // CryptoBackend implementation\n  //\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  set globalErrorOnUnknownDevices(_v) {\n    // Not implemented for rust crypto.\n  }\n  get globalErrorOnUnknownDevices() {\n    // Not implemented for rust crypto.\n    return false;\n  }\n  stop() {\n    // stop() may be called multiple times, but attempting to close() the OlmMachine twice\n    // will cause an error.\n    if (this.stopped) {\n      return;\n    }\n    this.stopped = true;\n    this.keyClaimManager.stop();\n    this.backupManager.stop();\n    this.outgoingRequestsManager.stop();\n    this.perSessionBackupDownloader.stop();\n    this.dehydratedDeviceManager.stop();\n\n    // make sure we close() the OlmMachine; doing so means that all the Rust objects will be\n    // cleaned up; in particular, the indexeddb connections will be closed, which means they\n    // can then be deleted.\n    this.olmMachine.close();\n  }\n  encryptEvent(event, _room) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var roomId = event.getRoomId();\n      var encryptor = _this.roomEncryptors[roomId];\n      if (!encryptor) {\n        throw new Error(\"Cannot encrypt event in unconfigured room \".concat(roomId));\n      }\n      yield encryptor.encryptEvent(event, _this.globalBlacklistUnverifiedDevices, _this.deviceIsolationMode);\n    })();\n  }\n  decryptEvent(event) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      var roomId = event.getRoomId();\n      if (!roomId) {\n        // presumably, a to-device message. These are normally decrypted in preprocessToDeviceMessages\n        // so the fact it has come back here suggests that decryption failed.\n        //\n        // once we drop support for the libolm crypto implementation, we can stop passing to-device messages\n        // through decryptEvent and hence get rid of this case.\n        throw new Error(\"to-device event was not decrypted in preprocessToDeviceMessages\");\n      }\n      return yield _this2.eventDecryptor.attemptEventDecryption(event, _this2.deviceIsolationMode);\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoBackend#getBackupDecryptor}.\n   */\n  getBackupDecryptor(backupInfo, privKey) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (!(privKey instanceof Uint8Array)) {\n        throw new Error(\"getBackupDecryptor: expects Uint8Array\");\n      }\n      if (backupInfo.algorithm != \"m.megolm_backup.v1.curve25519-aes-sha2\") {\n        throw new Error(\"getBackupDecryptor: Unsupported algorithm \".concat(backupInfo.algorithm));\n      }\n      var backupDecryptionKey = RustSdkCryptoJs.BackupDecryptionKey.fromBase64(encodeBase64(privKey));\n      if (!decryptionKeyMatchesKeyBackupInfo(backupDecryptionKey, backupInfo)) {\n        throw new Error(\"getBackupDecryptor: key backup on server does not match the decryption key\");\n      }\n      return _this3.backupManager.createBackupDecryptor(backupDecryptionKey);\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoBackend#importBackedUpRoomKeys}.\n   */\n  importBackedUpRoomKeys(keys, backupVersion, opts) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return yield _this4.backupManager.importBackedUpRoomKeys(keys, backupVersion, opts);\n    })();\n  }\n  /**\n   * Implementation of {@link CryptoApi#getVersion}.\n   */\n  getVersion() {\n    var versions = RustSdkCryptoJs.getVersions();\n    return \"Rust SDK \".concat(versions.matrix_sdk_crypto, \" (\").concat(versions.git_sha, \"), Vodozemac \").concat(versions.vodozemac);\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#setDeviceIsolationMode}.\n   */\n  setDeviceIsolationMode(isolationMode) {\n    this.deviceIsolationMode = isolationMode;\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#isEncryptionEnabledInRoom}.\n   */\n  isEncryptionEnabledInRoom(roomId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      var roomSettings = yield _this5.olmMachine.getRoomSettings(new RustSdkCryptoJs.RoomId(roomId));\n      return Boolean(roomSettings === null || roomSettings === void 0 ? void 0 : roomSettings.algorithm);\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#getOwnDeviceKeys}.\n   */\n  getOwnDeviceKeys() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      var keys = _this6.olmMachine.identityKeys;\n      return {\n        ed25519: keys.ed25519.toBase64(),\n        curve25519: keys.curve25519.toBase64()\n      };\n    })();\n  }\n  prepareToEncrypt(room) {\n    var encryptor = this.roomEncryptors[room.roomId];\n    if (encryptor) {\n      encryptor.prepareForEncryption(this.globalBlacklistUnverifiedDevices, this.deviceIsolationMode);\n    }\n  }\n  forceDiscardSession(roomId) {\n    var _this$roomEncryptors$;\n    return (_this$roomEncryptors$ = this.roomEncryptors[roomId]) === null || _this$roomEncryptors$ === void 0 ? void 0 : _this$roomEncryptors$.forceDiscardSession();\n  }\n  exportRoomKeys() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      var raw = yield _this7.olmMachine.exportRoomKeys(() => true);\n      return JSON.parse(raw);\n    })();\n  }\n  exportRoomKeysAsJson() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      return yield _this8.olmMachine.exportRoomKeys(() => true);\n    })();\n  }\n  importRoomKeys(keys, opts) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      return yield _this9.backupManager.importRoomKeys(keys, opts);\n    })();\n  }\n  importRoomKeysAsJson(keys, opts) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      return yield _this10.backupManager.importRoomKeysAsJson(keys, opts);\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi.userHasCrossSigningKeys}.\n   */\n  userHasCrossSigningKeys() {\n    var _arguments = arguments,\n      _this11 = this;\n    return _asyncToGenerator(function* () {\n      var userId = _arguments.length > 0 && _arguments[0] !== undefined ? _arguments[0] : _this11.userId;\n      var downloadUncached = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : false;\n      // TODO: could probably do with a more efficient way of doing this than returning the whole set and searching\n      var rustTrackedUsers = yield _this11.olmMachine.trackedUsers();\n      var rustTrackedUser;\n      for (var u of rustTrackedUsers) {\n        if (userId === u.toString()) {\n          rustTrackedUser = u;\n          break;\n        }\n      }\n      if (rustTrackedUser !== undefined) {\n        if (userId === _this11.userId) {\n          /* make sure we have an *up-to-date* idea of the user's cross-signing keys. This is important, because if we\n           * return \"false\" here, we will end up generating new cross-signing keys and replacing the existing ones.\n           */\n          var request = _this11.olmMachine.queryKeysForUsers(\n          // clone as rust layer will take ownership and it's reused later\n          [rustTrackedUser.clone()]);\n          yield _this11.outgoingRequestProcessor.makeOutgoingRequest(request);\n        }\n        var userIdentity = yield _this11.olmMachine.getIdentity(rustTrackedUser);\n        userIdentity === null || userIdentity === void 0 || userIdentity.free();\n        return userIdentity !== undefined;\n      } else if (downloadUncached) {\n        var _keyResult$master_key;\n        // Download the cross signing keys and check if the master key is available\n        var keyResult = yield _this11.downloadDeviceList(new Set([userId]));\n        var keys = (_keyResult$master_key = keyResult.master_keys) === null || _keyResult$master_key === void 0 ? void 0 : _keyResult$master_key[userId];\n\n        // No master key\n        if (!keys) return false;\n\n        // `keys` is an object with { [`ed25519:${pubKey}`]: pubKey }\n        // We assume only a single key, and we want the bare form without type\n        // prefix, so we select the values.\n        return Boolean(Object.values(keys.keys)[0]);\n      } else {\n        return false;\n      }\n    })();\n  }\n\n  /**\n   * Get the device information for the given list of users.\n   *\n   * @param userIds - The users to fetch.\n   * @param downloadUncached - If true, download the device list for users whose device list we are not\n   *    currently tracking. Defaults to false, in which case such users will not appear at all in the result map.\n   *\n   * @returns A map `{@link DeviceMap}`.\n   */\n  getUserDeviceInfo(userIds) {\n    var _arguments2 = arguments,\n      _this12 = this;\n    return _asyncToGenerator(function* () {\n      var downloadUncached = _arguments2.length > 1 && _arguments2[1] !== undefined ? _arguments2[1] : false;\n      var deviceMapByUserId = new Map();\n      var rustTrackedUsers = yield _this12.getOlmMachineOrThrow().trackedUsers();\n\n      // Convert RustSdkCryptoJs.UserId to a `Set<string>`\n      var trackedUsers = new Set();\n      rustTrackedUsers.forEach(rustUserId => trackedUsers.add(rustUserId.toString()));\n\n      // Keep untracked user to download their keys after\n      var untrackedUsers = new Set();\n      for (var _userId of userIds) {\n        // if this is a tracked user, we can just fetch the device list from the rust-sdk\n        // (NB: this is probably ok even if we race with a leave event such that we stop tracking the user's\n        // devices: the rust-sdk will return the last-known device list, which will be good enough.)\n        if (trackedUsers.has(_userId)) {\n          deviceMapByUserId.set(_userId, yield _this12.getUserDevices(_userId));\n        } else {\n          untrackedUsers.add(_userId);\n        }\n      }\n\n      // for any users whose device lists we are not tracking, fall back to downloading the device list\n      // over HTTP.\n      if (downloadUncached && untrackedUsers.size >= 1) {\n        var queryResult = yield _this12.downloadDeviceList(untrackedUsers);\n        Object.entries(queryResult.device_keys).forEach(_ref => {\n          var [userId, deviceKeys] = _ref;\n          return deviceMapByUserId.set(userId, deviceKeysToDeviceMap(deviceKeys));\n        });\n      }\n      return deviceMapByUserId;\n    })();\n  }\n\n  /**\n   * Get the device list for the given user from the olm machine\n   * @param userId - Rust SDK UserId\n   */\n  getUserDevices(userId) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      var rustUserId = new RustSdkCryptoJs.UserId(userId);\n\n      // For reasons I don't really understand, the Javascript FinalizationRegistry doesn't seem to run the\n      // registered callbacks when `userDevices` goes out of scope, nor when the individual devices in the array\n      // returned by `userDevices.devices` do so.\n      //\n      // This is particularly problematic, because each of those structures holds a reference to the\n      // VerificationMachine, which in turn holds a reference to the IndexeddbCryptoStore. Hence, we end up leaking\n      // open connections to the crypto store, which means the store can't be deleted on logout.\n      //\n      // To fix this, we explicitly call `.free` on each of the objects, which tells the rust code to drop the\n      // allocated memory and decrement the refcounts for the crypto store.\n\n      // Wait for up to a second for any in-flight device list requests to complete.\n      // The reason for this isn't so much to avoid races (some level of raciness is\n      // inevitable for this method) but to make testing easier.\n      var userDevices = yield _this13.olmMachine.getUserDevices(rustUserId, 1);\n      try {\n        var deviceArray = userDevices.devices();\n        try {\n          return new Map(deviceArray.map(device => [device.deviceId.toString(), rustDeviceToJsDevice(device, rustUserId)]));\n        } finally {\n          deviceArray.forEach(d => d.free());\n        }\n      } finally {\n        userDevices.free();\n      }\n    })();\n  }\n\n  /**\n   * Download the given user keys by calling `/keys/query` request\n   * @param untrackedUsers - download keys of these users\n   */\n  downloadDeviceList(untrackedUsers) {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      var queryBody = {\n        device_keys: {}\n      };\n      untrackedUsers.forEach(user => queryBody.device_keys[user] = []);\n      return yield _this14.http.authedRequest(Method.Post, \"/_matrix/client/v3/keys/query\", undefined, queryBody, {\n        prefix: \"\"\n      });\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#getTrustCrossSignedDevices}.\n   */\n  getTrustCrossSignedDevices() {\n    return this._trustCrossSignedDevices;\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#setTrustCrossSignedDevices}.\n   */\n  setTrustCrossSignedDevices(val) {\n    this._trustCrossSignedDevices = val;\n    // TODO: legacy crypto goes through the list of known devices and emits DeviceVerificationChanged\n    //  events. Maybe we need to do the same?\n  }\n\n  /**\n   * Mark the given device as locally verified.\n   *\n   * Implementation of {@link CryptoApi#setDeviceVerified}.\n   */\n  setDeviceVerified(userId, deviceId) {\n    var _arguments3 = arguments,\n      _this15 = this;\n    return _asyncToGenerator(function* () {\n      var verified = _arguments3.length > 2 && _arguments3[2] !== undefined ? _arguments3[2] : true;\n      var device = yield _this15.olmMachine.getDevice(new RustSdkCryptoJs.UserId(userId), new RustSdkCryptoJs.DeviceId(deviceId));\n      if (!device) {\n        throw new Error(\"Unknown device \".concat(userId, \"|\").concat(deviceId));\n      }\n      try {\n        yield device.setLocalTrust(verified ? RustSdkCryptoJs.LocalTrust.Verified : RustSdkCryptoJs.LocalTrust.Unset);\n      } finally {\n        device.free();\n      }\n    })();\n  }\n\n  /**\n   * Blindly cross-sign one of our other devices.\n   *\n   * Implementation of {@link CryptoApi#crossSignDevice}.\n   */\n  crossSignDevice(deviceId) {\n    var _this16 = this;\n    return _asyncToGenerator(function* () {\n      var device = yield _this16.olmMachine.getDevice(new RustSdkCryptoJs.UserId(_this16.userId), new RustSdkCryptoJs.DeviceId(deviceId));\n      if (!device) {\n        throw new Error(\"Unknown device \".concat(deviceId));\n      }\n      try {\n        var outgoingRequest = yield device.verify();\n        yield _this16.outgoingRequestProcessor.makeOutgoingRequest(outgoingRequest);\n      } finally {\n        device.free();\n      }\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#getDeviceVerificationStatus}.\n   */\n  getDeviceVerificationStatus(userId, deviceId) {\n    var _this17 = this;\n    return _asyncToGenerator(function* () {\n      var device = yield _this17.olmMachine.getDevice(new RustSdkCryptoJs.UserId(userId), new RustSdkCryptoJs.DeviceId(deviceId));\n      if (!device) return null;\n      try {\n        return new DeviceVerificationStatus({\n          signedByOwner: device.isCrossSignedByOwner(),\n          crossSigningVerified: device.isCrossSigningTrusted(),\n          localVerified: device.isLocallyTrusted(),\n          trustCrossSignedDevices: _this17._trustCrossSignedDevices\n        });\n      } finally {\n        device.free();\n      }\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#getUserVerificationStatus}.\n   */\n  getUserVerificationStatus(userId) {\n    var _this18 = this;\n    return _asyncToGenerator(function* () {\n      var userIdentity = yield _this18.getOlmMachineOrThrow().getIdentity(new RustSdkCryptoJs.UserId(userId));\n      if (userIdentity === undefined) {\n        return new UserVerificationStatus(false, false, false);\n      }\n      var verified = userIdentity.isVerified();\n      var wasVerified = userIdentity.wasPreviouslyVerified();\n      var needsUserApproval = userIdentity instanceof RustSdkCryptoJs.OtherUserIdentity ? userIdentity.identityNeedsUserApproval() : false;\n      userIdentity.free();\n      return new UserVerificationStatus(verified, wasVerified, false, needsUserApproval);\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#pinCurrentUserIdentity}.\n   */\n  pinCurrentUserIdentity(userId) {\n    var _this19 = this;\n    return _asyncToGenerator(function* () {\n      var userIdentity = yield _this19.getOlmMachineOrThrow().getIdentity(new RustSdkCryptoJs.UserId(userId));\n      if (userIdentity === undefined) {\n        throw new Error(\"Cannot pin identity of unknown user\");\n      }\n      if (userIdentity instanceof RustSdkCryptoJs.OwnUserIdentity) {\n        throw new Error(\"Cannot pin identity of own user\");\n      }\n      yield userIdentity.pinCurrentMasterKey();\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#withdrawVerificationRequirement}.\n   */\n  withdrawVerificationRequirement(userId) {\n    var _this20 = this;\n    return _asyncToGenerator(function* () {\n      var userIdentity = yield _this20.getOlmMachineOrThrow().getIdentity(new RustSdkCryptoJs.UserId(userId));\n      if (userIdentity === undefined) {\n        throw new Error(\"Cannot withdraw verification of unknown user\");\n      }\n      yield userIdentity.withdrawVerification();\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#isCrossSigningReady}\n   */\n  isCrossSigningReady() {\n    var _this21 = this;\n    return _asyncToGenerator(function* () {\n      var {\n        privateKeysInSecretStorage,\n        privateKeysCachedLocally\n      } = yield _this21.getCrossSigningStatus();\n      var hasKeysInCache = Boolean(privateKeysCachedLocally.masterKey) && Boolean(privateKeysCachedLocally.selfSigningKey) && Boolean(privateKeysCachedLocally.userSigningKey);\n      var identity = yield _this21.getOwnIdentity();\n\n      // Cross-signing is ready if the public identity is trusted, and the private keys\n      // are either cached, or accessible via secret-storage.\n      return !!(identity !== null && identity !== void 0 && identity.isVerified()) && (hasKeysInCache || privateKeysInSecretStorage);\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#getCrossSigningKeyId}\n   */\n  getCrossSigningKeyId() {\n    var _arguments4 = arguments,\n      _this22 = this;\n    return _asyncToGenerator(function* () {\n      var type = _arguments4.length > 0 && _arguments4[0] !== undefined ? _arguments4[0] : CrossSigningKey.Master;\n      var userIdentity = yield _this22.olmMachine.getIdentity(new RustSdkCryptoJs.UserId(_this22.userId));\n      if (!userIdentity) {\n        // The public keys are not available on this device\n        return null;\n      }\n      try {\n        var crossSigningStatus = yield _this22.olmMachine.crossSigningStatus();\n        var privateKeysOnDevice = crossSigningStatus.hasMaster && crossSigningStatus.hasUserSigning && crossSigningStatus.hasSelfSigning;\n        if (!privateKeysOnDevice) {\n          // The private keys are not available on this device\n          return null;\n        }\n        if (!userIdentity.isVerified()) {\n          // We have both public and private keys, but they don't match!\n          return null;\n        }\n        var key;\n        switch (type) {\n          case CrossSigningKey.Master:\n            key = userIdentity.masterKey;\n            break;\n          case CrossSigningKey.SelfSigning:\n            key = userIdentity.selfSigningKey;\n            break;\n          case CrossSigningKey.UserSigning:\n            key = userIdentity.userSigningKey;\n            break;\n          default:\n            // Unknown type\n            return null;\n        }\n        var parsedKey = JSON.parse(key);\n        // `keys` is an object with { [`ed25519:${pubKey}`]: pubKey }\n        // We assume only a single key, and we want the bare form without type\n        // prefix, so we select the values.\n        return Object.values(parsedKey.keys)[0];\n      } finally {\n        userIdentity.free();\n      }\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#bootstrapCrossSigning}\n   */\n  bootstrapCrossSigning(opts) {\n    var _this23 = this;\n    return _asyncToGenerator(function* () {\n      yield _this23.crossSigningIdentity.bootstrapCrossSigning(opts);\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#isSecretStorageReady}\n   */\n  isSecretStorageReady() {\n    var _this24 = this;\n    return _asyncToGenerator(function* () {\n      // make sure that the cross-signing keys are stored\n      var secretsToCheck = [\"m.cross_signing.master\", \"m.cross_signing.user_signing\", \"m.cross_signing.self_signing\"];\n\n      // if key backup is active, we also need to check that the backup decryption key is stored\n      var keyBackupEnabled = (yield _this24.backupManager.getActiveBackupVersion()) != null;\n      if (keyBackupEnabled) {\n        secretsToCheck.push(\"m.megolm_backup.v1\");\n      }\n      return secretStorageCanAccessSecrets(_this24.secretStorage, secretsToCheck);\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#bootstrapSecretStorage}\n   */\n  bootstrapSecretStorage() {\n    var _arguments5 = arguments,\n      _this25 = this;\n    return _asyncToGenerator(function* () {\n      var {\n        createSecretStorageKey,\n        setupNewSecretStorage,\n        setupNewKeyBackup\n      } = _arguments5.length > 0 && _arguments5[0] !== undefined ? _arguments5[0] : {};\n      // If an AES Key is already stored in the secret storage and setupNewSecretStorage is not set\n      // we don't want to create a new key\n      var isNewSecretStorageKeyNeeded = setupNewSecretStorage || !(yield _this25.secretStorageHasAESKey());\n      if (isNewSecretStorageKeyNeeded) {\n        if (!createSecretStorageKey) {\n          throw new Error(\"unable to create a new secret storage key, createSecretStorageKey is not set\");\n        }\n\n        // Create a new storage key and add it to secret storage\n        _this25.logger.info(\"bootstrapSecretStorage: creating new secret storage key\");\n        var recoveryKey = yield createSecretStorageKey();\n        if (!recoveryKey) {\n          throw new Error(\"createSecretStorageKey() callback did not return a secret storage key\");\n        }\n        yield _this25.addSecretStorageKeyToSecretStorage(recoveryKey);\n      }\n      var crossSigningPrivateKeys = yield _this25.olmMachine.exportCrossSigningKeys();\n      var hasPrivateKeys = crossSigningPrivateKeys && crossSigningPrivateKeys.masterKey !== undefined && crossSigningPrivateKeys.self_signing_key !== undefined && crossSigningPrivateKeys.userSigningKey !== undefined;\n\n      // If we have cross-signing private keys cached, store them in secret\n      // storage if they are not there already.\n      if (hasPrivateKeys && (isNewSecretStorageKeyNeeded || !(yield secretStorageContainsCrossSigningKeys(_this25.secretStorage)))) {\n        _this25.logger.info(\"bootstrapSecretStorage: cross-signing keys not yet exported; doing so now.\");\n        yield _this25.secretStorage.store(\"m.cross_signing.master\", crossSigningPrivateKeys.masterKey);\n        yield _this25.secretStorage.store(\"m.cross_signing.user_signing\", crossSigningPrivateKeys.userSigningKey);\n        yield _this25.secretStorage.store(\"m.cross_signing.self_signing\", crossSigningPrivateKeys.self_signing_key);\n      }\n\n      // likewise with the key backup key: if we have one, store it in secret storage (if it's not already there)\n      // also don't bother storing it if we're about to set up a new backup\n      if (!setupNewKeyBackup) {\n        yield _this25.saveBackupKeyToStorage();\n      } else {\n        yield _this25.resetKeyBackup();\n      }\n    })();\n  }\n\n  /**\n   * If we have a backup key for the current, trusted backup in cache,\n   * save it to secret storage.\n   */\n  saveBackupKeyToStorage() {\n    var _this26 = this;\n    return _asyncToGenerator(function* () {\n      var keyBackupInfo = yield _this26.backupManager.getServerBackupInfo();\n      if (!keyBackupInfo || !keyBackupInfo.version) {\n        logger.info(\"Not saving backup key to secret storage: no backup info\");\n        return;\n      }\n      var backupKeys = yield _this26.olmMachine.getBackupKeys();\n      if (!backupKeys.decryptionKey) {\n        logger.info(\"Not saving backup key to secret storage: no backup key\");\n        return;\n      }\n      if (!decryptionKeyMatchesKeyBackupInfo(backupKeys.decryptionKey, keyBackupInfo)) {\n        logger.info(\"Not saving backup key to secret storage: decryption key does not match backup info\");\n        return;\n      }\n      var backupKeyBase64 = backupKeys.decryptionKey.toBase64();\n      yield _this26.secretStorage.store(\"m.megolm_backup.v1\", backupKeyBase64);\n    })();\n  }\n\n  /**\n   * Add the secretStorage key to the secret storage\n   * - The secret storage key must have the `keyInfo` field filled\n   * - The secret storage key is set as the default key of the secret storage\n   * - Call `cryptoCallbacks.cacheSecretStorageKey` when done\n   *\n   * @param secretStorageKey - The secret storage key to add in the secret storage.\n   */\n  addSecretStorageKeyToSecretStorage(secretStorageKey) {\n    var _this27 = this;\n    return _asyncToGenerator(function* () {\n      var _secretStorageKey$key, _secretStorageKey$key2, _this27$cryptoCallbac, _this27$cryptoCallbac2;\n      var secretStorageKeyObject = yield _this27.secretStorage.addKey(SECRET_STORAGE_ALGORITHM_V1_AES, {\n        passphrase: (_secretStorageKey$key = secretStorageKey.keyInfo) === null || _secretStorageKey$key === void 0 ? void 0 : _secretStorageKey$key.passphrase,\n        name: (_secretStorageKey$key2 = secretStorageKey.keyInfo) === null || _secretStorageKey$key2 === void 0 ? void 0 : _secretStorageKey$key2.name,\n        key: secretStorageKey.privateKey\n      });\n      yield _this27.secretStorage.setDefaultKeyId(secretStorageKeyObject.keyId);\n      (_this27$cryptoCallbac = (_this27$cryptoCallbac2 = _this27.cryptoCallbacks).cacheSecretStorageKey) === null || _this27$cryptoCallbac === void 0 || _this27$cryptoCallbac.call(_this27$cryptoCallbac2, secretStorageKeyObject.keyId, secretStorageKeyObject.keyInfo, secretStorageKey.privateKey);\n    })();\n  }\n\n  /**\n   * Check if a secret storage AES Key is already added in secret storage\n   *\n   * @returns True if an AES key is in the secret storage\n   */\n  secretStorageHasAESKey() {\n    var _this28 = this;\n    return _asyncToGenerator(function* () {\n      // See if we already have an AES secret-storage key.\n      var secretStorageKeyTuple = yield _this28.secretStorage.getKey();\n      if (!secretStorageKeyTuple) return false;\n      var [, keyInfo] = secretStorageKeyTuple;\n\n      // Check if the key is an AES key\n      return keyInfo.algorithm === SECRET_STORAGE_ALGORITHM_V1_AES;\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#getCrossSigningStatus}\n   */\n  getCrossSigningStatus() {\n    var _this29 = this;\n    return _asyncToGenerator(function* () {\n      var userIdentity = yield _this29.getOlmMachineOrThrow().getIdentity(new RustSdkCryptoJs.UserId(_this29.userId));\n      var publicKeysOnDevice = Boolean(userIdentity === null || userIdentity === void 0 ? void 0 : userIdentity.masterKey) && Boolean(userIdentity === null || userIdentity === void 0 ? void 0 : userIdentity.selfSigningKey) && Boolean(userIdentity === null || userIdentity === void 0 ? void 0 : userIdentity.userSigningKey);\n      userIdentity === null || userIdentity === void 0 || userIdentity.free();\n      var privateKeysInSecretStorage = yield secretStorageContainsCrossSigningKeys(_this29.secretStorage);\n      var crossSigningStatus = yield _this29.getOlmMachineOrThrow().crossSigningStatus();\n      return {\n        publicKeysOnDevice,\n        privateKeysInSecretStorage,\n        privateKeysCachedLocally: {\n          masterKey: Boolean(crossSigningStatus === null || crossSigningStatus === void 0 ? void 0 : crossSigningStatus.hasMaster),\n          userSigningKey: Boolean(crossSigningStatus === null || crossSigningStatus === void 0 ? void 0 : crossSigningStatus.hasUserSigning),\n          selfSigningKey: Boolean(crossSigningStatus === null || crossSigningStatus === void 0 ? void 0 : crossSigningStatus.hasSelfSigning)\n        }\n      };\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#createRecoveryKeyFromPassphrase}\n   */\n  createRecoveryKeyFromPassphrase(password) {\n    var _this30 = this;\n    return _asyncToGenerator(function* () {\n      if (password) {\n        // Generate the key from the passphrase\n        // first we generate a random salt\n        var salt = secureRandomString(32);\n        // then we derive the key from the passphrase\n        var recoveryKey = yield deriveRecoveryKeyFromPassphrase(password, salt, _this30.RECOVERY_KEY_DERIVATION_ITERATIONS);\n        return {\n          keyInfo: {\n            passphrase: {\n              algorithm: \"m.pbkdf2\",\n              iterations: _this30.RECOVERY_KEY_DERIVATION_ITERATIONS,\n              salt\n            }\n          },\n          privateKey: recoveryKey,\n          encodedPrivateKey: encodeRecoveryKey(recoveryKey)\n        };\n      } else {\n        // Using the navigator crypto API to generate the private key\n        var key = new Uint8Array(32);\n        globalThis.crypto.getRandomValues(key);\n        return {\n          privateKey: key,\n          encodedPrivateKey: encodeRecoveryKey(key)\n        };\n      }\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#getEncryptionInfoForEvent}.\n   */\n  getEncryptionInfoForEvent(event) {\n    var _this31 = this;\n    return _asyncToGenerator(function* () {\n      return _this31.eventDecryptor.getEncryptionInfoForEvent(event);\n    })();\n  }\n\n  /**\n   * Returns to-device verification requests that are already in progress for the given user id.\n   *\n   * Implementation of {@link CryptoApi#getVerificationRequestsToDeviceInProgress}\n   *\n   * @param userId - the ID of the user to query\n   *\n   * @returns the VerificationRequests that are in progress\n   */\n  getVerificationRequestsToDeviceInProgress(userId) {\n    var requests = this.olmMachine.getVerificationRequests(new RustSdkCryptoJs.UserId(userId));\n    return requests.filter(request => request.roomId === undefined).map(request => new RustVerificationRequest(this.olmMachine, request, this.outgoingRequestProcessor, this._supportedVerificationMethods));\n  }\n\n  /**\n   * Finds a DM verification request that is already in progress for the given room id\n   *\n   * Implementation of {@link CryptoApi#findVerificationRequestDMInProgress}\n   *\n   * @param roomId - the room to use for verification\n   * @param userId - search the verification request for the given user\n   *\n   * @returns the VerificationRequest that is in progress, if any\n   *\n   */\n  findVerificationRequestDMInProgress(roomId, userId) {\n    if (!userId) throw new Error(\"missing userId\");\n    var requests = this.olmMachine.getVerificationRequests(new RustSdkCryptoJs.UserId(userId));\n\n    // Search for the verification request for the given room id\n    var request = requests.find(request => {\n      var _request$roomId;\n      return ((_request$roomId = request.roomId) === null || _request$roomId === void 0 ? void 0 : _request$roomId.toString()) === roomId;\n    });\n    if (request) {\n      return new RustVerificationRequest(this.olmMachine, request, this.outgoingRequestProcessor, this._supportedVerificationMethods);\n    }\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#requestVerificationDM}\n   */\n  requestVerificationDM(userId, roomId) {\n    var _this32 = this;\n    return _asyncToGenerator(function* () {\n      var userIdentity = yield _this32.olmMachine.getIdentity(new RustSdkCryptoJs.UserId(userId));\n      if (!userIdentity) throw new Error(\"unknown userId \".concat(userId));\n      try {\n        // Transform the verification methods into rust objects\n        var methods = _this32._supportedVerificationMethods.map(method => verificationMethodIdentifierToMethod(method));\n        // Get the request content to send to the DM room\n        var verificationEventContent = yield userIdentity.verificationRequestContent(methods);\n\n        // Send the request content to send to the DM room\n        var eventId = yield _this32.sendVerificationRequestContent(roomId, verificationEventContent);\n\n        // Get a verification request\n        var request = yield userIdentity.requestVerification(new RustSdkCryptoJs.RoomId(roomId), new RustSdkCryptoJs.EventId(eventId), methods);\n        return new RustVerificationRequest(_this32.olmMachine, request, _this32.outgoingRequestProcessor, _this32._supportedVerificationMethods);\n      } finally {\n        userIdentity.free();\n      }\n    })();\n  }\n\n  /**\n   * Send the verification content to a room\n   * See https://spec.matrix.org/v1.7/client-server-api/#put_matrixclientv3roomsroomidsendeventtypetxnid\n   *\n   * Prefer to use {@link OutgoingRequestProcessor.makeOutgoingRequest} when dealing with {@link RustSdkCryptoJs.RoomMessageRequest}\n   *\n   * @param roomId - the targeted room\n   * @param verificationEventContent - the request body.\n   *\n   * @returns the event id\n   */\n  sendVerificationRequestContent(roomId, verificationEventContent) {\n    var _this33 = this;\n    return _asyncToGenerator(function* () {\n      var txId = secureRandomString(32);\n      // Send the verification request content to the DM room\n      var {\n        event_id: eventId\n      } = yield _this33.http.authedRequest(Method.Put, \"/_matrix/client/v3/rooms/\".concat(encodeURIComponent(roomId), \"/send/m.room.message/\").concat(encodeURIComponent(txId)), undefined, verificationEventContent, {\n        prefix: \"\"\n      });\n      return eventId;\n    })();\n  }\n  /**\n   * Set the verification methods we offer to the other side during an interactive verification.\n   *\n   * If `undefined`, we will offer all the methods supported by the Rust SDK.\n   */\n  setSupportedVerificationMethods(methods) {\n    // by default, the Rust SDK does not offer `m.qr_code.scan.v1`, but we do want to offer that.\n    this._supportedVerificationMethods = methods !== null && methods !== void 0 ? methods : ALL_VERIFICATION_METHODS;\n  }\n\n  /**\n   * Send a verification request to our other devices.\n   *\n   * If a verification is already in flight, returns it. Otherwise, initiates a new one.\n   *\n   * Implementation of {@link CryptoApi#requestOwnUserVerification}.\n   *\n   * @returns a VerificationRequest when the request has been sent to the other party.\n   */\n  requestOwnUserVerification() {\n    var _this34 = this;\n    return _asyncToGenerator(function* () {\n      var userIdentity = yield _this34.olmMachine.getIdentity(new RustSdkCryptoJs.UserId(_this34.userId));\n      if (userIdentity === undefined) {\n        throw new Error(\"cannot request verification for this device when there is no existing cross-signing key\");\n      }\n      try {\n        var [request, outgoingRequest] = yield userIdentity.requestVerification(_this34._supportedVerificationMethods.map(verificationMethodIdentifierToMethod));\n        yield _this34.outgoingRequestProcessor.makeOutgoingRequest(outgoingRequest);\n        return new RustVerificationRequest(_this34.olmMachine, request, _this34.outgoingRequestProcessor, _this34._supportedVerificationMethods);\n      } finally {\n        userIdentity.free();\n      }\n    })();\n  }\n\n  /**\n   * Request an interactive verification with the given device.\n   *\n   * If a verification is already in flight, returns it. Otherwise, initiates a new one.\n   *\n   * Implementation of {@link CryptoApi#requestDeviceVerification}.\n   *\n   * @param userId - ID of the owner of the device to verify\n   * @param deviceId - ID of the device to verify\n   *\n   * @returns a VerificationRequest when the request has been sent to the other party.\n   */\n  requestDeviceVerification(userId, deviceId) {\n    var _this35 = this;\n    return _asyncToGenerator(function* () {\n      var device = yield _this35.olmMachine.getDevice(new RustSdkCryptoJs.UserId(userId), new RustSdkCryptoJs.DeviceId(deviceId));\n      if (!device) {\n        throw new Error(\"Not a known device\");\n      }\n      try {\n        var [request, outgoingRequest] = device.requestVerification(_this35._supportedVerificationMethods.map(verificationMethodIdentifierToMethod));\n        yield _this35.outgoingRequestProcessor.makeOutgoingRequest(outgoingRequest);\n        return new RustVerificationRequest(_this35.olmMachine, request, _this35.outgoingRequestProcessor, _this35._supportedVerificationMethods);\n      } finally {\n        device.free();\n      }\n    })();\n  }\n\n  /**\n   * Fetch the backup decryption key we have saved in our store.\n   *\n   * Implementation of {@link CryptoApi#getSessionBackupPrivateKey}.\n   *\n   * @returns the key, if any, or null\n   */\n  getSessionBackupPrivateKey() {\n    var _this36 = this;\n    return _asyncToGenerator(function* () {\n      var backupKeys = yield _this36.olmMachine.getBackupKeys();\n      if (!backupKeys.decryptionKey) return null;\n      return decodeBase64(backupKeys.decryptionKey.toBase64());\n    })();\n  }\n\n  /**\n   * Store the backup decryption key.\n   *\n   * Implementation of {@link CryptoApi#storeSessionBackupPrivateKey}.\n   *\n   * @param key - the backup decryption key\n   * @param version - the backup version for this key.\n   */\n  storeSessionBackupPrivateKey(key, version) {\n    var _this37 = this;\n    return _asyncToGenerator(function* () {\n      var base64Key = encodeBase64(key);\n      if (!version) {\n        throw new Error(\"storeSessionBackupPrivateKey: version is required\");\n      }\n      yield _this37.backupManager.saveBackupDecryptionKey(RustSdkCryptoJs.BackupDecryptionKey.fromBase64(base64Key), version);\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#loadSessionBackupPrivateKeyFromSecretStorage}.\n   */\n  loadSessionBackupPrivateKeyFromSecretStorage() {\n    var _this38 = this;\n    return _asyncToGenerator(function* () {\n      var backupKey = yield _this38.secretStorage.get(\"m.megolm_backup.v1\");\n      if (!backupKey) {\n        throw new Error(\"loadSessionBackupPrivateKeyFromSecretStorage: missing decryption key in secret storage\");\n      }\n      var keyBackupInfo = yield _this38.backupManager.getServerBackupInfo();\n      if (!keyBackupInfo || !keyBackupInfo.version) {\n        throw new Error(\"loadSessionBackupPrivateKeyFromSecretStorage: unable to get backup version\");\n      }\n      var backupDecryptionKey = RustSdkCryptoJs.BackupDecryptionKey.fromBase64(backupKey);\n      if (!decryptionKeyMatchesKeyBackupInfo(backupDecryptionKey, keyBackupInfo)) {\n        throw new Error(\"loadSessionBackupPrivateKeyFromSecretStorage: decryption key does not match backup info\");\n      }\n      yield _this38.backupManager.saveBackupDecryptionKey(backupDecryptionKey, keyBackupInfo.version);\n    })();\n  }\n\n  /**\n   * Get the current status of key backup.\n   *\n   * Implementation of {@link CryptoApi#getActiveSessionBackupVersion}.\n   */\n  getActiveSessionBackupVersion() {\n    var _this39 = this;\n    return _asyncToGenerator(function* () {\n      return yield _this39.backupManager.getActiveBackupVersion();\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#getKeyBackupInfo}.\n   */\n  getKeyBackupInfo() {\n    var _this40 = this;\n    return _asyncToGenerator(function* () {\n      return (yield _this40.backupManager.getServerBackupInfo()) || null;\n    })();\n  }\n\n  /**\n   * Determine if a key backup can be trusted.\n   *\n   * Implementation of {@link CryptoApi#isKeyBackupTrusted}.\n   */\n  isKeyBackupTrusted(info) {\n    var _this41 = this;\n    return _asyncToGenerator(function* () {\n      return yield _this41.backupManager.isKeyBackupTrusted(info);\n    })();\n  }\n\n  /**\n   * Force a re-check of the key backup and enable/disable it as appropriate.\n   *\n   * Implementation of {@link CryptoApi#checkKeyBackupAndEnable}.\n   */\n  checkKeyBackupAndEnable() {\n    var _this42 = this;\n    return _asyncToGenerator(function* () {\n      return yield _this42.backupManager.checkKeyBackupAndEnable(true);\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#deleteKeyBackupVersion}.\n   */\n  deleteKeyBackupVersion(version) {\n    var _this43 = this;\n    return _asyncToGenerator(function* () {\n      yield _this43.backupManager.deleteKeyBackupVersion(version);\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#resetKeyBackup}.\n   */\n  resetKeyBackup() {\n    var _this44 = this;\n    return _asyncToGenerator(function* () {\n      var backupInfo = yield _this44.backupManager.setupKeyBackup(o => _this44.signObject(o));\n\n      // we want to store the private key in 4S\n      // need to check if 4S is set up?\n      if (yield _this44.secretStorageHasAESKey()) {\n        yield _this44.secretStorage.store(\"m.megolm_backup.v1\", backupInfo.decryptionKey.toBase64());\n      }\n\n      // we can check and start async\n      _this44.checkKeyBackupAndEnable();\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#disableKeyStorage}.\n   */\n  disableKeyStorage() {\n    var _this45 = this;\n    return _asyncToGenerator(function* () {\n      // Get the key backup version we're using\n      var info = yield _this45.getKeyBackupInfo();\n      if (info !== null && info !== void 0 && info.version) {\n        yield _this45.deleteKeyBackupVersion(info.version);\n      } else {\n        logger.error(\"Can't delete key backup version: no version available\");\n      }\n\n      // also turn off 4S, since this is also storing keys on the server.\n      yield _this45.deleteSecretStorage();\n      yield _this45.dehydratedDeviceManager.delete();\n    })();\n  }\n\n  /**\n   * Signs the given object with the current device and current identity (if available).\n   * As defined in {@link https://spec.matrix.org/v1.8/appendices/#signing-json | Signing JSON}.\n   *\n   * Helper for {@link RustCrypto#resetKeyBackup}.\n   *\n   * @param obj - The object to sign\n   */\n  signObject(obj) {\n    var _this46 = this;\n    return _asyncToGenerator(function* () {\n      var sigs = new Map(Object.entries(obj.signatures || {}));\n      var unsigned = obj.unsigned;\n      delete obj.signatures;\n      delete obj.unsigned;\n      var userSignatures = sigs.get(_this46.userId) || {};\n      var canonalizedJson = anotherjson.stringify(obj);\n      var signatures = yield _this46.olmMachine.sign(canonalizedJson);\n      var map = JSON.parse(signatures.asJSON());\n      sigs.set(_this46.userId, _objectSpread(_objectSpread({}, userSignatures), map[_this46.userId]));\n      if (unsigned !== undefined) obj.unsigned = unsigned;\n      obj.signatures = Object.fromEntries(sigs.entries());\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#restoreKeyBackupWithPassphrase}.\n   */\n  restoreKeyBackupWithPassphrase(passphrase, opts) {\n    var _this47 = this;\n    return _asyncToGenerator(function* () {\n      var backupInfo = yield _this47.backupManager.getServerBackupInfo();\n      if (!(backupInfo !== null && backupInfo !== void 0 && backupInfo.version)) {\n        throw new Error(\"No backup info available\");\n      }\n      var privateKey = yield keyFromAuthData(backupInfo.auth_data, passphrase);\n\n      // Cache the key\n      yield _this47.storeSessionBackupPrivateKey(privateKey, backupInfo.version);\n      return _this47.restoreKeyBackup(opts);\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#restoreKeyBackup}.\n   */\n  restoreKeyBackup(opts) {\n    var _this48 = this;\n    return _asyncToGenerator(function* () {\n      // Get the decryption key from the crypto store\n      var backupKeys = yield _this48.olmMachine.getBackupKeys();\n      var {\n        decryptionKey,\n        backupVersion\n      } = backupKeys;\n      if (!decryptionKey || !backupVersion) throw new Error(\"No decryption key found in crypto store\");\n      var decodedDecryptionKey = decodeBase64(decryptionKey.toBase64());\n      var backupInfo = yield _this48.backupManager.requestKeyBackupVersion(backupVersion);\n      if (!backupInfo) throw new Error(\"Backup version to restore \".concat(backupVersion, \" not found on server\"));\n      var backupDecryptor = yield _this48.getBackupDecryptor(backupInfo, decodedDecryptionKey);\n      try {\n        var _opts$progressCallbac;\n        opts === null || opts === void 0 || (_opts$progressCallbac = opts.progressCallback) === null || _opts$progressCallbac === void 0 || _opts$progressCallbac.call(opts, {\n          stage: ImportRoomKeyStage.Fetch\n        });\n        return yield _this48.backupManager.restoreKeyBackup(backupVersion, backupDecryptor, opts);\n      } finally {\n        // Free to avoid to keep in memory the decryption key stored in it. To avoid to exposing it to an attacker.\n        backupDecryptor.free();\n      }\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#isDehydrationSupported}.\n   */\n  isDehydrationSupported() {\n    var _this49 = this;\n    return _asyncToGenerator(function* () {\n      return yield _this49.dehydratedDeviceManager.isSupported();\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#startDehydration}.\n   */\n  startDehydration() {\n    var _arguments6 = arguments,\n      _this50 = this;\n    return _asyncToGenerator(function* () {\n      var opts = _arguments6.length > 0 && _arguments6[0] !== undefined ? _arguments6[0] : {};\n      if (!(yield _this50.isCrossSigningReady()) || !(yield _this50.isSecretStorageReady())) {\n        throw new Error(\"Device dehydration requires cross-signing and secret storage to be set up\");\n      }\n      return yield _this50.dehydratedDeviceManager.start(opts || {});\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#importSecretsBundle}.\n   */\n  importSecretsBundle(secrets) {\n    var _this51 = this;\n    return _asyncToGenerator(function* () {\n      var secretsBundle = RustSdkCryptoJs.SecretsBundle.from_json(secrets);\n      yield _this51.getOlmMachineOrThrow().importSecretsBundle(secretsBundle); // this method frees the SecretsBundle\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#exportSecretsBundle}.\n   */\n  exportSecretsBundle() {\n    var _this52 = this;\n    return _asyncToGenerator(function* () {\n      var secretsBundle = yield _this52.getOlmMachineOrThrow().exportSecretsBundle();\n      var secrets = secretsBundle.to_json();\n      secretsBundle.free();\n      return secrets;\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#encryptToDeviceMessages}.\n   */\n  encryptToDeviceMessages(eventType, devices, payload) {\n    var _this53 = this;\n    return _asyncToGenerator(function* () {\n      var logger = new LogSpan(_this53.logger, \"encryptToDeviceMessages\");\n      var uniqueUsers = new Set(devices.map(_ref2 => {\n        var {\n          userId\n        } = _ref2;\n        return userId;\n      }));\n\n      // This will ensure we have Olm sessions for all of the users' devices.\n      // However, we only care about some of the devices.\n      // So, perhaps we can optimise this later on.\n      yield _this53.keyClaimManager.ensureSessionsForUsers(logger, Array.from(uniqueUsers).map(userId => new RustSdkCryptoJs.UserId(userId)));\n      var batch = {\n        batch: [],\n        eventType: EventType.RoomMessageEncrypted\n      };\n      yield Promise.all(devices.map(/*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator(function* (_ref3) {\n          var {\n            userId,\n            deviceId\n          } = _ref3;\n          var device = yield _this53.olmMachine.getDevice(new RustSdkCryptoJs.UserId(userId), new RustSdkCryptoJs.DeviceId(deviceId));\n          if (device) {\n            var encryptedPayload = JSON.parse(yield device.encryptToDeviceEvent(eventType, payload));\n            batch.batch.push({\n              deviceId,\n              userId,\n              payload: encryptedPayload\n            });\n          } else {\n            _this53.logger.warn(\"encryptToDeviceMessages: unknown device \".concat(userId, \":\").concat(deviceId));\n          }\n        });\n        return function (_x) {\n          return _ref4.apply(this, arguments);\n        };\n      }()));\n      return batch;\n    })();\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#resetEncryption}.\n   */\n  resetEncryption(authUploadDeviceSigningKeys) {\n    var _this54 = this;\n    return _asyncToGenerator(function* () {\n      _this54.logger.debug(\"resetEncryption: resetting encryption\");\n\n      // Delete the dehydrated device, since any existing one will be signed\n      // by the wrong cross-signing key\n      _this54.dehydratedDeviceManager.delete();\n\n      // Disable backup, and delete all the backups from the server\n      yield _this54.backupManager.deleteAllKeyBackupVersions();\n      yield _this54.deleteSecretStorage();\n\n      // Reset the cross-signing keys\n      yield _this54.crossSigningIdentity.bootstrapCrossSigning({\n        setupNewCrossSigning: true,\n        authUploadDeviceSigningKeys\n      });\n\n      // Create a new key backup\n      yield _this54.resetKeyBackup();\n      _this54.logger.debug(\"resetEncryption: ended\");\n    })();\n  }\n\n  /**\n   * Removes the secret storage key, default key pointer and all (known) secret storage data\n   * from the user's account data\n   */\n  deleteSecretStorage() {\n    var _this55 = this;\n    return _asyncToGenerator(function* () {\n      // Remove the stored secrets in the secret storage\n      yield _this55.secretStorage.store(\"m.cross_signing.master\", null);\n      yield _this55.secretStorage.store(\"m.cross_signing.self_signing\", null);\n      yield _this55.secretStorage.store(\"m.cross_signing.user_signing\", null);\n      yield _this55.secretStorage.store(\"m.megolm_backup.v1\", null);\n\n      // Remove the recovery key\n      var defaultKeyId = yield _this55.secretStorage.getDefaultKeyId();\n      if (defaultKeyId) yield _this55.secretStorage.store(\"m.secret_storage.key.\".concat(defaultKeyId), null);\n      // Disable the recovery key and the secret storage\n      yield _this55.secretStorage.setDefaultKeyId(null);\n    })();\n  }\n\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //\n  // SyncCryptoCallbacks implementation\n  //\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /**\n   * Apply sync changes to the olm machine\n   * @param events - the received to-device messages\n   * @param oneTimeKeysCounts - the received one time key counts\n   * @param unusedFallbackKeys - the received unused fallback keys\n   * @param devices - the received device list updates\n   * @returns A list of preprocessed to-device messages.\n   */\n  receiveSyncChanges(_ref5) {\n    var _this56 = this;\n    return _asyncToGenerator(function* () {\n      var {\n        events,\n        oneTimeKeysCounts = new Map(),\n        unusedFallbackKeys,\n        devices = new RustSdkCryptoJs.DeviceLists()\n      } = _ref5;\n      var result = yield logDuration(logger, \"receiveSyncChanges\", /*#__PURE__*/_asyncToGenerator(function* () {\n        return yield _this56.olmMachine.receiveSyncChanges(events ? JSON.stringify(events) : \"[]\", devices, oneTimeKeysCounts, unusedFallbackKeys);\n      }));\n\n      // receiveSyncChanges returns a JSON-encoded list of decrypted to-device messages.\n      return JSON.parse(result);\n    })();\n  }\n\n  /** called by the sync loop to preprocess incoming to-device messages\n   *\n   * @param events - the received to-device messages\n   * @returns A list of preprocessed to-device messages.\n   */\n  preprocessToDeviceMessages(events) {\n    var _this57 = this;\n    return _asyncToGenerator(function* () {\n      // send the received to-device messages into receiveSyncChanges. We have no info on device-list changes,\n      // one-time-keys, or fallback keys, so just pass empty data.\n      var processed = yield _this57.receiveSyncChanges({\n        events\n      });\n\n      // look for interesting to-device messages\n      for (var message of processed) {\n        if (message.type === EventType.KeyVerificationRequest) {\n          var sender = message.sender;\n          var transactionId = message.content.transaction_id;\n          if (transactionId && sender) {\n            _this57.onIncomingKeyVerificationRequest(sender, transactionId);\n          }\n        }\n      }\n      return processed;\n    })();\n  }\n\n  /** called by the sync loop to process one time key counts and unused fallback keys\n   *\n   * @param oneTimeKeysCounts - the received one time key counts\n   * @param unusedFallbackKeys - the received unused fallback keys\n   */\n  processKeyCounts(oneTimeKeysCounts, unusedFallbackKeys) {\n    var _this58 = this;\n    return _asyncToGenerator(function* () {\n      var mapOneTimeKeysCount = oneTimeKeysCounts && new Map(Object.entries(oneTimeKeysCounts));\n      var setUnusedFallbackKeys = unusedFallbackKeys && new Set(unusedFallbackKeys);\n      if (mapOneTimeKeysCount !== undefined || setUnusedFallbackKeys !== undefined) {\n        yield _this58.receiveSyncChanges({\n          oneTimeKeysCounts: mapOneTimeKeysCount,\n          unusedFallbackKeys: setUnusedFallbackKeys\n        });\n      }\n    })();\n  }\n\n  /** called by the sync loop to process the notification that device lists have\n   * been changed.\n   *\n   * @param deviceLists - device_lists field from /sync\n   */\n  processDeviceLists(deviceLists) {\n    var _this59 = this;\n    return _asyncToGenerator(function* () {\n      var _deviceLists$changed, _deviceLists$left;\n      var devices = new RustSdkCryptoJs.DeviceLists((_deviceLists$changed = deviceLists.changed) === null || _deviceLists$changed === void 0 ? void 0 : _deviceLists$changed.map(userId => new RustSdkCryptoJs.UserId(userId)), (_deviceLists$left = deviceLists.left) === null || _deviceLists$left === void 0 ? void 0 : _deviceLists$left.map(userId => new RustSdkCryptoJs.UserId(userId)));\n      yield _this59.receiveSyncChanges({\n        devices\n      });\n    })();\n  }\n\n  /** called by the sync loop on m.room.encrypted events\n   *\n   * @param room - in which the event was received\n   * @param event - encryption event to be processed\n   */\n  onCryptoEvent(room, event) {\n    var _this60 = this;\n    return _asyncToGenerator(function* () {\n      var config = event.getContent();\n      var settings = new RustSdkCryptoJs.RoomSettings();\n      if (config.algorithm === \"m.megolm.v1.aes-sha2\") {\n        settings.algorithm = RustSdkCryptoJs.EncryptionAlgorithm.MegolmV1AesSha2;\n      } else {\n        // Among other situations, this happens if the crypto state event is redacted.\n        _this60.logger.warn(\"Room \".concat(room.roomId, \": ignoring crypto event with invalid algorithm \").concat(config.algorithm));\n        return;\n      }\n      try {\n        settings.sessionRotationPeriodMs = config.rotation_period_ms;\n        settings.sessionRotationPeriodMessages = config.rotation_period_msgs;\n        yield _this60.olmMachine.setRoomSettings(new RustSdkCryptoJs.RoomId(room.roomId), settings);\n      } catch (e) {\n        _this60.logger.warn(\"Room \".concat(room.roomId, \": ignoring crypto event which caused error: \").concat(e));\n        return;\n      }\n\n      // If we got this far, the SDK found the event acceptable.\n      // We need to either create or update the active RoomEncryptor.\n      var existingEncryptor = _this60.roomEncryptors[room.roomId];\n      if (existingEncryptor) {\n        existingEncryptor.onCryptoEvent(config);\n      } else {\n        _this60.roomEncryptors[room.roomId] = new RoomEncryptor(_this60.olmMachine, _this60.keyClaimManager, _this60.outgoingRequestsManager, room, config);\n      }\n    })();\n  }\n\n  /** called by the sync loop after processing each sync.\n   *\n   *\n   * @param syncState - information on the completed sync.\n   */\n  onSyncCompleted(syncState) {\n    // Processing the /sync may have produced new outgoing requests which need sending, so kick off the outgoing\n    // request loop, if it's not already running.\n    this.outgoingRequestsManager.doProcessOutgoingRequests().catch(e => {\n      this.logger.warn(\"onSyncCompleted: Error processing outgoing requests\", e);\n    });\n  }\n\n  /**\n   * Implementation of {@link CryptoApi#markAllTrackedUsersAsDirty}.\n   */\n  markAllTrackedUsersAsDirty() {\n    var _this61 = this;\n    return _asyncToGenerator(function* () {\n      yield _this61.olmMachine.markAllTrackedUsersAsDirty();\n    })();\n  }\n\n  /**\n   * Handle an incoming m.key.verification.request event, received either in-room or in a to-device message.\n   *\n   * @param sender - the sender of the event\n   * @param transactionId - the transaction ID for the verification. For to-device messages, this comes from the\n   *    content of the message; for in-room messages it is the event ID.\n   */\n  onIncomingKeyVerificationRequest(sender, transactionId) {\n    var request = this.olmMachine.getVerificationRequest(new RustSdkCryptoJs.UserId(sender), transactionId);\n    if (request) {\n      this.emit(CryptoEvent.VerificationRequestReceived, new RustVerificationRequest(this.olmMachine, request, this.outgoingRequestProcessor, this._supportedVerificationMethods));\n    } else {\n      // There are multiple reasons this can happen; probably the most likely is that the event is an\n      // in-room event which is too old.\n      this.logger.info(\"Ignoring just-received verification request \".concat(transactionId, \" which did not start a rust-side verification\"));\n    }\n  }\n\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //\n  // Other public functions\n  //\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  /** called by the MatrixClient on a room membership event\n   *\n   * @param event - The matrix event which caused this event to fire.\n   * @param member - The member whose RoomMember.membership changed.\n   * @param oldMembership - The previous membership state. Null if it's a new member.\n   */\n  onRoomMembership(event, member, oldMembership) {\n    var enc = this.roomEncryptors[event.getRoomId()];\n    if (!enc) {\n      // not encrypting in this room\n      return;\n    }\n    enc.onRoomMembership(member);\n  }\n\n  /** Callback for OlmMachine.registerRoomKeyUpdatedCallback\n   *\n   * Called by the rust-sdk whenever there is an update to (megolm) room keys. We\n   * check if we have any events waiting for the given keys, and schedule them for\n   * a decryption retry if so.\n   *\n   * @param keys - details of the updated keys\n   */\n  onRoomKeysUpdated(keys) {\n    var _this62 = this;\n    return _asyncToGenerator(function* () {\n      for (var key of keys) {\n        _this62.onRoomKeyUpdated(key);\n      }\n      _this62.backupManager.maybeUploadKey();\n    })();\n  }\n  onRoomKeyUpdated(key) {\n    var _this63 = this;\n    if (this.stopped) return;\n    this.logger.debug(\"Got update for session \".concat(key.sessionId, \" from sender \").concat(key.senderKey.toBase64(), \" in \").concat(key.roomId.toString()));\n    var pendingList = this.eventDecryptor.getEventsPendingRoomKey(key.roomId.toString(), key.sessionId);\n    if (pendingList.length === 0) return;\n    this.logger.debug(\"Retrying decryption on events:\", pendingList.map(e => \"\".concat(e.getId())));\n\n    // Have another go at decrypting events with this key.\n    //\n    // We don't want to end up blocking the callback from Rust, which could otherwise end up dropping updates,\n    // so we don't wait for the decryption to complete. In any case, there is no need to wait:\n    // MatrixEvent.attemptDecryption ensures that there is only one decryption attempt happening at once,\n    // and deduplicates repeated attempts for the same event.\n    var _loop = function _loop(ev) {\n      ev.attemptDecryption(_this63, {\n        isRetry: true\n      }).catch(_e => {\n        _this63.logger.info(\"Still unable to decrypt event \".concat(ev.getId(), \" after receiving key\"));\n      });\n    };\n    for (var ev of pendingList) {\n      _loop(ev);\n    }\n  }\n\n  /**\n   * Callback for `OlmMachine.registerRoomKeyWithheldCallback`.\n   *\n   * Called by the rust sdk whenever we are told that a key has been withheld. We see if we had any events that\n   * failed to decrypt for the given session, and update their status if so.\n   *\n   * @param withheld - Details of the withheld sessions.\n   */\n  onRoomKeysWithheld(withheld) {\n    var _this64 = this;\n    return _asyncToGenerator(function* () {\n      for (var session of withheld) {\n        _this64.logger.debug(\"Got withheld message for session \".concat(session.sessionId, \" in \").concat(session.roomId.toString()));\n        var pendingList = _this64.eventDecryptor.getEventsPendingRoomKey(session.roomId.toString(), session.sessionId);\n        if (pendingList.length === 0) return;\n\n        // The easiest way to update the status of the event is to have another go at decrypting it.\n        _this64.logger.debug(\"Retrying decryption on events:\", pendingList.map(e => \"\".concat(e.getId())));\n        for (var ev of pendingList) {\n          ev.attemptDecryption(_this64, {\n            isRetry: true\n          }).catch(_e => {\n            // It's somewhat expected that we still can't decrypt here.\n          });\n        }\n      }\n    })();\n  }\n\n  /**\n   * Callback for `OlmMachine.registerUserIdentityUpdatedCallback`\n   *\n   * Called by the rust-sdk whenever there is an update to any user's cross-signing status. We re-check their trust\n   * status and emit a `UserTrustStatusChanged` event, as well as a `KeysChanged` if it is our own identity that changed.\n   *\n   * @param userId - the user with the updated identity\n   */\n  onUserIdentityUpdated(userId) {\n    var _this65 = this;\n    return _asyncToGenerator(function* () {\n      var newVerification = yield _this65.getUserVerificationStatus(userId.toString());\n      _this65.emit(CryptoEvent.UserTrustStatusChanged, userId.toString(), newVerification);\n\n      // If our own user identity has changed, we may now trust the key backup where we did not before.\n      // So, re-check the key backup status and enable it if available.\n      if (userId.toString() === _this65.userId) {\n        _this65.emit(CryptoEvent.KeysChanged, {});\n        yield _this65.checkKeyBackupAndEnable();\n      }\n    })();\n  }\n\n  /**\n   * Callback for `OlmMachine.registerDevicesUpdatedCallback`\n   *\n   * Called when users' devices have updated. Emits `WillUpdateDevices` and `DevicesUpdated`. In the JavaScript\n   * crypto backend, these events are called at separate times, with `WillUpdateDevices` being emitted just before\n   * the devices are saved, and `DevicesUpdated` being emitted just after. But the OlmMachine only gives us\n   * one event, so we emit both events here.\n   *\n   * @param userIds - an array of user IDs of users whose devices have updated.\n   */\n  onDevicesUpdated(userIds) {\n    var _this66 = this;\n    return _asyncToGenerator(function* () {\n      _this66.emit(CryptoEvent.WillUpdateDevices, userIds, false);\n      _this66.emit(CryptoEvent.DevicesUpdated, userIds, false);\n    })();\n  }\n\n  /**\n   * Handles secret received from the rust secret inbox.\n   *\n   * The gossipped secrets are received using the `m.secret.send` event type\n   * and are guaranteed to have been received over a 1-to-1 Olm\n   * Session from a verified device.\n   *\n   * The only secret currently handled in this way is `m.megolm_backup.v1`.\n   *\n   * @param name - the secret name\n   * @param value - the secret value\n   */\n  handleSecretReceived(name, value) {\n    var _this67 = this;\n    return _asyncToGenerator(function* () {\n      _this67.logger.debug(\"onReceiveSecret: Received secret \".concat(name));\n      if (name === \"m.megolm_backup.v1\") {\n        return yield _this67.backupManager.handleBackupSecretReceived(value);\n        // XXX at this point we should probably try to download the backup and import the keys,\n        // or at least retry for the current decryption failures?\n        // Maybe add some signaling when a new secret is received, and let clients handle it?\n        // as it's where the restore from backup APIs are exposed.\n      }\n      return false;\n    })();\n  }\n\n  /**\n   * Called when a new secret is received in the rust secret inbox.\n   *\n   * Will poll the secret inbox and handle the secrets received.\n   *\n   * @param name - The name of the secret received.\n   */\n  checkSecrets(name) {\n    var _this68 = this;\n    return _asyncToGenerator(function* () {\n      var pendingValues = yield _this68.olmMachine.getSecretsFromInbox(name);\n      for (var value of pendingValues) {\n        if (yield _this68.handleSecretReceived(name, value)) {\n          // If we have a valid secret for that name there is no point of processing the other secrets values.\n          // It's probably the same secret shared by another device.\n          break;\n        }\n      }\n\n      // Important to call this after handling the secrets as good hygiene.\n      yield _this68.olmMachine.deleteSecretsFromInbox(name);\n    })();\n  }\n\n  /**\n   * Handle a live event received via /sync.\n   * See {@link ClientEventHandlerMap#event}\n   *\n   * @param event - live event\n   */\n  onLiveEventFromSync(event) {\n    var _this69 = this;\n    return _asyncToGenerator(function* () {\n      // Ignore state event or remote echo\n      // transaction_id is provided in case of remote echo {@link https://spec.matrix.org/v1.7/client-server-api/#local-echo}\n      if (event.isState() || !!event.getUnsigned().transaction_id) return;\n      var processEvent = /*#__PURE__*/function () {\n        var _ref7 = _asyncToGenerator(function* (evt) {\n          // Process only verification event\n          if (isVerificationEvent(event)) {\n            yield _this69.onKeyVerificationEvent(evt);\n          }\n        });\n        return function processEvent(_x2) {\n          return _ref7.apply(this, arguments);\n        };\n      }();\n\n      // If the event is encrypted of in failure, we wait for decryption\n      if (event.isDecryptionFailure() || event.isEncrypted()) {\n        // 5 mins\n        var TIMEOUT_DELAY = 5 * 60 * 1000;\n\n        // After 5mins, we are not expecting the event to be decrypted\n        var timeoutId = setTimeout(() => event.off(MatrixEventEvent.Decrypted, onDecrypted), TIMEOUT_DELAY);\n        var onDecrypted = (decryptedEvent, error) => {\n          if (error) return;\n          clearTimeout(timeoutId);\n          event.off(MatrixEventEvent.Decrypted, onDecrypted);\n          processEvent(decryptedEvent);\n        };\n        event.on(MatrixEventEvent.Decrypted, onDecrypted);\n      } else {\n        yield processEvent(event);\n      }\n    })();\n  }\n\n  /**\n   * Handle an in-room key verification event.\n   *\n   * @param event - a key validation request event.\n   */\n  onKeyVerificationEvent(event) {\n    var _this70 = this;\n    return _asyncToGenerator(function* () {\n      var roomId = event.getRoomId();\n      if (!roomId) {\n        throw new Error(\"missing roomId in the event\");\n      }\n      _this70.logger.debug(\"Incoming verification event \".concat(event.getId(), \" type \").concat(event.getType(), \" from \").concat(event.getSender()));\n      yield _this70.olmMachine.receiveVerificationEvent(JSON.stringify({\n        event_id: event.getId(),\n        type: event.getType(),\n        sender: event.getSender(),\n        state_key: event.getStateKey(),\n        content: event.getContent(),\n        origin_server_ts: event.getTs()\n      }), new RustSdkCryptoJs.RoomId(roomId));\n      if (event.getType() === EventType.RoomMessage && event.getContent().msgtype === MsgType.KeyVerificationRequest) {\n        _this70.onIncomingKeyVerificationRequest(event.getSender(), event.getId());\n      }\n\n      // that may have caused us to queue up outgoing requests, so make sure we send them.\n      _this70.outgoingRequestsManager.doProcessOutgoingRequests().catch(e => {\n        _this70.logger.warn(\"onKeyVerificationRequest: Error processing outgoing requests\", e);\n      });\n    })();\n  }\n\n  /**\n   * Returns the cross-signing user identity of the current user.\n   *\n   * Not part of the public crypto-api interface.\n   * Used during migration from legacy js-crypto to update local trust if needed.\n   */\n  getOwnIdentity() {\n    var _this71 = this;\n    return _asyncToGenerator(function* () {\n      return yield _this71.olmMachine.getIdentity(new RustSdkCryptoJs.UserId(_this71.userId));\n    })();\n  }\n}\nclass EventDecryptor {\n  constructor(logger, olmMachine, perSessionBackupDownloader) {\n    this.logger = logger;\n    this.olmMachine = olmMachine;\n    this.perSessionBackupDownloader = perSessionBackupDownloader;\n    /**\n     * Events which we couldn't decrypt due to unknown sessions / indexes.\n     *\n     * Map from roomId to sessionId to Set of MatrixEvents\n     */\n    _defineProperty(this, \"eventsPendingKey\", new MapWithDefault(() => new MapWithDefault(() => new Set())));\n  }\n  attemptEventDecryption(event, isolationMode) {\n    var _this72 = this;\n    return _asyncToGenerator(function* () {\n      // add the event to the pending list *before* attempting to decrypt.\n      // then, if the key turns up while decryption is in progress (and\n      // decryption fails), we will schedule a retry.\n      // (fixes https://github.com/vector-im/element-web/issues/5001)\n      _this72.addEventToPendingList(event);\n      var trustRequirement;\n      switch (isolationMode.kind) {\n        case DeviceIsolationModeKind.AllDevicesIsolationMode:\n          trustRequirement = RustSdkCryptoJs.TrustRequirement.Untrusted;\n          break;\n        case DeviceIsolationModeKind.OnlySignedDevicesIsolationMode:\n          trustRequirement = RustSdkCryptoJs.TrustRequirement.CrossSignedOrLegacy;\n          break;\n      }\n      try {\n        var res = yield _this72.olmMachine.decryptRoomEvent(stringifyEvent(event), new RustSdkCryptoJs.RoomId(event.getRoomId()), new RustSdkCryptoJs.DecryptionSettings(trustRequirement));\n\n        // Success. We can remove the event from the pending list, if\n        // that hasn't already happened.\n        _this72.removeEventFromPendingList(event);\n        return {\n          clearEvent: JSON.parse(res.event),\n          claimedEd25519Key: res.senderClaimedEd25519Key,\n          senderCurve25519Key: res.senderCurve25519Key,\n          forwardingCurve25519KeyChain: res.forwardingCurve25519KeyChain\n        };\n      } catch (err) {\n        if (err instanceof RustSdkCryptoJs.MegolmDecryptionError) {\n          _this72.onMegolmDecryptionError(event, err, yield _this72.perSessionBackupDownloader.getServerBackupInfo());\n        } else {\n          throw new DecryptionError(DecryptionFailureCode.UNKNOWN_ERROR, \"Unknown error\");\n        }\n      }\n    })();\n  }\n\n  /**\n   * Handle a `MegolmDecryptionError` returned by the rust SDK.\n   *\n   * Fires off a request to the `perSessionBackupDownloader`, if appropriate, and then throws a `DecryptionError`.\n   *\n   * @param event - The event which could not be decrypted.\n   * @param err - The error from the Rust SDK.\n   * @param serverBackupInfo - Details about the current backup from the server. `null` if there is no backup.\n   *     `undefined` if our attempt to check failed.\n   */\n  onMegolmDecryptionError(event, err, serverBackupInfo) {\n    var content = event.getWireContent();\n    var errorDetails = {\n      sender_key: content.sender_key,\n      session_id: content.session_id\n    };\n\n    // If the error looks like it might be recoverable from backup, queue up a request to try that.\n    if (err.code === RustSdkCryptoJs.DecryptionErrorCode.MissingRoomKey || err.code === RustSdkCryptoJs.DecryptionErrorCode.UnknownMessageIndex) {\n      this.perSessionBackupDownloader.onDecryptionKeyMissingError(event.getRoomId(), content.session_id);\n\n      // If the server is telling us our membership at the time the event\n      // was sent, and it isn't \"join\", we use a different error code.\n      var membership = event.getMembershipAtEvent();\n      if (membership && membership !== KnownMembership.Join && membership !== KnownMembership.Invite) {\n        throw new DecryptionError(DecryptionFailureCode.HISTORICAL_MESSAGE_USER_NOT_JOINED, \"This message was sent when we were not a member of the room.\", errorDetails);\n      }\n\n      // If the event was sent before this device was created, we use some different error codes.\n      if (event.getTs() <= this.olmMachine.deviceCreationTimeMs) {\n        if (serverBackupInfo === null) {\n          throw new DecryptionError(DecryptionFailureCode.HISTORICAL_MESSAGE_NO_KEY_BACKUP, \"This message was sent before this device logged in, and there is no key backup on the server.\", errorDetails);\n        } else if (!this.perSessionBackupDownloader.isKeyBackupDownloadConfigured()) {\n          throw new DecryptionError(DecryptionFailureCode.HISTORICAL_MESSAGE_BACKUP_UNCONFIGURED, \"This message was sent before this device logged in, and key backup is not working.\", errorDetails);\n        } else {\n          throw new DecryptionError(DecryptionFailureCode.HISTORICAL_MESSAGE_WORKING_BACKUP, \"This message was sent before this device logged in. Key backup is working, but we still do not (yet) have the key.\", errorDetails);\n        }\n      }\n    }\n\n    // If we got a withheld code, expose that.\n    if (err.maybe_withheld) {\n      // Unfortunately the Rust SDK API doesn't let us distinguish between different withheld cases, other than\n      // by string-matching.\n      var failureCode = err.maybe_withheld === \"The sender has disabled encrypting to unverified devices.\" ? DecryptionFailureCode.MEGOLM_KEY_WITHHELD_FOR_UNVERIFIED_DEVICE : DecryptionFailureCode.MEGOLM_KEY_WITHHELD;\n      throw new DecryptionError(failureCode, err.maybe_withheld, errorDetails);\n    }\n    switch (err.code) {\n      case RustSdkCryptoJs.DecryptionErrorCode.MissingRoomKey:\n        throw new DecryptionError(DecryptionFailureCode.MEGOLM_UNKNOWN_INBOUND_SESSION_ID, \"The sender's device has not sent us the keys for this message.\", errorDetails);\n      case RustSdkCryptoJs.DecryptionErrorCode.UnknownMessageIndex:\n        throw new DecryptionError(DecryptionFailureCode.OLM_UNKNOWN_MESSAGE_INDEX, \"The sender's device has not sent us the keys for this message at this index.\", errorDetails);\n      case RustSdkCryptoJs.DecryptionErrorCode.SenderIdentityVerificationViolation:\n        // We're refusing to decrypt due to not trusting the sender,\n        // rather than failing to decrypt due to lack of keys, so we\n        // don't need to keep it on the pending list.\n        this.removeEventFromPendingList(event);\n        throw new DecryptionError(DecryptionFailureCode.SENDER_IDENTITY_PREVIOUSLY_VERIFIED, \"The sender identity is unverified, but was previously verified.\");\n      case RustSdkCryptoJs.DecryptionErrorCode.UnknownSenderDevice:\n        // We're refusing to decrypt due to not trusting the sender,\n        // rather than failing to decrypt due to lack of keys, so we\n        // don't need to keep it on the pending list.\n        this.removeEventFromPendingList(event);\n        throw new DecryptionError(DecryptionFailureCode.UNKNOWN_SENDER_DEVICE, \"The sender device is not known.\");\n      case RustSdkCryptoJs.DecryptionErrorCode.UnsignedSenderDevice:\n        // We're refusing to decrypt due to not trusting the sender,\n        // rather than failing to decrypt due to lack of keys, so we\n        // don't need to keep it on the pending list.\n        this.removeEventFromPendingList(event);\n        throw new DecryptionError(DecryptionFailureCode.UNSIGNED_SENDER_DEVICE, \"The sender identity is not cross-signed.\");\n\n      // We don't map MismatchedIdentityKeys for now, as there is no equivalent in legacy.\n      // Just put it on the `UNKNOWN_ERROR` bucket.\n      default:\n        throw new DecryptionError(DecryptionFailureCode.UNKNOWN_ERROR, err.description, errorDetails);\n    }\n  }\n  getEncryptionInfoForEvent(event) {\n    var _this73 = this;\n    return _asyncToGenerator(function* () {\n      if (!event.getClearContent() || event.isDecryptionFailure()) {\n        // not successfully decrypted\n        return null;\n      }\n\n      // special-case outgoing events, which the rust crypto-sdk will barf on\n      if (event.status !== null) {\n        return {\n          shieldColour: EventShieldColour.NONE,\n          shieldReason: null\n        };\n      }\n      var encryptionInfo = yield _this73.olmMachine.getRoomEventEncryptionInfo(stringifyEvent(event), new RustSdkCryptoJs.RoomId(event.getRoomId()));\n      return rustEncryptionInfoToJsEncryptionInfo(_this73.logger, encryptionInfo);\n    })();\n  }\n\n  /**\n   * Look for events which are waiting for a given megolm session\n   *\n   * Returns a list of events which were encrypted by `session` and could not be decrypted\n   */\n  getEventsPendingRoomKey(roomId, sessionId) {\n    var roomPendingEvents = this.eventsPendingKey.get(roomId);\n    if (!roomPendingEvents) return [];\n    var sessionPendingEvents = roomPendingEvents.get(sessionId);\n    if (!sessionPendingEvents) return [];\n    return [...sessionPendingEvents];\n  }\n\n  /**\n   * Add an event to the list of those awaiting their session keys.\n   */\n  addEventToPendingList(event) {\n    var roomId = event.getRoomId();\n    // We shouldn't have events without a room id here.\n    if (!roomId) return;\n    var roomPendingEvents = this.eventsPendingKey.getOrCreate(roomId);\n    var sessionPendingEvents = roomPendingEvents.getOrCreate(event.getWireContent().session_id);\n    sessionPendingEvents.add(event);\n  }\n\n  /**\n   * Remove an event from the list of those awaiting their session keys.\n   */\n  removeEventFromPendingList(event) {\n    var roomId = event.getRoomId();\n    if (!roomId) return;\n    var roomPendingEvents = this.eventsPendingKey.getOrCreate(roomId);\n    if (!roomPendingEvents) return;\n    var sessionPendingEvents = roomPendingEvents.get(event.getWireContent().session_id);\n    if (!sessionPendingEvents) return;\n    sessionPendingEvents.delete(event);\n\n    // also clean up the higher-level maps if they are now empty\n    if (sessionPendingEvents.size === 0) {\n      roomPendingEvents.delete(event.getWireContent().session_id);\n      if (roomPendingEvents.size === 0) {\n        this.eventsPendingKey.delete(roomId);\n      }\n    }\n  }\n}\nfunction stringifyEvent(event) {\n  return JSON.stringify({\n    event_id: event.getId(),\n    type: event.getWireType(),\n    sender: event.getSender(),\n    state_key: event.getStateKey(),\n    content: event.getWireContent(),\n    origin_server_ts: event.getTs()\n  });\n}\nfunction rustEncryptionInfoToJsEncryptionInfo(logger, encryptionInfo) {\n  if (encryptionInfo === undefined) {\n    // not decrypted here\n    return null;\n  }\n\n  // TODO: use strict shield semantics.\n  var shieldState = encryptionInfo.shieldState(false);\n  var shieldColour;\n  switch (shieldState.color) {\n    case RustSdkCryptoJs.ShieldColor.Grey:\n      shieldColour = EventShieldColour.GREY;\n      break;\n    case RustSdkCryptoJs.ShieldColor.None:\n      shieldColour = EventShieldColour.NONE;\n      break;\n    default:\n      shieldColour = EventShieldColour.RED;\n  }\n  var shieldReason;\n  switch (shieldState.code) {\n    case undefined:\n    case null:\n      shieldReason = null;\n      break;\n    case RustSdkCryptoJs.ShieldStateCode.AuthenticityNotGuaranteed:\n      shieldReason = EventShieldReason.AUTHENTICITY_NOT_GUARANTEED;\n      break;\n    case RustSdkCryptoJs.ShieldStateCode.UnknownDevice:\n      shieldReason = EventShieldReason.UNKNOWN_DEVICE;\n      break;\n    case RustSdkCryptoJs.ShieldStateCode.UnsignedDevice:\n      shieldReason = EventShieldReason.UNSIGNED_DEVICE;\n      break;\n    case RustSdkCryptoJs.ShieldStateCode.UnverifiedIdentity:\n      shieldReason = EventShieldReason.UNVERIFIED_IDENTITY;\n      break;\n    case RustSdkCryptoJs.ShieldStateCode.SentInClear:\n      shieldReason = EventShieldReason.SENT_IN_CLEAR;\n      break;\n    case RustSdkCryptoJs.ShieldStateCode.VerificationViolation:\n      shieldReason = EventShieldReason.VERIFICATION_VIOLATION;\n      break;\n  }\n  return {\n    shieldColour,\n    shieldReason\n  };\n}\n//# sourceMappingURL=rust-crypto.js.map","import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\n/*\nCopyright 2023-2024 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport { MigrationState } from \"../crypto/store/base.js\";\nimport { IndexedDBCryptoStore } from \"../crypto/store/indexeddb-crypto-store.js\";\nimport { requestKeyBackupVersion } from \"./backup.js\";\nimport { sleep } from \"../utils.js\";\nimport { encodeBase64 } from \"../base64.js\";\nimport decryptAESSecretStorageItem from \"../utils/decryptAESSecretStorageItem.js\";\n/**\n * Determine if any data needs migrating from the legacy store, and do so.\n *\n * This migrates the base account data, and olm and megolm sessions. It does *not* migrate the room list, which should\n * happen after an `OlmMachine` is created, via {@link migrateRoomSettingsFromLegacyCrypto}.\n *\n * @param args - Arguments object.\n */\nexport function migrateFromLegacyCrypto(_x) {\n  return _migrateFromLegacyCrypto.apply(this, arguments);\n}\nfunction _migrateFromLegacyCrypto() {\n  _migrateFromLegacyCrypto = _asyncToGenerator(function* (args) {\n    var _args$legacyMigration2;\n    var {\n      logger,\n      legacyStore\n    } = args;\n\n    // initialise the rust matrix-sdk-crypto-wasm, if it hasn't already been done\n    yield RustSdkCryptoJs.initAsync();\n\n    // enable tracing in the rust-sdk\n    new RustSdkCryptoJs.Tracing(RustSdkCryptoJs.LoggerLevel.Debug).turnOn();\n    if (!(yield legacyStore.containsData())) {\n      // This store was never used. Nothing to migrate.\n      return;\n    }\n    yield legacyStore.startup();\n    var accountPickle = null;\n    yield legacyStore.doTxn(\"readonly\", [IndexedDBCryptoStore.STORE_ACCOUNT], txn => {\n      legacyStore.getAccount(txn, acctPickle => {\n        accountPickle = acctPickle;\n      });\n    });\n    if (!accountPickle) {\n      // This store is not properly set up. Nothing to migrate.\n      logger.debug(\"Legacy crypto store is not set up (no account found). Not migrating.\");\n      return;\n    }\n    var migrationState = yield legacyStore.getMigrationState();\n    if (migrationState >= MigrationState.MEGOLM_SESSIONS_MIGRATED) {\n      // All migration is done for now. The room list comes later, once we have an OlmMachine.\n      return;\n    }\n    var nOlmSessions = yield countOlmSessions(logger, legacyStore);\n    var nMegolmSessions = yield countMegolmSessions(logger, legacyStore);\n    var totalSteps = 1 + nOlmSessions + nMegolmSessions;\n    logger.info(\"Migrating data from legacy crypto store. \".concat(nOlmSessions, \" olm sessions and \").concat(nMegolmSessions, \" megolm sessions to migrate.\"));\n    var stepsDone = 0;\n    function onProgress(steps) {\n      var _args$legacyMigration;\n      stepsDone += steps;\n      (_args$legacyMigration = args.legacyMigrationProgressListener) === null || _args$legacyMigration === void 0 || _args$legacyMigration.call(args, stepsDone, totalSteps);\n    }\n    onProgress(0);\n    var pickleKey = new TextEncoder().encode(args.legacyPickleKey);\n    if (migrationState === MigrationState.NOT_STARTED) {\n      logger.info(\"Migrating data from legacy crypto store. Step 1: base data\");\n      yield migrateBaseData(args.http, args.userId, args.deviceId, legacyStore, pickleKey, args.storeHandle, logger);\n      migrationState = MigrationState.INITIAL_DATA_MIGRATED;\n      yield legacyStore.setMigrationState(migrationState);\n    }\n    onProgress(1);\n    if (migrationState === MigrationState.INITIAL_DATA_MIGRATED) {\n      logger.info(\"Migrating data from legacy crypto store. Step 2: olm sessions (\".concat(nOlmSessions, \" sessions to migrate).\"));\n      yield migrateOlmSessions(logger, legacyStore, pickleKey, args.storeHandle, onProgress);\n      migrationState = MigrationState.OLM_SESSIONS_MIGRATED;\n      yield legacyStore.setMigrationState(migrationState);\n    }\n    if (migrationState === MigrationState.OLM_SESSIONS_MIGRATED) {\n      logger.info(\"Migrating data from legacy crypto store. Step 3: megolm sessions (\".concat(nMegolmSessions, \" sessions to migrate).\"));\n      yield migrateMegolmSessions(logger, legacyStore, pickleKey, args.storeHandle, onProgress);\n      migrationState = MigrationState.MEGOLM_SESSIONS_MIGRATED;\n      yield legacyStore.setMigrationState(migrationState);\n    }\n\n    // Migration is done.\n    (_args$legacyMigration2 = args.legacyMigrationProgressListener) === null || _args$legacyMigration2 === void 0 || _args$legacyMigration2.call(args, -1, -1);\n    logger.info(\"Migration from legacy crypto store complete\");\n  });\n  return _migrateFromLegacyCrypto.apply(this, arguments);\n}\nfunction migrateBaseData(_x2, _x3, _x4, _x5, _x6, _x7, _x8) {\n  return _migrateBaseData.apply(this, arguments);\n}\nfunction _migrateBaseData() {\n  _migrateBaseData = _asyncToGenerator(function* (http, userId, deviceId, legacyStore, pickleKey, storeHandle, logger) {\n    var migrationData = new RustSdkCryptoJs.BaseMigrationData();\n    migrationData.userId = new RustSdkCryptoJs.UserId(userId);\n    migrationData.deviceId = new RustSdkCryptoJs.DeviceId(deviceId);\n    yield legacyStore.doTxn(\"readonly\", [IndexedDBCryptoStore.STORE_ACCOUNT], txn => legacyStore.getAccount(txn, a => {\n      migrationData.pickledAccount = a !== null && a !== void 0 ? a : \"\";\n    }));\n    var recoveryKey = yield getAndDecryptCachedSecretKey(legacyStore, pickleKey, \"m.megolm_backup.v1\");\n\n    // If we have a backup recovery key, we need to try to figure out which backup version it is for.\n    // All we can really do is ask the server for the most recent version and check if the cached key we have matches.\n    // It is possible that the backup has changed since last time his session was opened.\n    if (recoveryKey) {\n      var backupCallDone = false;\n      var backupInfo = null;\n      while (!backupCallDone) {\n        try {\n          backupInfo = yield requestKeyBackupVersion(http);\n          backupCallDone = true;\n        } catch (e) {\n          logger.info(\"Failed to get backup version during migration, retrying in 2 seconds\", e);\n          // Retry until successful, use simple constant delay\n          yield sleep(2000);\n        }\n      }\n      if (backupInfo && backupInfo.algorithm == \"m.megolm_backup.v1.curve25519-aes-sha2\") {\n        // check if the recovery key matches, as the active backup version may have changed since the key was cached\n        // and the migration started.\n        try {\n          var _backupInfo$auth_data;\n          var decryptionKey = RustSdkCryptoJs.BackupDecryptionKey.fromBase64(recoveryKey);\n          var publicKey = (_backupInfo$auth_data = backupInfo.auth_data) === null || _backupInfo$auth_data === void 0 ? void 0 : _backupInfo$auth_data.public_key;\n          var isValid = decryptionKey.megolmV1PublicKey.publicKeyBase64 == publicKey;\n          if (isValid) {\n            migrationData.backupVersion = backupInfo.version;\n            migrationData.backupRecoveryKey = recoveryKey;\n          } else {\n            logger.debug(\"The backup key to migrate does not match the active backup version\", \"Cached pub key: \".concat(decryptionKey.megolmV1PublicKey.publicKeyBase64), \"Active pub key: \".concat(publicKey));\n          }\n        } catch (e) {\n          logger.warn(\"Failed to check if the backup key to migrate matches the active backup version\", e);\n        }\n      }\n    }\n    migrationData.privateCrossSigningMasterKey = yield getAndDecryptCachedSecretKey(legacyStore, pickleKey, \"master\");\n    migrationData.privateCrossSigningSelfSigningKey = yield getAndDecryptCachedSecretKey(legacyStore, pickleKey, \"self_signing\");\n    migrationData.privateCrossSigningUserSigningKey = yield getAndDecryptCachedSecretKey(legacyStore, pickleKey, \"user_signing\");\n    yield RustSdkCryptoJs.Migration.migrateBaseData(migrationData, pickleKey, storeHandle);\n  });\n  return _migrateBaseData.apply(this, arguments);\n}\nfunction countOlmSessions(_x9, _x10) {\n  return _countOlmSessions.apply(this, arguments);\n}\nfunction _countOlmSessions() {\n  _countOlmSessions = _asyncToGenerator(function* (logger, legacyStore) {\n    logger.debug(\"Counting olm sessions to be migrated\");\n    var nSessions;\n    yield legacyStore.doTxn(\"readonly\", [IndexedDBCryptoStore.STORE_SESSIONS], txn => legacyStore.countEndToEndSessions(txn, n => nSessions = n));\n    return nSessions;\n  });\n  return _countOlmSessions.apply(this, arguments);\n}\nfunction countMegolmSessions(_x11, _x12) {\n  return _countMegolmSessions.apply(this, arguments);\n}\nfunction _countMegolmSessions() {\n  _countMegolmSessions = _asyncToGenerator(function* (logger, legacyStore) {\n    logger.debug(\"Counting megolm sessions to be migrated\");\n    return yield legacyStore.countEndToEndInboundGroupSessions();\n  });\n  return _countMegolmSessions.apply(this, arguments);\n}\nfunction migrateOlmSessions(_x13, _x14, _x15, _x16, _x17) {\n  return _migrateOlmSessions.apply(this, arguments);\n}\nfunction _migrateOlmSessions() {\n  _migrateOlmSessions = _asyncToGenerator(function* (logger, legacyStore, pickleKey, storeHandle, onBatchDone) {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      var batch = yield legacyStore.getEndToEndSessionsBatch();\n      if (batch === null) return;\n      logger.debug(\"Migrating batch of \".concat(batch.length, \" olm sessions\"));\n      var migrationData = [];\n      for (var session of batch) {\n        var pickledSession = new RustSdkCryptoJs.PickledSession();\n        pickledSession.senderKey = session.deviceKey;\n        pickledSession.pickle = session.session;\n        pickledSession.lastUseTime = pickledSession.creationTime = new Date(session.lastReceivedMessageTs);\n        migrationData.push(pickledSession);\n      }\n      yield RustSdkCryptoJs.Migration.migrateOlmSessions(migrationData, pickleKey, storeHandle);\n      yield legacyStore.deleteEndToEndSessionsBatch(batch);\n      onBatchDone(batch.length);\n    }\n  });\n  return _migrateOlmSessions.apply(this, arguments);\n}\nfunction migrateMegolmSessions(_x18, _x19, _x20, _x21, _x22) {\n  return _migrateMegolmSessions.apply(this, arguments);\n}\n/**\n * Determine if any room settings need migrating from the legacy store, and do so.\n *\n * @param args - Arguments object.\n */\nfunction _migrateMegolmSessions() {\n  _migrateMegolmSessions = _asyncToGenerator(function* (logger, legacyStore, pickleKey, storeHandle, onBatchDone) {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      var batch = yield legacyStore.getEndToEndInboundGroupSessionsBatch();\n      if (batch === null) return;\n      logger.debug(\"Migrating batch of \".concat(batch.length, \" megolm sessions\"));\n      var migrationData = [];\n      for (var session of batch) {\n        var _sessionData$keysClai;\n        var sessionData = session.sessionData;\n        var pickledSession = new RustSdkCryptoJs.PickledInboundGroupSession();\n        pickledSession.pickle = sessionData.session;\n        pickledSession.roomId = new RustSdkCryptoJs.RoomId(sessionData.room_id);\n        pickledSession.senderKey = session.senderKey;\n        pickledSession.senderSigningKey = (_sessionData$keysClai = sessionData.keysClaimed) === null || _sessionData$keysClai === void 0 ? void 0 : _sessionData$keysClai[\"ed25519\"];\n        pickledSession.backedUp = !session.needsBackup;\n\n        // The Rust SDK `imported` flag is used to indicate the authenticity status of a Megolm\n        // session, which tells us whether we can reliably tell which Olm device is the owner\n        // (creator) of the session.\n        //\n        // If `imported` is true, then we have no cryptographic proof that the session is owned\n        // by the device with the identity key `senderKey`.\n        //\n        // Only Megolm sessions received directly from the owning device via an encrypted\n        // `m.room_key` to-device message should have `imported` flag set to false. Megolm\n        // sessions received by any other currently available means (i.e. from a\n        // `m.forwarded_room_key`, from v1 asymmetric server-side key backup, imported from a\n        // file, etc) should have the `imported` flag set to true.\n        //\n        // Messages encrypted with such Megolm sessions will have a grey shield in the UI\n        // (\"Authenticity of this message cannot be guaranteed\").\n        //\n        // However, we don't want to bluntly mark all sessions as `imported` during migration\n        // because users will suddenly start seeing all their historic messages decorated with a\n        // grey shield, which would be seen as a non-actionable regression.\n        //\n        // In the legacy crypto stack, the flag encoding similar information was called\n        // `InboundGroupSessionData.untrusted`. The value of this flag was set as follows:\n        //\n        // - For outbound Megolm sessions created by our own device, `untrusted` is `undefined`.\n        // - For Megolm sessions received via a `m.room_key` to-device message, `untrusted` is\n        //   `undefined`.\n        // - For Megolm sessions received via a `m.forwarded_room_key` to-device message,\n        //   `untrusted` is `true`.\n        // - For Megolm sessions imported from a (v1 asymmetric / \"legacy\") server-side key\n        //   backup, `untrusted` is `true`.\n        // - For Megolm sessions imported from a file, untrusted is `undefined`.\n        //\n        // The main difference between the legacy crypto stack and the Rust crypto stack is that\n        // the Rust stack considers sessions imported from a file as `imported` (not\n        // authenticated). This is because the Megolm session export file format does not\n        // encode this authenticity information.\n        //\n        // Given this migration is only a one-time thing, we make a concession to accept the\n        // loss of information in this case, to avoid degrading UX in a non-actionable way.\n        pickledSession.imported = sessionData.untrusted === true;\n        migrationData.push(pickledSession);\n      }\n      yield RustSdkCryptoJs.Migration.migrateMegolmSessions(migrationData, pickleKey, storeHandle);\n      yield legacyStore.deleteEndToEndInboundGroupSessionsBatch(batch);\n      onBatchDone(batch.length);\n    }\n  });\n  return _migrateMegolmSessions.apply(this, arguments);\n}\nexport function migrateRoomSettingsFromLegacyCrypto(_x23) {\n  return _migrateRoomSettingsFromLegacyCrypto.apply(this, arguments);\n}\nfunction _migrateRoomSettingsFromLegacyCrypto() {\n  _migrateRoomSettingsFromLegacyCrypto = _asyncToGenerator(function* (_ref) {\n    var {\n      logger,\n      legacyStore,\n      olmMachine\n    } = _ref;\n    if (!(yield legacyStore.containsData())) {\n      // This store was never used. Nothing to migrate.\n      return;\n    }\n    var migrationState = yield legacyStore.getMigrationState();\n    if (migrationState >= MigrationState.ROOM_SETTINGS_MIGRATED) {\n      // We've already migrated the room settings.\n      return;\n    }\n    var rooms = {};\n    yield legacyStore.doTxn(\"readwrite\", [IndexedDBCryptoStore.STORE_ROOMS], txn => {\n      legacyStore.getEndToEndRooms(txn, result => {\n        rooms = result;\n      });\n    });\n    logger.debug(\"Migrating \".concat(Object.keys(rooms).length, \" sets of room settings\"));\n    for (var [roomId, legacySettings] of Object.entries(rooms)) {\n      try {\n        var rustSettings = new RustSdkCryptoJs.RoomSettings();\n        if (legacySettings.algorithm !== \"m.megolm.v1.aes-sha2\") {\n          logger.warn(\"Room \".concat(roomId, \": ignoring room with invalid algorithm \").concat(legacySettings.algorithm));\n          continue;\n        }\n        rustSettings.algorithm = RustSdkCryptoJs.EncryptionAlgorithm.MegolmV1AesSha2;\n        rustSettings.sessionRotationPeriodMs = legacySettings.rotation_period_ms;\n        rustSettings.sessionRotationPeriodMessages = legacySettings.rotation_period_msgs;\n        yield olmMachine.setRoomSettings(new RustSdkCryptoJs.RoomId(roomId), rustSettings);\n\n        // We don't attempt to clear out the settings from the old store, or record where we've gotten up to,\n        // which means that if the app gets restarted while we're in the middle of this migration, we'll start\n        // again from scratch. So be it. Given that legacy crypto loads the whole room list into memory on startup\n        // anyway, we know it can't be that big.\n      } catch (e) {\n        logger.warn(\"Room \".concat(roomId, \": ignoring settings \").concat(JSON.stringify(legacySettings), \" which caused error \").concat(e));\n      }\n    }\n    logger.debug(\"Completed room settings migration\");\n    yield legacyStore.setMigrationState(MigrationState.ROOM_SETTINGS_MIGRATED);\n  });\n  return _migrateRoomSettingsFromLegacyCrypto.apply(this, arguments);\n}\nfunction getAndDecryptCachedSecretKey(_x24, _x25, _x26) {\n  return _getAndDecryptCachedSecretKey.apply(this, arguments);\n}\n/**\n * Check if the user's published identity (ie, public cross-signing keys) was trusted by the legacy session,\n * and if so mark it as trusted in the Rust session if needed.\n *\n * By default, if the legacy session didn't have the private MSK, the migrated session will revert to unverified,\n * even if the user has verified the session in the past.\n *\n * This only occurs if the private MSK was not cached in the crypto store (USK and SSK private keys won't help\n * to establish trust: the trust is rooted in the MSK).\n *\n * Rust crypto will only consider the current session as trusted if we import the private MSK itself.\n *\n * We could prompt the user to verify the session again, but it's probably better to just mark the user identity\n * as locally verified if it was before.\n *\n * See https://github.com/element-hq/element-web/issues/27079\n *\n * @param args - Argument object.\n */\nfunction _getAndDecryptCachedSecretKey() {\n  _getAndDecryptCachedSecretKey = _asyncToGenerator(function* (legacyStore, legacyPickleKey, name) {\n    var key = yield new Promise(resolve => {\n      legacyStore.doTxn(\"readonly\", [IndexedDBCryptoStore.STORE_ACCOUNT], txn => {\n        legacyStore.getSecretStorePrivateKey(txn, resolve, name);\n      });\n    });\n    if (key && key.ciphertext && key.iv && key.mac) {\n      return yield decryptAESSecretStorageItem(key, legacyPickleKey, name);\n    } else if (key instanceof Uint8Array) {\n      // This is a legacy backward compatibility case where the key was stored in clear.\n      return encodeBase64(key);\n    } else {\n      return undefined;\n    }\n  });\n  return _getAndDecryptCachedSecretKey.apply(this, arguments);\n}\nexport function migrateLegacyLocalTrustIfNeeded(_x27) {\n  return _migrateLegacyLocalTrustIfNeeded.apply(this, arguments);\n}\n\n/**\n * Checks if the legacy store has a trusted public master key, and returns it if so.\n *\n * @param legacyStore - The legacy store to check.\n *\n * @returns `null` if there were no cross signing keys or if they were not trusted. The trusted public master key if it was.\n */\nfunction _migrateLegacyLocalTrustIfNeeded() {\n  _migrateLegacyLocalTrustIfNeeded = _asyncToGenerator(function* (args) {\n    var {\n      legacyCryptoStore,\n      rustCrypto,\n      logger\n    } = args;\n    // Get the public cross-signing identity from rust.\n    var rustOwnIdentity = yield rustCrypto.getOwnIdentity();\n    if (!rustOwnIdentity) {\n      // There are no cross-signing keys published server side, so nothing to do here.\n      return;\n    }\n    if (rustOwnIdentity.isVerified()) {\n      // The rust session already trusts the keys, so again, nothing to do.\n      return;\n    }\n    var legacyLocallyTrustedMSK = yield getLegacyTrustedPublicMasterKeyBase64(legacyCryptoStore);\n    if (!legacyLocallyTrustedMSK) {\n      // The user never verified their identity in the legacy session, so nothing to do.\n      return;\n    }\n    var mskInfo = JSON.parse(rustOwnIdentity.masterKey);\n    if (!mskInfo.keys || Object.keys(mskInfo.keys).length === 0) {\n      // This should not happen, but let's be safe\n      logger.error(\"Post Migration | Unexpected error: no master key in the rust session.\");\n      return;\n    }\n    var rustSeenMSK = Object.values(mskInfo.keys)[0];\n    if (rustSeenMSK && rustSeenMSK == legacyLocallyTrustedMSK) {\n      logger.info(\"Post Migration: Migrating legacy trusted MSK: \".concat(legacyLocallyTrustedMSK, \" to locally verified.\"));\n      // Let's mark the user identity as locally verified as part of the migration.\n      yield rustOwnIdentity.verify();\n      // As well as marking the MSK as trusted, `OlmMachine.verify` returns a\n      // `SignatureUploadRequest` which will publish a signature of the MSK using\n      // this device. In this case, we ignore the request: since the user hasn't\n      // actually re-verified the MSK, we don't publish a new signature. (`.verify`\n      // doesn't store the signature, and if we drop the request here it won't be\n      // retried.)\n      //\n      // Not publishing the signature is consistent with the behaviour of\n      // matrix-crypto-sdk when the private key is imported via\n      // `importCrossSigningKeys`, and when the identity is verified via interactive\n      // verification.\n      //\n      // [Aside: device signatures on the MSK are not considered by the rust-sdk to\n      // establish the trust of the user identity so in any case, what we actually do\n      // here is somewhat moot.]\n    }\n  });\n  return _migrateLegacyLocalTrustIfNeeded.apply(this, arguments);\n}\nfunction getLegacyTrustedPublicMasterKeyBase64(_x28) {\n  return _getLegacyTrustedPublicMasterKeyBase.apply(this, arguments);\n}\nfunction _getLegacyTrustedPublicMasterKeyBase() {\n  _getLegacyTrustedPublicMasterKeyBase = _asyncToGenerator(function* (legacyStore) {\n    var maybeTrustedKeys = null;\n    yield legacyStore.doTxn(\"readonly\", \"account\", txn => {\n      legacyStore.getCrossSigningKeys(txn, keys => {\n        // can be an empty object after resetting cross-signing keys, see storeTrustedSelfKeys\n        var msk = keys === null || keys === void 0 ? void 0 : keys.master;\n        if (msk && Object.keys(msk.keys).length != 0) {\n          // `msk.keys` is an object with { [`ed25519:${pubKey}`]: pubKey }\n          maybeTrustedKeys = Object.values(msk.keys)[0];\n        }\n      });\n    });\n    return maybeTrustedKeys;\n  });\n  return _getLegacyTrustedPublicMasterKeyBase.apply(this, arguments);\n}\n//# sourceMappingURL=libolm_migration.js.map","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport { StoreHandle } from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport { RustCrypto } from \"./rust-crypto.js\";\nimport { MigrationState } from \"../crypto/store/base.js\";\nimport { migrateFromLegacyCrypto, migrateLegacyLocalTrustIfNeeded, migrateRoomSettingsFromLegacyCrypto } from \"./libolm_migration.js\";\n/**\n * Create a new `RustCrypto` implementation\n *\n * @param args - Parameter object\n * @internal\n */\nexport function initRustCrypto(_x) {\n  return _initRustCrypto.apply(this, arguments);\n}\nfunction _initRustCrypto() {\n  _initRustCrypto = _asyncToGenerator(function* (args) {\n    var {\n      logger\n    } = args;\n\n    // initialise the rust matrix-sdk-crypto-wasm, if it hasn't already been done\n    logger.debug(\"Initialising Rust crypto-sdk WASM artifact\");\n    yield RustSdkCryptoJs.initAsync();\n\n    // enable tracing in the rust-sdk\n    new RustSdkCryptoJs.Tracing(RustSdkCryptoJs.LoggerLevel.Debug).turnOn();\n    logger.debug(\"Opening Rust CryptoStore\");\n    var storeHandle;\n    if (args.storePrefix) {\n      if (args.storeKey) {\n        storeHandle = yield StoreHandle.openWithKey(args.storePrefix, args.storeKey);\n      } else {\n        storeHandle = yield StoreHandle.open(args.storePrefix, args.storePassphrase);\n      }\n    } else {\n      storeHandle = yield StoreHandle.open();\n    }\n    if (args.legacyCryptoStore) {\n      // We have a legacy crypto store, which we may need to migrate from.\n      yield migrateFromLegacyCrypto(_objectSpread({\n        legacyStore: args.legacyCryptoStore,\n        storeHandle\n      }, args));\n    }\n    var rustCrypto = yield initOlmMachine(logger, args.http, args.userId, args.deviceId, args.secretStorage, args.cryptoCallbacks, storeHandle, args.legacyCryptoStore);\n    storeHandle.free();\n    logger.debug(\"Completed rust crypto-sdk setup\");\n    return rustCrypto;\n  });\n  return _initRustCrypto.apply(this, arguments);\n}\nfunction initOlmMachine(_x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9) {\n  return _initOlmMachine.apply(this, arguments);\n}\nfunction _initOlmMachine() {\n  _initOlmMachine = _asyncToGenerator(function* (logger, http, userId, deviceId, secretStorage, cryptoCallbacks, storeHandle, legacyCryptoStore) {\n    logger.debug(\"Init OlmMachine\");\n    var olmMachine = yield RustSdkCryptoJs.OlmMachine.initFromStore(new RustSdkCryptoJs.UserId(userId), new RustSdkCryptoJs.DeviceId(deviceId), storeHandle);\n\n    // A final migration step, now that we have an OlmMachine.\n    if (legacyCryptoStore) {\n      yield migrateRoomSettingsFromLegacyCrypto({\n        logger,\n        legacyStore: legacyCryptoStore,\n        olmMachine\n      });\n    }\n\n    // Disable room key requests, per https://github.com/vector-im/element-web/issues/26524.\n    olmMachine.roomKeyRequestsEnabled = false;\n    var rustCrypto = new RustCrypto(logger, olmMachine, http, userId, deviceId, secretStorage, cryptoCallbacks);\n    yield olmMachine.registerRoomKeyUpdatedCallback(sessions => rustCrypto.onRoomKeysUpdated(sessions));\n    yield olmMachine.registerRoomKeysWithheldCallback(withheld => rustCrypto.onRoomKeysWithheld(withheld));\n    yield olmMachine.registerUserIdentityUpdatedCallback(userId => rustCrypto.onUserIdentityUpdated(userId));\n    yield olmMachine.registerDevicesUpdatedCallback(userIds => rustCrypto.onDevicesUpdated(userIds));\n\n    // Check if there are any key backup secrets pending processing. There may be multiple secrets to process if several devices have gossiped them.\n    // The `registerReceiveSecretCallback` function will only be triggered for new secrets. If the client is restarted before processing them, the secrets will need to be manually handled.\n    rustCrypto.checkSecrets(\"m.megolm_backup.v1\");\n\n    // Register a callback to be notified when a new secret is received, as for now only the key backup secret is supported (the cross signing secrets are handled automatically by the OlmMachine)\n    yield olmMachine.registerReceiveSecretCallback((name, _value) =>\n    // Instead of directly checking the secret value, we poll the inbox to get all values for that secret type.\n    // Once we have all the values, we can safely clear the secret inbox.\n    rustCrypto.checkSecrets(name));\n\n    // Tell the OlmMachine to think about its outgoing requests before we hand control back to the application.\n    //\n    // This is primarily a fudge to get it to correctly populate the `users_for_key_query` list, so that future\n    // calls to getIdentity (etc) block until the key queries are performed.\n    //\n    // Note that we don't actually need to *make* any requests here; it is sufficient to tell the Rust side to think\n    // about them.\n    //\n    // XXX: find a less hacky way to do this.\n    yield olmMachine.outgoingRequests();\n    if (legacyCryptoStore && (yield legacyCryptoStore.containsData())) {\n      var migrationState = yield legacyCryptoStore.getMigrationState();\n      if (migrationState < MigrationState.INITIAL_OWN_KEY_QUERY_DONE) {\n        logger.debug(\"Performing initial key query after migration\");\n        // We need to do an initial keys query so that the rust stack can properly update trust of\n        // the user device and identity from the migrated private keys.\n        // If not done, there is a short period where the own device/identity trust will be undefined after migration.\n        var initialKeyQueryDone = false;\n        while (!initialKeyQueryDone) {\n          try {\n            yield rustCrypto.userHasCrossSigningKeys(userId);\n            initialKeyQueryDone = true;\n          } catch (e) {\n            // If the initial key query fails, we retry until it succeeds.\n            logger.error(\"Failed to check for cross-signing keys after migration, retrying\", e);\n          }\n        }\n\n        // If the private master cross-signing key was not cached in the legacy store, the rust session\n        // will not be able to establish the trust of the user identity.\n        // That means that after migration the session could revert to unverified.\n        // In order to avoid asking the users to re-verify their sessions, we need to migrate the legacy local trust\n        // (if the legacy session was already verified) to the new session.\n        yield migrateLegacyLocalTrustIfNeeded({\n          legacyCryptoStore,\n          rustCrypto,\n          logger\n        });\n        yield legacyCryptoStore.setMigrationState(MigrationState.INITIAL_OWN_KEY_QUERY_DONE);\n      }\n    }\n    return rustCrypto;\n  });\n  return _initOlmMachine.apply(this, arguments);\n}\n//# sourceMappingURL=index.js.map"],"names":["wasm","__wbg_set_wasm","val","WASM_VECTOR_LEN","cachedUint8ArrayMemory0","getUint8ArrayMemory0","lTextEncoder","cachedTextEncoder","encodeString","arg","view","buf","passStringToWasm0","malloc","realloc","ptr","len","mem","offset","code","ret","cachedDataViewMemory0","getDataViewMemory0","addToExternrefTable0","obj","idx","handleError","f","args","e","lTextDecoder","cachedTextDecoder","getStringFromWasm0","isLikeNone","x","getArrayU8FromWasm0","CLOSURE_DTORS","state","makeMutClosure","arg0","arg1","dtor","real","makeClosure","debugString","type","description","name","length","debug","i","builtInMatches","className","passArray8ToWasm0","takeFromExternrefTable0","value","_assertClass","instance","klass","passArrayJsValueToWasm0","array","add","getArrayJsValueFromWasm0","result","cachedUint16ArrayMemory0","getUint16ArrayMemory0","getArrayU16FromWasm0","getVersions","Versions","start","__wbg_adapter_58","arg2","__wbg_adapter_61","__wbg_adapter_64","__wbg_adapter_67","__wbg_adapter_70","__wbg_adapter_788","arg3","DecryptionErrorCode","DeviceKeyAlgorithmName","DeviceKeyName","EncryptionAlgorithm","HistoryVisibility","LocalTrust","LoggerLevel","QrCodeMode","QrState","RequestType","ShieldColor","ShieldStateCode","SignatureState","TrustRequirement","VerificationMethod","VerificationRequestPhase","__wbindgen_enum_IdbRequestReadyState","__wbindgen_enum_IdbTransactionMode","AttachmentFinalization","Attachment","ptr0","len0","EncryptedAttachment","attachment","v1","BackupDecryptionKeyFinalization","BackupDecryptionKey","key","MegolmV1BackupKey","ephemeral_key","mac","ciphertext","deferred5_0","deferred5_1","ptr1","len1","ptr2","len2","ptr4","len4","BackupKeysFinalization","BackupKeys","BackupSecretsBundleFinalization","BackupSecretsBundle","deferred1_0","deferred1_1","Base64EncodedPkMessageFinalization","Base64EncodedPkMessage","BaseMigrationDataFinalization","BaseMigrationData","UserId","DeviceId","CancelInfoFinalization","CancelInfo","CheckCodeFinalization","CheckCode","CollectStrategyFinalization","CollectStrategy","other","only_allow_trusted_devices","error_on_verified_user_problem","CrossSigningBootstrapRequestsFinalization","CrossSigningBootstrapRequests","UploadSigningKeysRequest","SignatureUploadRequest","CrossSigningKeyExportFinalization","CrossSigningKeyExport","CrossSigningStatusFinalization","CrossSigningStatus","Curve25519PublicKeyFinalization","Curve25519PublicKey","Curve25519SecretKeyFinalization","Curve25519SecretKey","string","slice","DecryptedRoomEventFinalization","DecryptedRoomEvent","strict","ShieldState","DecryptionSettingsFinalization","DecryptionSettings","sender_device_trust_requirement","DehydratedDeviceFinalization","DehydratedDevice","initial_device_display_name","dehydrated_device_key","DehydratedDeviceKey","DehydratedDeviceKeyFinalization","DehydratedDevicesFinalization","DehydratedDevices","device_id","device_data","DeviceFinalization","Device","methods","event_type","content","local_state","algorithm","DeviceKey","Ed25519PublicKey","Signatures","DeviceIdFinalization","id","DeviceKeyFinalization","DeviceKeyAlgorithmFinalization","DeviceKeyAlgorithm","DeviceKeyIdFinalization","DeviceKeyId","DeviceListsFinalization","DeviceLists","changed","left","EciesFinalization","Ecies","initial_message","InboundCreationResult","public_key","OutboundCreationResult","Ed25519PublicKeyFinalization","Ed25519SignatureFinalization","Ed25519Signature","signature","EmojiFinalization","Emoji","EncryptedAttachmentFinalization","encrypted_data","media_encryption_info","EncryptionInfoFinalization","EncryptionInfo","EncryptionSettingsFinalization","EncryptionSettings","EstablishedEciesFinalization","EstablishedEcies","message","deferred2_0","deferred2_1","deferred3_0","deferred3_1","EventIdFinalization","EventId","ServerName","IdentityKeysFinalization","IdentityKeys","InboundCreationResultFinalization","InboundGroupSessionFinalization","InboundGroupSession","RoomId","KeysBackupRequestFinalization","KeysBackupRequest","body","version","KeysClaimRequestFinalization","KeysClaimRequest","KeysQueryRequestFinalization","KeysQueryRequest","KeysUploadRequestFinalization","KeysUploadRequest","MaybeSignatureFinalization","MaybeSignature","Signature","MegolmDecryptionErrorFinalization","MegolmDecryptionError","MegolmV1BackupKeyFinalization","MigrationFinalization","Migration","data","pickle_key","store_handle","StoreHandle","sessions","OlmMachineFinalization","OlmMachine","user_id","store_name","store_passphrase","enabled","users","to_device_events","changed_devices","one_time_keys_counts","unused_fallback_keys","request_id","request_type","response","room_id","event","decryption_settings","bundle","SecretsBundle","master_key","self_signing_key","user_signing_key","reset","encryption_settings","timeout_secs","flow_id","VerificationRequest","predicate","exported_room_keys","progress_listener","backed_up_room_keys","backup_version","decryption_key","backup_info","public_key_base_64","passphrase","rounds","deferred4_0","deferred4_1","ptr3","len3","encrypted_exported_room_keys","callback","secret_name","room_settings","RoomSettings","OtherUserIdentityFinalization","OtherUserIdentity","request_event_id","OutboundCreationResultFinalization","OwnUserIdentityFinalization","OwnUserIdentity","PickledInboundGroupSessionFinalization","PickledInboundGroupSession","jsValue","PickledSessionFinalization","PickledSession","PkDecryptionFinalization","PkDecryption","PkMessage","PkEncryptionFinalization","PkEncryption","PkMessageFinalization","PutDehydratedDeviceRequestFinalization","PutDehydratedDeviceRequest","QrFinalization","Qr","QrCode","QrCodeFinalization","QrCodeDataFinalization","QrCodeData","rendezvous_url","server_name","bytes","QrCodeScanFinalization","QrCodeScan","buffer","RehydratedDeviceFinalization","RehydratedDevice","RoomIdFinalization","RoomKeyCountsFinalization","RoomKeyCounts","RoomKeyImportResultFinalization","RoomKeyImportResult","RoomKeyInfoFinalization","RoomKeyInfo","RoomKeyWithheldInfoFinalization","RoomKeyWithheldInfo","RoomMessageRequestFinalization","RoomMessageRequest","txn_id","RoomSettingsFinalization","SasFinalization","Sas","SecretsBundleFinalization","json","ServerNameFinalization","ShieldStateFinalization","SignatureFinalization","SignatureUploadRequestFinalization","signed_keys","SignatureVerificationFinalization","SignatureVerification","SignaturesFinalization","signer","key_id","StoreHandleFinalization","store_key","ToDeviceRequestFinalization","ToDeviceRequest","TracingFinalization","Tracing","min_level","UploadSigningKeysRequestFinalization","UserDevicesFinalization","UserDevices","UserIdFinalization","VerificationRequestFinalization","own_user_id","own_device_id","other_user_id","VersionsFinalization","__wbg_String_8f0eb39a4a4c2f66","__wbg_Window_b0044ac7db258535","__wbg_WorkerGlobalScope_b74cefefc62a37da","__wbg_add_883d9432f9188ef2","__wbg_add_9338901b80183e0f","__wbg_at_7d852dd9f194d43e","__wbg_backupkeys_new","__wbg_bound_55a8d08e0491e17a","__wbg_bound_f2afc3766d4545cf","__wbg_buffer_609cc3eee51ed158","__wbg_call_672a4d21634d4a24","__wbg_call_7cccdd69e0791ae2","__wbg_call_833bed5770ea2041","__wbg_call_b8adc8b1d0a0d8eb","arg4","__wbg_clearTimeout_5a54f8841c30079a","__wbg_clear_f450db7eeb71163f","__wbg_close_26fc2e6856d8567a","__wbg_code_cfd8f6868bdaed9b","__wbg_continue_c46c11d3dbe1b030","__wbg_count_613cb921d67a4f26","__wbg_count_ea1a2987dff7759e","__wbg_createIndex_873ac48adc772309","__wbg_createIndex_fcfd513cf4581834","__wbg_createObjectStore_e566459f7161f82f","__wbg_crosssigningbootstraprequests_new","__wbg_crosssigningkeyexport_new","__wbg_crosssigningstatus_new","__wbg_crypto_ed58b8e10a292839","__wbg_debug_3cb59063b29f58c1","__wbg_debug_f41e47509e8e4e36","__wbg_decryptedroomevent_new","__wbg_dehydrateddevice_new","__wbg_dehydrateddevicekey_new","__wbg_deleteObjectStore_3f08ae00cd288224","__wbg_delete_200677093b4cf756","__wbg_delete_2ecf7cf20900b3a2","__wbg_device_new","__wbg_deviceid_new","__wbg_devicekey_new","__wbg_devicekeyid_new","__wbg_done_769e5ede4b31c67b","__wbg_emoji_new","__wbg_encryptioninfo_new","__wbg_entries_3265d4158b33e5dc","__wbg_entries_c8a90a7ed73e84ce","__wbg_error_524f506f44df1645","__wbg_error_7534b8e9a36f1ab4","deferred0_0","deferred0_1","__wbg_error_76286673af64a31f","__wbg_error_ff4ddaabdfc5dbb3","__wbg_from_2a5d3e218e67aa85","__wbg_getAllKeys_b11d8835dc4be0e8","__wbg_getAll_304e868beec2021f","__wbg_getAll_d1e60c13c0073374","__wbg_getAll_e6903c610babcd42","__wbg_getRandomValues_3d90134a348e46b3","__wbg_getRandomValues_bcb4912f16000dc4","__wbg_getTime_46267b1c24877e30","__wbg_get_67b2ba62fc30de12","__wbg_get_8da03f81f6a1111e","__wbg_get_93e54e8e166fbcab","__wbg_get_b9b93047fe3cf45b","__wbg_getwithrefkey_1dc361bd10053bfe","__wbg_global_b6f5c73312f62313","__wbg_inboundgroupsession_new","__wbg_index_e00ca5fff206ee3e","__wbg_indexedDB_601ec26c63e333de","__wbg_indexedDB_b1f49280282046f8","__wbg_indexedDB_f6b47b0dc333fd2f","__wbg_info_3b4be85e0a44d2af","__wbg_info_3daf2e093e091b66","__wbg_instanceof_ArrayBuffer_e14585432e3737fc","__wbg_instanceof_Map_f3469ce2244d2430","__wbg_instanceof_Promise_935168b8f4b49db3","__wbg_instanceof_Uint8Array_17156bcf118086a9","__wbg_isArray_a1eab7e0d067391b","__wbg_isSafeInteger_343e2beeeece1bb0","__wbg_item_c3c26b4103ad5aaf","__wbg_iterator_9a24c88df860dc65","__wbg_key_29fefecef430db96","__wbg_keysbackuprequest_new","__wbg_keysclaimrequest_new","__wbg_keysqueryrequest_new","__wbg_keysuploadrequest_new","__wbg_length_238152a0aedbb6e7","__wbg_length_a446193dc22c12f8","__wbg_length_e2d2a49132c1b256","__wbg_lowerBound_1872d19f5bcf83c6","__wbg_maybesignature_new","__wbg_megolmdecryptionerror_new","__wbg_message_5c5d919204d42400","__wbg_msCrypto_0a36e2ec3a343d26","__wbg_name_f2d27098bfd843e7","__wbg_new_23a2665fac83c611","state0","cb0","__wbg_new_31a97dac4f10fab7","__wbg_new_405e22f390576ce2","__wbg_new_5e0be73521bc8c17","__wbg_new_78feb108b6472713","__wbg_new_7a91e41fe43b3c92","__wbg_new_8a6f238a6ece86ea","__wbg_new_a12002a7f91c75be","__wbg_new_a239edaa1dc2968f","__wbg_newnoargs_105ed471475aaf50","__wbg_newwithbyteoffsetandlength_6d34787141015158","__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a","__wbg_newwithlength_a381634e90c276d4","__wbg_newwithlength_ee8e1b95dea9d37c","__wbg_newwithmessage_baedba94f03976fd","__wbg_next_25feadfc0913fea9","__wbg_next_6574e1a8a62d1055","__wbg_node_02999533c4ea02e3","__wbg_now_2c95c9de01293173","__wbg_now_807e54c39636c349","__wbg_objectStoreNames_9bb1ab04a7012aaf","__wbg_objectStore_21878d46d25b64b6","__wbg_oldVersion_e8337811e52861c6","__wbg_olmmachine_new","__wbg_openCursor_1adef2266972fb45","__wbg_openCursor_238e247d18bde2cd","__wbg_openCursor_f4b061aa6d804b93","__wbg_open_88b1390d99a7c691","__wbg_open_e0c0b2993eb596e1","__wbg_otheruseridentity_new","__wbg_ownuseridentity_new","__wbg_parse_def2e24ef1252aff","__wbg_performance_7a3ffd0b17f663ad","__wbg_pickledinboundgroupsession_unwrap","__wbg_pickledsession_unwrap","__wbg_process_5c1d670bc53614b8","__wbg_push_737cfc8c1432c2c6","__wbg_put_066faa31a6a88f5b","__wbg_putdehydrateddevicerequest_new","__wbg_qr_new","__wbg_queueMicrotask_97d92b4fcc8a61c5","__wbg_queueMicrotask_d3219def82552485","__wbg_randomFillSync_ab2cfe79ebbf2740","__wbg_readyState_4013cfdf4f22afb0","__wbg_rehydrateddevice_new","__wbg_require_79b1e9274cde3c87","__wbg_resolve_4851785c9c5f573d","__wbg_result_f29afabdf2c05826","__wbg_roomid_unwrap","__wbg_roomkeycounts_new","__wbg_roomkeyimportresult_new","__wbg_roomkeyinfo_new","__wbg_roomkeywithheldinfo_new","__wbg_roommessagerequest_new","__wbg_roomsettings_new","__wbg_sas_new","__wbg_secretsbundle_new","__wbg_setTimeout_db2dbaeefb6f39c7","__wbg_set_37837023f3d740e8","__wbg_set_3f1d0b984ed272ed","__wbg_set_65595bdd868b3009","__wbg_set_6775f73144c2ef27","__wbg_set_8fc6bf8a5b1071d1","__wbg_setonabort_3bf4db6614fa98e9","__wbg_setonblocked_aebf64bd39f1eca8","__wbg_setoncomplete_4d19df0dadb7c4d4","__wbg_setonerror_b0d9d723b8fddbbb","__wbg_setonerror_d7e3056cc6e56085","__wbg_setonsuccess_afa464ee777a396d","__wbg_setonupgradeneeded_fcf7ce4f2eb0cb5f","__wbg_setonversionchange_6ee07fa49ee1e3a5","__wbg_setunique_dd24c422aa05df89","__wbg_signatures_new","__wbg_signatureuploadrequest_new","__wbg_signatureverification_new","__wbg_stack_0ed75d68575b0f3c","__wbg_static_accessor_GLOBAL_88a902d13a557d07","__wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0","__wbg_static_accessor_SELF_37c5d418e4bf5819","__wbg_static_accessor_WINDOW_5de37043a91a9c40","__wbg_storehandle_new","__wbg_stringify_f7ed6987935b4a24","__wbg_subarray_aa9065fa9dc5df96","__wbg_target_0a62d9d79a2a1ede","__wbg_then_44b73946d2fb3e7d","__wbg_then_48b406749878a531","__wbg_todevicerequest_new","__wbg_transaction_babc423936946a37","__wbg_transaction_d6d07c3c9963c49e","__wbg_transaction_e713aa7b07ccaedd","__wbg_update_acd72607f506872a","__wbg_userdevices_new","__wbg_userid_new","__wbg_userid_unwrap","__wbg_value_68c4e9a54bb7fd5e","__wbg_value_cd1ffa7b1ab794f1","__wbg_values_53465c57fc8cd691","__wbg_verificationrequest_new","__wbg_version_a70a33e5bbc6d6db","__wbg_versions_c71aa1626a93e0a1","__wbg_warn_4ca3906c248c47c4","__wbg_warn_6ce7b8525f302b4c","__wbindgen_as_number","__wbindgen_bigint_from_i64","__wbindgen_bigint_from_u64","__wbindgen_bigint_get_as_i64","v","__wbindgen_boolean_get","__wbindgen_cb_drop","__wbindgen_closure_wrapper1066","__wbindgen_closure_wrapper2247","__wbindgen_closure_wrapper5526","__wbindgen_closure_wrapper7042","__wbindgen_closure_wrapper7044","__wbindgen_debug_string","__wbindgen_error_new","__wbindgen_in","__wbindgen_init_externref_table","table","__wbindgen_is_array","__wbindgen_is_bigint","__wbindgen_is_function","__wbindgen_is_null","__wbindgen_is_object","__wbindgen_is_string","__wbindgen_is_undefined","__wbindgen_jsval_eq","__wbindgen_jsval_loose_eq","__wbindgen_memory","__wbindgen_number_get","__wbindgen_number_new","__wbindgen_string_get","__wbindgen_string_new","__wbindgen_throw","__wbindgen_try_into_number","moduleUrl","bindings.__wbg_set_wasm","modPromise","loadModuleAsync","bindings","initAsync","escaped","escapes","escapeString","c","stringify","stringifyArray","stringifyObject","sep","object","keys","anotherJson","RoomEncryptor","olmMachine","keyClaimManager","outgoingRequestManager","room","encryptionSettings","_defineProperty","logger","members","u","RustSdkCryptoJs.UserId","config","member","KnownMembership","globalBlacklistUnverifiedDevices","deviceIsolationMode","_this","_asyncToGenerator","_event$getTxnId","_this2","LogSpan","prom","logDuration","_this3","userList","rustEncryptionSettings","toRustHistoryVisibility","DeviceIsolationModeKind","_this3$room$getBlackl","onlyAllowTrustedDevices","shareMessages","m","_this4","r","_this5","encryptedContent","EventType","visibility","RustHistoryVisibility","UnstablePrefix","SECRET_STORAGE_NAME","DEHYDRATION_INTERVAL","DehydratedDeviceManager","TypedEventEmitter","http","outgoingRequestProcessor","secretStorage","CryptoEvent","Method","error","err","_arguments","opts","RustSdkCryptoJs.DehydratedDeviceKey","create","_this6","cachedKey","keyB64","decodeBase64","_this7","dehydratedDeviceResp","rehydratedDevice","RustSdkCryptoJs.DeviceId","nextBatch","toDeviceCount","roomKeyCount","path","encodeUri","eventResp","roomKeyInfos","_this8","dehydratedDevice","request","_this9","_this10","ownKeys","o","_objectSpread","OutgoingRequestProcessor","msg","uiaCallback","resp","_path","DehydrationUnstablePrefix","parsedBody","messageList","userId","perUserMessages","deviceId","ToDeviceMessageId","method","queryParams","makeRequest","_ref2","auth","newBody","_x","currentRetryCount","backoff","calculateRetryBackoff","sleep","KeyClaimManager","claimRequest","rustDeviceToJsDevice","device","keyId","verified","DeviceVerification","signatures","mayBeSignatureMap","convertedSignatures","_key","rustAlgorithms","algorithms","RustSdkCryptoJs.EncryptionAlgorithm","deviceKeysToDeviceMap","deviceKeys","_ref","downloadDeviceToJsDevice","_device$unsigned","displayName","CrossSigningIdentity","olmDeviceStatus","masterKeyFromSecretStorage","selfSigningKeyFromSecretStorage","userSigningKeyFromSecretStorage","privateKeysInSecretStorage","olmDeviceHasKeys","status","authUploadDeviceSigningKeys","outgoingRequests","req","exported","secretStorageContainsCrossSigningKeys","_secretStorageContainsCrossSigningKeys","secretStorageCanAccessSecrets","_x2","_x3","_secretStorageCanAccessSecrets","secretNames","defaultKeyId","secretName","record","RustVerificationRequest","inner","supportedVerificationMethods","TypedReEmitter","weakThis","_weakThis$deref","verification","RustSdkCryptoJs.Sas","RustQrCodeVerifier","RustSASVerifier","RustSdkCryptoJs.Qr","VerificationRequestEvent","verifier","_this$inner$roomId","_this$inner$otherDevi","otherDeviceId","phase","RustSdkCryptoJs.VerificationRequestPhase","VerificationPhase","theirMethods","requiredMethod","verificationMethodsByIdentifier","verificationMethodIdentifierToMethod","params","targetDevice","res","uint8Array","scan","RustSdkCryptoJs.QrCodeScan","innerVerifier","_this$inner$cancelInf","_this$inner$cancelInf2","cancelInfo","BaseRustVerifer","defer","_weakThis$deref2","VerifierEvent","_verificationRequest","_this11","emoji","decimal","sas","_confirm","requests","confirm","_weakThis$deref3","RustSdkCryptoJs.VerificationMethod","meth","isVerificationEvent","MsgType","RustBackupManager","info","signatureVerification","backupKeys","decryptionKey","backupMatchesSavedPrivateKey","backupInfoMatchesBackupDecryptionKey","force","secret","_latestBackupInfo","latestBackupInfo","backupDecryptionKey","RustSdkCryptoJs.BackupDecryptionKey","privateKeyMatches","jsonKeys","progress","total","_opts$progressCallbac","importOpt","ImportRoomKeyStage","backupVersion","keysByRoom","roomId","RustSdkCryptoJs.RoomId","failures","_opts$progressCallbac2","backupInfo","activeVersion","trustInfo","_this12","_this13","maxDelay","delay","numFailures","remainingToUploadCount","isFirstIteration","keyCount","keysCountInBatch","MatrixError","errCode","waitTime","batch","countKeysInBackup","_this14","requestKeyBackupVersion","signObject","_this15","randomKey","pubKey","authData","ClientPrefix","_this16","_yield$_this16$reques","_yield$_this16$reques2","current","_yield$_this16$reques3","_yield$_this16$reques4","_this17","RustBackupDecryptor","backupDecryptor","_this18","keyBackup","_this19","_opts$progressCallbac3","CHUNK_SIZE","totalKeyCount","totalImported","totalFailures","handleChunkCallback","roomChunks","_opts$progressCallbac4","currentChunk","_loop","decryptedSessions","session","groupChunkCount","chunkGroupByRoom","roomData","sessionId","sessionsForRoom","_info$auth_data","ciphertexts","_this20","sessionData","decrypted","_requestKeyBackupVersion","decryptionKeyMatchesKeyBackupInfo","keyBackupInfo","count","OutgoingRequestsManager","deferred","_ret","KEY_BACKUP_BACKOFF","KeyDownloadErrorCode","KeyDownloadError","KeyDownloadRateLimitError","retryMillis","PerSessionKeyBackupDownloader","backupManager","configuration","megolmSessionId","now","sid","ts","lastCheck","targetRoomId","targetSessionId","_e$getRetryAfterMs","sessionInfo","sessionsToImport","k","_currentServerVersion","_currentServerVersion2","_currentServerVersion4","currentServerVersion","_currentServerVersion3","keyFromAuthData","deriveRecoveryKeyFromPassphrase","ALL_VERIFICATION_METHODS","RustCrypto","_deviceId","cryptoCallbacks","AllDevicesIsolationMode","EventDecryptor","ClientStoppedError","_v","_room","encryptor","privKey","encodeBase64","versions","RustSdkCryptoJs.getVersions","isolationMode","roomSettings","_this$roomEncryptors$","raw","downloadUncached","rustTrackedUsers","rustTrackedUser","userIdentity","_keyResult$master_key","keyResult","userIds","_arguments2","deviceMapByUserId","trackedUsers","rustUserId","untrackedUsers","_userId","queryResult","userDevices","deviceArray","d","queryBody","user","_arguments3","RustSdkCryptoJs.LocalTrust","outgoingRequest","DeviceVerificationStatus","UserVerificationStatus","wasVerified","needsUserApproval","RustSdkCryptoJs.OtherUserIdentity","RustSdkCryptoJs.OwnUserIdentity","_this21","privateKeysCachedLocally","hasKeysInCache","identity","_arguments4","_this22","CrossSigningKey","crossSigningStatus","privateKeysOnDevice","parsedKey","_this23","_this24","secretsToCheck","keyBackupEnabled","_arguments5","_this25","createSecretStorageKey","setupNewSecretStorage","setupNewKeyBackup","isNewSecretStorageKeyNeeded","recoveryKey","crossSigningPrivateKeys","hasPrivateKeys","_this26","backupKeyBase64","secretStorageKey","_this27","_secretStorageKey$key","_secretStorageKey$key2","_this27$cryptoCallbac","_this27$cryptoCallbac2","secretStorageKeyObject","SECRET_STORAGE_ALGORITHM_V1_AES","_this28","secretStorageKeyTuple","keyInfo","_this29","publicKeysOnDevice","password","_this30","salt","secureRandomString","encodeRecoveryKey","_this31","_request$roomId","_this32","verificationEventContent","eventId","RustSdkCryptoJs.EventId","_this33","txId","_this34","_this35","_this36","_this37","base64Key","_this38","backupKey","_this39","_this40","_this41","_this42","_this43","_this44","_this45","_this46","sigs","unsigned","userSignatures","canonalizedJson","anotherjson","map","_this47","privateKey","_this48","decodedDecryptionKey","_this49","_arguments6","_this50","secrets","_this51","secretsBundle","RustSdkCryptoJs.SecretsBundle","_this52","eventType","devices","payload","_this53","uniqueUsers","_ref4","_ref3","encryptedPayload","_this54","_this55","_ref5","_this56","events","oneTimeKeysCounts","unusedFallbackKeys","RustSdkCryptoJs.DeviceLists","_this57","processed","sender","transactionId","_this58","mapOneTimeKeysCount","setUnusedFallbackKeys","deviceLists","_this59","_deviceLists$changed","_deviceLists$left","_this60","settings","RustSdkCryptoJs.RoomSettings","existingEncryptor","syncState","_this61","oldMembership","enc","_this62","_this63","pendingList","ev","_e","withheld","_this64","_this65","newVerification","_this66","_this67","_this68","pendingValues","_this69","processEvent","_ref7","evt","TIMEOUT_DELAY","timeoutId","MatrixEventEvent","onDecrypted","decryptedEvent","_this70","_this71","perSessionBackupDownloader","MapWithDefault","_this72","trustRequirement","RustSdkCryptoJs.TrustRequirement","stringifyEvent","RustSdkCryptoJs.DecryptionSettings","RustSdkCryptoJs.MegolmDecryptionError","DecryptionError","DecryptionFailureCode","serverBackupInfo","errorDetails","RustSdkCryptoJs.DecryptionErrorCode","membership","failureCode","_this73","EventShieldColour","encryptionInfo","rustEncryptionInfoToJsEncryptionInfo","roomPendingEvents","sessionPendingEvents","shieldState","shieldColour","RustSdkCryptoJs.ShieldColor","shieldReason","RustSdkCryptoJs.ShieldStateCode","EventShieldReason","migrateFromLegacyCrypto","_migrateFromLegacyCrypto","_args$legacyMigration2","legacyStore","RustSdkCryptoJs.initAsync","RustSdkCryptoJs.Tracing","RustSdkCryptoJs.LoggerLevel","accountPickle","IndexedDBCryptoStore","txn","acctPickle","migrationState","MigrationState","nOlmSessions","countOlmSessions","nMegolmSessions","countMegolmSessions","totalSteps","stepsDone","onProgress","steps","_args$legacyMigration","pickleKey","migrateBaseData","migrateOlmSessions","migrateMegolmSessions","_x4","_x5","_x6","_x7","_x8","_migrateBaseData","storeHandle","migrationData","RustSdkCryptoJs.BaseMigrationData","a","getAndDecryptCachedSecretKey","backupCallDone","_backupInfo$auth_data","publicKey","isValid","RustSdkCryptoJs.Migration","_x9","_x10","_countOlmSessions","nSessions","n","_x11","_x12","_countMegolmSessions","_x13","_x14","_x15","_x16","_x17","_migrateOlmSessions","onBatchDone","pickledSession","RustSdkCryptoJs.PickledSession","_x18","_x19","_x20","_x21","_x22","_migrateMegolmSessions","_sessionData$keysClai","RustSdkCryptoJs.PickledInboundGroupSession","migrateRoomSettingsFromLegacyCrypto","_x23","_migrateRoomSettingsFromLegacyCrypto","rooms","legacySettings","rustSettings","_x24","_x25","_x26","_getAndDecryptCachedSecretKey","legacyPickleKey","resolve","decryptAESSecretStorageItem","migrateLegacyLocalTrustIfNeeded","_x27","_migrateLegacyLocalTrustIfNeeded","legacyCryptoStore","rustCrypto","rustOwnIdentity","legacyLocallyTrustedMSK","getLegacyTrustedPublicMasterKeyBase64","mskInfo","rustSeenMSK","_x28","_getLegacyTrustedPublicMasterKeyBase","maybeTrustedKeys","msk","initRustCrypto","_initRustCrypto","initOlmMachine","_initOlmMachine","RustSdkCryptoJs.OlmMachine","_value","initialKeyQueryDone"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]}